{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0","program":"/home/hussain/.rustup/toolchains/nightly-2021-06-17-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","proptest","--edition=2018","/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bit-set\"","--cfg","feature=\"break-dead-code\"","--cfg","feature=\"default\"","--cfg","feature=\"fork\"","--cfg","feature=\"lazy_static\"","--cfg","feature=\"quick-error\"","--cfg","feature=\"regex-syntax\"","--cfg","feature=\"rusty-fork\"","--cfg","feature=\"std\"","--cfg","feature=\"tempfile\"","--cfg","feature=\"timeout\"","-C","metadata=ec9de9cac0d59b52","-C","extra-filename=-ec9de9cac0d59b52","--out-dir","/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_router/target/rls/debug/deps","-L","dependency=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_router/target/rls/debug/deps","--extern","bit_set=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_router/target/rls/debug/deps/libbit_set-524b54b52e477cf0.rmeta","--extern","bitflags=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_router/target/rls/debug/deps/libbitflags-6ba84bfc7f94cddb.rmeta","--extern","byteorder=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_router/target/rls/debug/deps/libbyteorder-8896282776100022.rmeta","--extern","lazy_static=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_router/target/rls/debug/deps/liblazy_static-014fb1c6e3e5001a.rmeta","--extern","num_traits=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_router/target/rls/debug/deps/libnum_traits-6b7089eb21777081.rmeta","--extern","quick_error=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_router/target/rls/debug/deps/libquick_error-afabd5a1165aece1.rmeta","--extern","rand=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_router/target/rls/debug/deps/librand-37b10455d17b5d65.rmeta","--extern","rand_chacha=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_router/target/rls/debug/deps/librand_chacha-be874acf13699b90.rmeta","--extern","rand_xorshift=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_router/target/rls/debug/deps/librand_xorshift-250d787544898b8c.rmeta","--extern","regex_syntax=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_router/target/rls/debug/deps/libregex_syntax-c3aa7da090b61135.rmeta","--extern","rusty_fork=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_router/target/rls/debug/deps/librusty_fork-ff5c00a014bdd64a.rmeta","--extern","tempfile=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_router/target/rls/debug/deps/libtempfile-af2a4a47449637f4.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/hussain/.rustup/toolchains/nightly-2021-06-17-x86_64-unknown-linux-gnu"],"output":"/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_router/target/rls/debug/deps/libproptest-ec9de9cac0d59b52.rmeta"},"prelude":{"crate_id":{"name":"proptest","disambiguator":[5314231997326524391,3654319194238679617]},"crate_root":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src","external_crates":[{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[17044353007700780372,2918200604221815240]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[16381423150204372411,13484601183843768894]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[14897589902885170584,12420159477491062790]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":4,"id":{"name":"std","disambiguator":[10283585399922801530,3113815793436671734]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4001252548733048619,17242313319436819942]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5352780060018682353,5212160423076132458]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17147711338457548981,6939542792032145917]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[2842547253401849104,13491194742958542480]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[743652736616489669,1287960927584068912]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16292678807852148020,5791869870655771082]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[9404817637945341771,5464406936793117880]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[17888196348013287212,15275907588461469564]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[1276787031323089283,14926302036319710225]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[3988411805964943353,12607049771423756955]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[2565427104194196404,14362732384292144629]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[11025534897254923617,14932093111515565771]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[6421578182970509025,18151391361782090522]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[6900026989174100552,1126691905217298232]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":19,"id":{"name":"bitflags","disambiguator":[1380782603365375529,11222440694920492806]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":20,"id":{"name":"bit_set","disambiguator":[15835255378672231831,403698390822838152]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":21,"id":{"name":"bit_vec","disambiguator":[5693715148067656680,15883034774920236390]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":22,"id":{"name":"lazy_static","disambiguator":[17091810366437162307,18183660711557413532]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":23,"id":{"name":"quick_error","disambiguator":[8752994135149472708,16990221944811541543]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":24,"id":{"name":"rusty_fork","disambiguator":[15765147515020074334,7342824806075241519]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":25,"id":{"name":"quick_error","disambiguator":[264639567374304500,5288762617946247715]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":26,"id":{"name":"fnv","disambiguator":[14250370393717850921,4874548671151327872]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","num":27,"id":{"name":"tempfile","disambiguator":[8293784098993642916,17935986458366651750]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":28,"id":{"name":"cfg_if","disambiguator":[18066125678311518643,11358915899814267326]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":29,"id":{"name":"remove_dir_all","disambiguator":[3505599712934455009,1564326605528995427]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","num":30,"id":{"name":"rand","disambiguator":[8004330407439383344,16857471464432979755]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":31,"id":{"name":"rand_core","disambiguator":[7855472014059812477,16668462076919205273]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":32,"id":{"name":"getrandom","disambiguator":[4803081225783846525,4310028458570479758]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":33,"id":{"name":"libc","disambiguator":[3007975702234999712,17051625982276154889]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","num":34,"id":{"name":"rand_chacha","disambiguator":[407922346374181086,5984167972865213126]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":35,"id":{"name":"ppv_lite86","disambiguator":[8813800147649406494,3051749647990314795]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","num":36,"id":{"name":"wait_timeout","disambiguator":[16797902363804801689,6741625399398628288]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","num":37,"id":{"name":"byteorder","disambiguator":[5026424700297533460,11425761097025173200]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","num":38,"id":{"name":"rand_xorshift","disambiguator":[7382327434895377296,1693404461750571148]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","num":39,"id":{"name":"regex_syntax","disambiguator":[13183236727055622816,18430174337647298884]}}],"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":345,"byte_end":2333,"line_start":10,"line_end":108,"column_start":1,"column_end":17}},"imports":[{"kind":"Use","ref_id":{"krate":5,"index":544},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":3307,"byte_end":3310,"line_start":35,"line_end":35,"column_start":40,"column_end":43},"alias_span":null,"name":"Cow","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":535},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":3355,"byte_end":3362,"line_start":36,"line_end":36,"column_start":44,"column_end":51},"alias_span":null,"name":"ToOwned","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":196},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":3401,"byte_end":3404,"line_start":37,"line_end":37,"column_start":38,"column_end":41},"alias_span":null,"name":"Box","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":7293},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":3448,"byte_end":3454,"line_start":38,"line_end":38,"column_start":43,"column_end":49},"alias_span":null,"name":"String","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":5164},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":3482,"byte_end":3488,"line_start":39,"line_end":39,"column_start":27,"column_end":33},"alias_span":null,"name":"string","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":5691},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":3525,"byte_end":3528,"line_start":40,"line_end":40,"column_start":36,"column_end":39},"alias_span":null,"name":"Arc","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":4400},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":3560,"byte_end":3562,"line_start":41,"line_end":41,"column_start":31,"column_end":33},"alias_span":null,"name":"Rc","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":6780},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":3597,"byte_end":3600,"line_start":42,"line_end":42,"column_start":34,"column_end":37},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":6003},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":3625,"byte_end":3628,"line_start":43,"line_end":43,"column_start":24,"column_end":27},"alias_span":null,"name":"vec","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":5},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":3625,"byte_end":3628,"line_start":43,"line_end":43,"column_start":24,"column_end":27},"alias_span":null,"name":"vec","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":3818},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":3682,"byte_end":3690,"line_start":44,"line_end":44,"column_start":53,"column_end":61},"alias_span":null,"name":"VecDeque","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":3419},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":3745,"byte_end":3754,"line_start":45,"line_end":45,"column_start":54,"column_end":63},"alias_span":null,"name":"vec_deque","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":669},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":3812,"byte_end":3822,"line_start":46,"line_end":46,"column_start":57,"column_end":67},"alias_span":null,"name":"BinaryHeap","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":613},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":3881,"byte_end":3892,"line_start":47,"line_end":47,"column_start":58,"column_end":69},"alias_span":null,"name":"binary_heap","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":3087},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":3950,"byte_end":3960,"line_start":48,"line_end":48,"column_start":57,"column_end":67},"alias_span":null,"name":"LinkedList","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":3051},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":4019,"byte_end":4030,"line_start":49,"line_end":49,"column_start":58,"column_end":69},"alias_span":null,"name":"linked_list","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":7151},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":4086,"byte_end":4094,"line_start":50,"line_end":50,"column_start":55,"column_end":63},"alias_span":null,"name":"BTreeSet","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":1220},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":4150,"byte_end":4158,"line_start":51,"line_end":51,"column_start":55,"column_end":63},"alias_span":null,"name":"BTreeMap","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":4014},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":4215,"byte_end":4224,"line_start":52,"line_end":52,"column_start":56,"column_end":65},"alias_span":null,"name":"btree_map","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":4016},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":4281,"byte_end":4290,"line_start":53,"line_end":53,"column_start":56,"column_end":65},"alias_span":null,"name":"btree_set","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":4,"index":1092},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":4384,"byte_end":4391,"line_start":58,"line_end":58,"column_start":48,"column_end":55},"alias_span":null,"name":"HashMap","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":4,"index":1802},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":4440,"byte_end":4447,"line_start":59,"line_end":59,"column_start":48,"column_end":55},"alias_span":null,"name":"HashSet","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":4,"index":2127},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":4582,"byte_end":4590,"line_start":65,"line_end":65,"column_start":29,"column_end":37},"alias_span":null,"name":"hash_map","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":4,"index":2129},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":4723,"byte_end":4731,"line_start":69,"line_end":69,"column_start":29,"column_end":37},"alias_span":null,"name":"hash_set","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":5,"index":4050},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":4774,"byte_end":4777,"line_start":72,"line_end":72,"column_start":23,"column_end":26},"alias_span":null,"name":"fmt","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":1,"index":3983},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":4814,"byte_end":4818,"line_start":73,"line_end":73,"column_start":36,"column_end":40},"alias_span":null,"name":"Cell","value":"","parent":{"krate":0,"index":4}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":65171,"byte_end":65172,"line_start":45,"line_end":45,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"StrategyFor, arbitrary, arbitrary_with, any_with, any, Arbitrary","parent":{"krate":0,"index":45}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/mod.rs","byte_start":291366,"byte_end":291367,"line_start":24,"line_end":24,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Filter","parent":{"krate":0,"index":1219}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/mod.rs","byte_start":291395,"byte_end":291396,"line_start":25,"line_end":25,"column_start":27,"column_end":28},"alias_span":null,"name":"*","value":"FilterMap","parent":{"krate":0,"index":1219}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/mod.rs","byte_start":291421,"byte_end":291422,"line_start":26,"line_end":26,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"IndFlatten, Flatten, IndFlattenMap","parent":{"krate":0,"index":1219}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/mod.rs","byte_start":291444,"byte_end":291445,"line_start":27,"line_end":27,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1219}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/mod.rs","byte_start":291467,"byte_end":291468,"line_start":28,"line_end":28,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"LazyJustFn, Just, LazyJust","parent":{"krate":0,"index":1219}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/mod.rs","byte_start":291490,"byte_end":291491,"line_start":29,"line_end":29,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"LazyValueTree","parent":{"krate":0,"index":1219}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/mod.rs","byte_start":291513,"byte_end":291514,"line_start":30,"line_end":30,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1219}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/mod.rs","byte_start":291535,"byte_end":291536,"line_start":31,"line_end":31,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"Map, Perturb, MapInto","parent":{"krate":0,"index":1219}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/mod.rs","byte_start":291563,"byte_end":291564,"line_start":32,"line_end":32,"column_start":26,"column_end":27},"alias_span":null,"name":"*","value":"Recursive","parent":{"krate":0,"index":1219}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/mod.rs","byte_start":291589,"byte_end":291590,"line_start":33,"line_end":33,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"Shuffle, Shuffleable","parent":{"krate":0,"index":1219}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/mod.rs","byte_start":291614,"byte_end":291615,"line_start":34,"line_end":34,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"BoxedStrategy, ValueTree, Strategy, NewTree, SBoxedStrategy","parent":{"krate":0,"index":1219}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/mod.rs","byte_start":291639,"byte_end":291640,"line_start":35,"line_end":35,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"TupleUnion, TupleUnionValueTree, Union, WA, float_to_weight","parent":{"krate":0,"index":1219}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/mod.rs","byte_start":421495,"byte_end":421496,"line_start":25,"line_end":25,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Config","parent":{"krate":0,"index":2020}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/mod.rs","byte_start":421520,"byte_end":421521,"line_start":26,"line_end":26,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"TestCaseError, TestCaseResult","parent":{"krate":0,"index":2020}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/mod.rs","byte_start":421558,"byte_end":421559,"line_start":27,"line_end":27,"column_start":36,"column_end":37},"alias_span":null,"name":"*","value":"FileFailurePersistence, FailurePersistence","parent":{"krate":0,"index":2020}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/mod.rs","byte_start":421583,"byte_end":421584,"line_start":28,"line_end":28,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Reason","parent":{"krate":0,"index":2020}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/mod.rs","byte_start":421614,"byte_end":421615,"line_start":29,"line_end":29,"column_start":29,"column_end":30},"alias_span":null,"name":"*","value":"ResultCache","parent":{"krate":0,"index":2020}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/mod.rs","byte_start":421636,"byte_end":421637,"line_start":30,"line_end":30,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"TestRng, Seed","parent":{"krate":0,"index":2020}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/mod.rs","byte_start":421661,"byte_end":421662,"line_start":31,"line_end":31,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"TestRunner","parent":{"krate":0,"index":2020}},{"kind":"Use","ref_id":{"krate":0,"index":2743},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":568484,"byte_end":568488,"line_start":39,"line_end":39,"column_start":25,"column_end":29},"alias_span":null,"name":"prob","value":"","parent":{"krate":0,"index":2794}},{"kind":"Use","ref_id":{"krate":0,"index":9044},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":568490,"byte_end":568501,"line_start":39,"line_end":39,"column_start":31,"column_end":42},"alias_span":null,"name":"Probability","value":"","parent":{"krate":0,"index":2794}},{"kind":"Use","ref_id":{"krate":0,"index":1076},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578152,"byte_end":578162,"line_start":30,"line_end":30,"column_start":29,"column_end":39},"alias_span":null,"name":"size_range","value":"","parent":{"krate":0,"index":2901}},{"kind":"Use","ref_id":{"krate":0,"index":6274},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578164,"byte_end":578173,"line_start":30,"line_end":30,"column_start":41,"column_end":50},"alias_span":null,"name":"SizeRange","value":"","parent":{"krate":0,"index":2901}},{"kind":"Use","ref_id":{"krate":0,"index":9281},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":596237,"byte_end":596242,"line_start":83,"line_end":83,"column_start":32,"column_end":37},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":3001}},{"kind":"Use","ref_id":{"krate":0,"index":72},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611184,"byte_end":611187,"line_start":23,"line_end":23,"column_start":28,"column_end":31},"alias_span":null,"name":"any","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":0,"index":74},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611189,"byte_end":611197,"line_start":23,"line_end":23,"column_start":33,"column_end":41},"alias_span":null,"name":"any_with","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":0,"index":63},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611199,"byte_end":611208,"line_start":23,"line_end":23,"column_start":43,"column_end":52},"alias_span":null,"name":"Arbitrary","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":0,"index":8007},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611237,"byte_end":611250,"line_start":24,"line_end":24,"column_start":27,"column_end":40},"alias_span":null,"name":"BoxedStrategy","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":0,"index":7751},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611252,"byte_end":611256,"line_start":24,"line_end":24,"column_start":42,"column_end":46},"alias_span":null,"name":"Just","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":0,"index":7752},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611252,"byte_end":611256,"line_start":24,"line_end":24,"column_start":42,"column_end":46},"alias_span":null,"name":"Just","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":0,"index":8014},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611258,"byte_end":611272,"line_start":24,"line_end":24,"column_start":48,"column_end":62},"alias_span":null,"name":"SBoxedStrategy","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":0,"index":1768},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611274,"byte_end":611282,"line_start":24,"line_end":24,"column_start":64,"column_end":72},"alias_span":null,"name":"Strategy","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":0,"index":8471},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611313,"byte_end":611319,"line_start":25,"line_end":25,"column_start":29,"column_end":35},"alias_span":null,"name":"ProptestConfig","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":0,"index":8495},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611367,"byte_end":611380,"line_start":26,"line_end":26,"column_start":29,"column_end":42},"alias_span":null,"name":"TestCaseError","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":0,"index":36},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611403,"byte_end":611414,"line_start":28,"line_end":28,"column_start":5,"column_end":16},"alias_span":null,"name":"prop_assert","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":0,"index":37},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611416,"byte_end":611430,"line_start":28,"line_end":28,"column_start":18,"column_end":32},"alias_span":null,"name":"prop_assert_eq","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":0,"index":38},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611432,"byte_end":611446,"line_start":28,"line_end":28,"column_start":34,"column_end":48},"alias_span":null,"name":"prop_assert_ne","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":0,"index":33},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611448,"byte_end":611459,"line_start":28,"line_end":28,"column_start":50,"column_end":61},"alias_span":null,"name":"prop_assume","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":0,"index":35},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611461,"byte_end":611473,"line_start":28,"line_end":28,"column_start":63,"column_end":75},"alias_span":null,"name":"prop_compose","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":0,"index":34},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611479,"byte_end":611489,"line_start":29,"line_end":29,"column_start":5,"column_end":15},"alias_span":null,"name":"prop_oneof","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":0,"index":32},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611491,"byte_end":611499,"line_start":29,"line_end":29,"column_start":17,"column_end":25},"alias_span":null,"name":"proptest","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":30,"index":606},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611520,"byte_end":611523,"line_start":32,"line_end":32,"column_start":16,"column_end":19},"alias_span":null,"name":"Rng","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":31,"index":188},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611525,"byte_end":611532,"line_start":32,"line_end":32,"column_start":21,"column_end":28},"alias_span":null,"name":"RngCore","value":"","parent":{"krate":0,"index":3133}},{"kind":"Use","ref_id":{"krate":0,"index":45},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611787,"byte_end":611796,"line_start":38,"line_end":38,"column_start":20,"column_end":29},"alias_span":null,"name":"arbitrary","value":"","parent":{"krate":0,"index":3192}},{"kind":"Use","ref_id":{"krate":0,"index":814},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611817,"byte_end":611822,"line_start":39,"line_end":39,"column_start":20,"column_end":25},"alias_span":null,"name":"array","value":"","parent":{"krate":0,"index":3192}},{"kind":"Use","ref_id":{"krate":0,"index":825},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611843,"byte_end":611847,"line_start":40,"line_end":40,"column_start":20,"column_end":24},"alias_span":null,"name":"bits","value":"","parent":{"krate":0,"index":3192}},{"kind":"Use","ref_id":{"krate":0,"index":938},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611868,"byte_end":611872,"line_start":41,"line_end":41,"column_start":20,"column_end":24},"alias_span":null,"name":"bool","value":"","parent":{"krate":0,"index":3192}},{"kind":"Use","ref_id":{"krate":0,"index":961},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611893,"byte_end":611897,"line_start":42,"line_end":42,"column_start":20,"column_end":24},"alias_span":null,"name":"char","value":"","parent":{"krate":0,"index":3192}},{"kind":"Use","ref_id":{"krate":0,"index":1006},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611918,"byte_end":611928,"line_start":43,"line_end":43,"column_start":20,"column_end":30},"alias_span":null,"name":"collection","value":"","parent":{"krate":0,"index":3192}},{"kind":"Use","ref_id":{"krate":0,"index":1168},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611949,"byte_end":611952,"line_start":44,"line_end":44,"column_start":20,"column_end":23},"alias_span":null,"name":"num","value":"","parent":{"krate":0,"index":3192}},{"kind":"Use","ref_id":{"krate":0,"index":2731},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611973,"byte_end":611979,"line_start":45,"line_end":45,"column_start":20,"column_end":26},"alias_span":null,"name":"option","value":"","parent":{"krate":0,"index":3192}},{"kind":"Use","ref_id":{"krate":0,"index":2794},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":612000,"byte_end":612006,"line_start":46,"line_end":46,"column_start":20,"column_end":26},"alias_span":null,"name":"result","value":"","parent":{"krate":0,"index":3192}},{"kind":"Use","ref_id":{"krate":0,"index":2901},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":612027,"byte_end":612033,"line_start":47,"line_end":47,"column_start":20,"column_end":26},"alias_span":null,"name":"sample","value":"","parent":{"krate":0,"index":3192}},{"kind":"Use","ref_id":{"krate":0,"index":1219},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":612054,"byte_end":612062,"line_start":48,"line_end":48,"column_start":20,"column_end":28},"alias_span":null,"name":"strategy","value":"","parent":{"krate":0,"index":3192}},{"kind":"Use","ref_id":{"krate":0,"index":3001},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":612111,"byte_end":612117,"line_start":50,"line_end":50,"column_start":20,"column_end":26},"alias_span":null,"name":"string","value":"","parent":{"krate":0,"index":3192}},{"kind":"Use","ref_id":{"krate":0,"index":2020},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":612138,"byte_end":612149,"line_start":51,"line_end":51,"column_start":20,"column_end":31},"alias_span":null,"name":"test_runner","value":"","parent":{"krate":0,"index":3192}},{"kind":"Use","ref_id":{"krate":0,"index":2724},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":612170,"byte_end":612175,"line_start":52,"line_end":52,"column_start":20,"column_end":25},"alias_span":null,"name":"tuple","value":"","parent":{"krate":0,"index":3192}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":345,"byte_end":2333,"line_start":10,"line_end":108,"column_start":1,"column_end":17},"name":"","qualname":"::","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":28},{"krate":0,"index":45},{"krate":0,"index":814},{"krate":0,"index":825},{"krate":0,"index":938},{"krate":0,"index":961},{"krate":0,"index":1006},{"krate":0,"index":1168},{"krate":0,"index":1219},{"krate":0,"index":2020},{"krate":0,"index":2724},{"krate":0,"index":2731},{"krate":0,"index":2794},{"krate":0,"index":2901},{"krate":0,"index":3001},{"krate":0,"index":3133}],"decl_id":null,"docs":" # Proptest Reference Documentation","sig":null,"attributes":[{"value":"/ # Proptest Reference Documentation","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":345,"byte_end":383,"line_start":10,"line_end":10,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":384,"byte_end":387,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This is the reference documentation for the proptest API.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":388,"byte_end":449,"line_start":12,"line_end":12,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":450,"byte_end":453,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ For documentation on how to get started with proptest and general usage","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":454,"byte_end":529,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ advice, please refer to the [Proptest Book](https://altsysrq.github.io/proptest-book/intro.html).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":530,"byte_end":631,"line_start":15,"line_end":15,"column_start":1,"column_end":102}},{"value":"forbid(future_incompatible)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":633,"byte_end":664,"line_start":17,"line_end":17,"column_start":1,"column_end":32}},{"value":"deny(missing_docs, bare_trait_objects)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":665,"byte_end":707,"line_start":18,"line_end":18,"column_start":1,"column_end":43}},{"value":"no_std","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":708,"byte_end":718,"line_start":19,"line_end":19,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"std_facade","qualname":"::std_facade","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","parent":null,"children":[{"krate":0,"index":3235},{"krate":0,"index":3238},{"krate":0,"index":3241},{"krate":0,"index":3244},{"krate":0,"index":3247},{"krate":0,"index":3250},{"krate":0,"index":3253},{"krate":0,"index":3256},{"krate":0,"index":3259},{"krate":0,"index":3260},{"krate":0,"index":3262},{"krate":0,"index":3265},{"krate":0,"index":3268},{"krate":0,"index":3271},{"krate":0,"index":3274},{"krate":0,"index":3277},{"krate":0,"index":3280},{"krate":0,"index":3283},{"krate":0,"index":3286},{"krate":0,"index":3289},{"krate":0,"index":3292},{"krate":0,"index":3295},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":3298},{"krate":0,"index":3301}],"decl_id":null,"docs":" This module provides #[cfg(..)]ed type aliases over features.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":1284,"byte_end":1296,"line_start":42,"line_end":42,"column_start":1,"column_end":13}},{"value":"/ This module provides #[cfg(..)]ed type aliases over features.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/std_facade.rs","byte_start":2691,"byte_end":2756,"line_start":10,"line_end":10,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":28},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sugar.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sugar","qualname":"::sugar","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sugar.rs","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":3304},{"krate":0,"index":3310},{"krate":0,"index":3314},{"krate":0,"index":40},{"krate":0,"index":3317},{"krate":0,"index":3322},{"krate":0,"index":3327},{"krate":0,"index":3334},{"krate":0,"index":3342},{"krate":0,"index":3351},{"krate":0,"index":3362},{"krate":0,"index":3373},{"krate":0,"index":3387},{"krate":0,"index":3400},{"krate":0,"index":3417},{"krate":0,"index":3432},{"krate":0,"index":3452},{"krate":0,"index":3469},{"krate":0,"index":3492},{"krate":0,"index":3511},{"krate":0,"index":3537},{"krate":0,"index":3558},{"krate":0,"index":3587},{"krate":0,"index":3610},{"krate":0,"index":44}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":2035,"byte_end":2047,"line_start":88,"line_end":88,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":3304},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sugar.rs","byte_start":46629,"byte_end":46643,"line_start":1056,"line_end":1056,"column_start":12,"column_end":26},"name":"NamedArguments","qualname":"::sugar::NamedArguments","value":"","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3308},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sugar.rs","byte_start":46665,"byte_end":46670,"line_start":1056,"line_end":1056,"column_start":48,"column_end":53},"name":"0","qualname":"::sugar::NamedArguments::0","value":"N","parent":{"krate":0,"index":3304},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3309},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sugar.rs","byte_start":46687,"byte_end":46692,"line_start":1056,"line_end":1056,"column_start":70,"column_end":75},"name":"1","qualname":"::sugar::NamedArguments::1","value":"V","parent":{"krate":0,"index":3304},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":44},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sugar.rs","byte_start":49201,"byte_end":49214,"line_start":1126,"line_end":1126,"column_start":8,"column_end":21},"name":"force_no_fork","qualname":"::sugar::force_no_fork","value":"pub fn force_no_fork(&mut crate::test_runner::Config)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sugar.rs","byte_start":49155,"byte_end":49178,"line_start":1124,"line_end":1124,"column_start":1,"column_end":24}}]},{"kind":"Mod","id":{"krate":0,"index":45},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"arbitrary","qualname":"::arbitrary","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","parent":null,"children":[{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":83},{"krate":0,"index":112},{"krate":0,"index":117},{"krate":0,"index":129},{"krate":0,"index":180},{"krate":0,"index":205},{"krate":0,"index":214},{"krate":0,"index":372},{"krate":0,"index":605},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":808},{"krate":0,"index":811}],"decl_id":null,"docs":" Defines the `Arbitrary` trait and related free functions\n and type aliases.","sig":null,"attributes":[{"value":"/ Defines the `Arbitrary` trait and related free functions","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":64481,"byte_end":64541,"line_start":10,"line_end":10,"column_start":1,"column_end":61}},{"value":"/ and type aliases.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":64542,"byte_end":64563,"line_start":11,"line_end":11,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":64564,"byte_end":64567,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ See the [`Arbitrary`] trait for more information.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":64568,"byte_end":64621,"line_start":13,"line_end":13,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":64622,"byte_end":64625,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`Arbitrary`]: trait.Arbitrary.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":64626,"byte_end":64665,"line_start":15,"line_end":15,"column_start":1,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":63},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68044,"byte_end":68053,"line_start":45,"line_end":45,"column_start":11,"column_end":20},"name":"Arbitrary","qualname":"::arbitrary::traits::Arbitrary","value":"Arbitrary: Sized + fmt::Debug","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67}],"decl_id":null,"docs":" Arbitrary determines a canonical [`Strategy`] for the implementing type.","sig":null,"attributes":[{"value":"/ Arbitrary determines a canonical [`Strategy`] for the implementing type.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":66556,"byte_end":66632,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":66633,"byte_end":66636,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ It provides the method `arbitrary_with` which generates a `Strategy` for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":66637,"byte_end":66713,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"/ producing arbitrary values of the implementing type *(`Self`)*. In general,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":66714,"byte_end":66793,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ these strategies will produce the entire set of values possible for the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":66794,"byte_end":66869,"line_start":22,"line_end":22,"column_start":1,"column_end":76}},{"value":"/ type, up to some size limitation or constraints set by their parameters.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":66870,"byte_end":66946,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ When this is not desired, strategies to produce the desired values can be","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":66947,"byte_end":67024,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ built by combining [`Strategy`]s as described in the crate documentation.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67025,"byte_end":67102,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67103,"byte_end":67106,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ This trait analogous to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67107,"byte_end":67134,"line_start":27,"line_end":27,"column_start":1,"column_end":28}},{"value":"/ [Haskell QuickCheck's implementation of `Arbitrary`][HaskellQC].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67135,"byte_end":67203,"line_start":28,"line_end":28,"column_start":1,"column_end":69}},{"value":"/ In this interpretation of `Arbitrary`, `Strategy` is the equivalent of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67204,"byte_end":67278,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"/ the `Gen` monad. Unlike in QuickCheck, `Arbitrary` is not a core component;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67279,"byte_end":67358,"line_start":30,"line_end":30,"column_start":1,"column_end":80}},{"value":"/ types do not need to implement `Arbitrary` unless one wants to use","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67359,"byte_end":67429,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ [`any`](fn.any.html) or other free functions in this module.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67430,"byte_end":67494,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67495,"byte_end":67498,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ `Arbitrary` currently only works for types which represent owned data as","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67499,"byte_end":67575,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ opposed to borrowed data. This is a fundamental restriction of `proptest`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67576,"byte_end":67653,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ which may be lifted in the future as the [generic associated types (GAT)]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67654,"byte_end":67731,"line_start":36,"line_end":36,"column_start":1,"column_end":78}},{"value":"/ feature of Rust is implemented and stabilized.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67732,"byte_end":67782,"line_start":37,"line_end":37,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67783,"byte_end":67786,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ [generic associated types (GAT)]: https://github.com/rust-lang/rust/issues/44265","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67787,"byte_end":67871,"line_start":39,"line_end":39,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67872,"byte_end":67875,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67876,"byte_end":67925,"line_start":41,"line_end":41,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67926,"byte_end":67929,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ [HaskellQC]:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67930,"byte_end":67946,"line_start":43,"line_end":43,"column_start":1,"column_end":17}},{"value":"/ https://hackage.haskell.org/package/QuickCheck/docs/Test-QuickCheck-Arbitrary.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":67947,"byte_end":68033,"line_start":44,"line_end":44,"column_start":1,"column_end":87}}]},{"kind":"Type","id":{"krate":0,"index":64},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68485,"byte_end":68495,"line_start":54,"line_end":54,"column_start":10,"column_end":20},"name":"Parameters","qualname":"::arbitrary::traits::Arbitrary::Parameters","value":"type Parameters: Default;","parent":{"krate":0,"index":63},"children":[],"decl_id":null,"docs":" The type of parameters that [`arbitrary_with`] accepts for configuration\n of the generated [`Strategy`]. Parameters must implement [`Default`].","sig":null,"attributes":[{"value":"/ The type of parameters that [`arbitrary_with`] accepts for configuration","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68080,"byte_end":68156,"line_start":46,"line_end":46,"column_start":5,"column_end":81}},{"value":"/ of the generated [`Strategy`]. Parameters must implement [`Default`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68161,"byte_end":68234,"line_start":47,"line_end":47,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68239,"byte_end":68242,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ [`arbitrary_with`]: trait.Arbitrary.html#tymethod.arbitrary_with","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68247,"byte_end":68315,"line_start":49,"line_end":49,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68320,"byte_end":68323,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68328,"byte_end":68377,"line_start":51,"line_end":51,"column_start":5,"column_end":54}},{"value":"/ [`Default`]:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68382,"byte_end":68398,"line_start":52,"line_end":52,"column_start":5,"column_end":21}},{"value":"/     https://doc.rust-lang.org/nightly/std/default/trait.Default.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68403,"byte_end":68475,"line_start":53,"line_end":53,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69112,"byte_end":69121,"line_start":69,"line_end":69,"column_start":8,"column_end":17},"name":"arbitrary","qualname":"::arbitrary::traits::Arbitrary::arbitrary","value":"pub fn arbitrary() -> Self::Strategy","parent":{"krate":0,"index":63},"children":[],"decl_id":null,"docs":" Generates a [`Strategy`] for producing arbitrary values\n of type the implementing type (`Self`).","sig":null,"attributes":[{"value":"/ Generates a [`Strategy`] for producing arbitrary values","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68511,"byte_end":68570,"line_start":56,"line_end":56,"column_start":5,"column_end":64}},{"value":"/ of type the implementing type (`Self`).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68575,"byte_end":68618,"line_start":57,"line_end":57,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68623,"byte_end":68626,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Calling this for the type `X` is the equivalent of using","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68631,"byte_end":68691,"line_start":59,"line_end":59,"column_start":5,"column_end":65}},{"value":"/ [`X::arbitrary_with(Default::default())`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68696,"byte_end":68742,"line_start":60,"line_end":60,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68747,"byte_end":68750,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ This method is defined in the trait for optimization for the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68755,"byte_end":68819,"line_start":62,"line_end":62,"column_start":5,"column_end":69}},{"value":"/ default if you want to do that. It is a logic error to not","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68824,"byte_end":68886,"line_start":63,"line_end":63,"column_start":5,"column_end":67}},{"value":"/ preserve the semantics when overriding.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68891,"byte_end":68934,"line_start":64,"line_end":64,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68939,"byte_end":68942,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68947,"byte_end":68996,"line_start":66,"line_end":66,"column_start":5,"column_end":54}},{"value":"/ [`X::arbitrary_with(Default::default())`]:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69001,"byte_end":69047,"line_start":67,"line_end":67,"column_start":5,"column_end":51}},{"value":"/     trait.Arbitrary.html#tymethod.arbitrary_with","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69052,"byte_end":69104,"line_start":68,"line_end":68,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69717,"byte_end":69731,"line_start":86,"line_end":86,"column_start":8,"column_end":22},"name":"arbitrary_with","qualname":"::arbitrary::traits::Arbitrary::arbitrary_with","value":"pub fn arbitrary_with(Self::Parameters) -> Self::Strategy","parent":{"krate":0,"index":63},"children":[],"decl_id":null,"docs":" Generates a [`Strategy`] for producing arbitrary values of type the\n implementing type (`Self`). The strategy is passed the arguments given\n in args.","sig":null,"attributes":[{"value":"/ Generates a [`Strategy`] for producing arbitrary values of type the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69204,"byte_end":69275,"line_start":73,"line_end":73,"column_start":5,"column_end":76}},{"value":"/ implementing type (`Self`). The strategy is passed the arguments given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69280,"byte_end":69354,"line_start":74,"line_end":74,"column_start":5,"column_end":79}},{"value":"/ in args.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69359,"byte_end":69371,"line_start":75,"line_end":75,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69376,"byte_end":69379,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ If you wish to use the [`default()`] arguments,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69384,"byte_end":69435,"line_start":77,"line_end":77,"column_start":5,"column_end":56}},{"value":"/ use [`arbitrary`] instead.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69440,"byte_end":69470,"line_start":78,"line_end":78,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69475,"byte_end":69478,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69483,"byte_end":69532,"line_start":80,"line_end":80,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69537,"byte_end":69540,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ [`arbitrary`]: trait.Arbitrary.html#method.arbitrary","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69545,"byte_end":69601,"line_start":82,"line_end":82,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69606,"byte_end":69609,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ [`default()`]:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69614,"byte_end":69632,"line_start":84,"line_end":84,"column_start":5,"column_end":23}},{"value":"/     https://doc.rust-lang.org/nightly/std/default/trait.Default.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69637,"byte_end":69709,"line_start":85,"line_end":85,"column_start":5,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":67},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69920,"byte_end":69928,"line_start":91,"line_end":91,"column_start":10,"column_end":18},"name":"Strategy","qualname":"::arbitrary::traits::Arbitrary::Strategy","value":"type Strategy: Strategy<Value = Self>;","parent":{"krate":0,"index":63},"children":[],"decl_id":null,"docs":" The type of [`Strategy`] used to generate values of type `Self`.","sig":null,"attributes":[{"value":"/ The type of [`Strategy`] used to generate values of type `Self`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69780,"byte_end":69848,"line_start":88,"line_end":88,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69853,"byte_end":69856,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":69861,"byte_end":69910,"line_start":90,"line_end":90,"column_start":5,"column_end":54}}]},{"kind":"Type","id":{"krate":0,"index":68},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":70669,"byte_end":70680,"line_start":107,"line_end":107,"column_start":10,"column_end":21},"name":"StrategyFor","qualname":"::arbitrary::traits::StrategyFor","value":"<A as Arbitrary>::Strategy","parent":null,"children":[],"decl_id":null,"docs":" `StrategyFor` allows you to mention the type of [`Strategy`] for the input\n type `A` without directly using associated types or without resorting to\n existential types. This way, if implementation of [`Arbitrary`] changes,\n your tests should not break. This can be especially beneficial when the\n type of `Strategy` that you are dealing with is very long in name\n (the case with generics).","sig":null,"attributes":[{"value":"/ `StrategyFor` allows you to mention the type of [`Strategy`] for the input","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":70157,"byte_end":70235,"line_start":98,"line_end":98,"column_start":1,"column_end":79}},{"value":"/ type `A` without directly using associated types or without resorting to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":70236,"byte_end":70312,"line_start":99,"line_end":99,"column_start":1,"column_end":77}},{"value":"/ existential types. This way, if implementation of [`Arbitrary`] changes,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":70313,"byte_end":70389,"line_start":100,"line_end":100,"column_start":1,"column_end":77}},{"value":"/ your tests should not break. This can be especially beneficial when the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":70390,"byte_end":70465,"line_start":101,"line_end":101,"column_start":1,"column_end":76}},{"value":"/ type of `Strategy` that you are dealing with is very long in name","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":70466,"byte_end":70535,"line_start":102,"line_end":102,"column_start":1,"column_end":70}},{"value":"/ (the case with generics).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":70536,"byte_end":70565,"line_start":103,"line_end":103,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":70566,"byte_end":70569,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ [`Arbitrary`]: trait.Arbitrary.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":70570,"byte_end":70609,"line_start":105,"line_end":105,"column_start":1,"column_end":40}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":70610,"byte_end":70659,"line_start":106,"line_end":106,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":70},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":71151,"byte_end":71160,"line_start":117,"line_end":117,"column_start":10,"column_end":19},"name":"ParamsFor","qualname":"::arbitrary::traits::ParamsFor","value":"<A as Arbitrary>::Parameters","parent":null,"children":[],"decl_id":null,"docs":" `ParamsFor` allows you to mention the type of [`Parameters`] for the input\n type `A` without directly using associated types or without resorting to\n existential types. This way, if implementation of [`Arbitrary`] changes,\n your tests should not break.","sig":null,"attributes":[{"value":"/ `ParamsFor` allows you to mention the type of [`Parameters`] for the input","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":70715,"byte_end":70793,"line_start":109,"line_end":109,"column_start":1,"column_end":79}},{"value":"/ type `A` without directly using associated types or without resorting to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":70794,"byte_end":70870,"line_start":110,"line_end":110,"column_start":1,"column_end":77}},{"value":"/ existential types. This way, if implementation of [`Arbitrary`] changes,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":70871,"byte_end":70947,"line_start":111,"line_end":111,"column_start":1,"column_end":77}},{"value":"/ your tests should not break.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":70948,"byte_end":70980,"line_start":112,"line_end":112,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":70981,"byte_end":70984,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ [`Parameters`]: trait.Arbitrary.html#associatedtype.Parameters","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":70985,"byte_end":71051,"line_start":114,"line_end":114,"column_start":1,"column_end":67}},{"value":"/ [`Arbitrary`]: trait.Arbitrary.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":71052,"byte_end":71091,"line_start":115,"line_end":115,"column_start":1,"column_end":40}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":71092,"byte_end":71141,"line_start":116,"line_end":116,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72655,"byte_end":72658,"line_start":159,"line_end":159,"column_start":8,"column_end":11},"name":"any","qualname":"::arbitrary::traits::any","value":"pub fn any<A: Arbitrary>() -> StrategyFor<A>","parent":null,"children":[],"decl_id":null,"docs":" Generates a [`Strategy`] producing [`Arbitrary`][trait Arbitrary] values of\n `A`. Unlike [`arbitrary`][fn arbitrary], it should be used for being\n explicit on what `A` is. For clarity, this may be a good idea.","sig":null,"attributes":[{"value":"/ Generates a [`Strategy`] producing [`Arbitrary`][trait Arbitrary] values of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":71401,"byte_end":71480,"line_start":123,"line_end":123,"column_start":1,"column_end":80}},{"value":"/ `A`. Unlike [`arbitrary`][fn arbitrary], it should be used for being","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":71481,"byte_end":71553,"line_start":124,"line_end":124,"column_start":1,"column_end":73}},{"value":"/ explicit on what `A` is. For clarity, this may be a good idea.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":71554,"byte_end":71620,"line_start":125,"line_end":125,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":71621,"byte_end":71624,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ Use this version instead of [`arbitrary`][fn arbitrary] if you want to be","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":71625,"byte_end":71702,"line_start":127,"line_end":127,"column_start":1,"column_end":78}},{"value":"/ clear which type you want to generate a `Strategy` for, or if you don't","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":71703,"byte_end":71778,"line_start":128,"line_end":128,"column_start":1,"column_end":76}},{"value":"/ have an anchoring type for type inference to work with.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":71779,"byte_end":71838,"line_start":129,"line_end":129,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":71839,"byte_end":71842,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ If you want to customize how the strategy is generated, use","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":71843,"byte_end":71906,"line_start":131,"line_end":131,"column_start":1,"column_end":64}},{"value":"/ [`any_with::<A>(args)`] where `args` are any arguments accepted by","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":71907,"byte_end":71977,"line_start":132,"line_end":132,"column_start":1,"column_end":71}},{"value":"/ the `Arbitrary` impl in question.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":71978,"byte_end":72015,"line_start":133,"line_end":133,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72016,"byte_end":72019,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72020,"byte_end":72033,"line_start":135,"line_end":135,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72034,"byte_end":72037,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ The function can be used as:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72038,"byte_end":72070,"line_start":137,"line_end":137,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72071,"byte_end":72074,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72075,"byte_end":72086,"line_start":139,"line_end":139,"column_start":1,"column_end":12}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72087,"byte_end":72116,"line_start":140,"line_end":140,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72117,"byte_end":72120,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ proptest! {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72121,"byte_end":72136,"line_start":142,"line_end":142,"column_start":1,"column_end":16}},{"value":"/     fn reverse_reverse_is_identity(ref vec in any::<Vec<u32>>()) {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72137,"byte_end":72207,"line_start":143,"line_end":143,"column_start":1,"column_end":71}},{"value":"/         let vec2 = vec.iter().cloned().rev().rev().collect::<Vec<u32>>();","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72208,"byte_end":72285,"line_start":144,"line_end":144,"column_start":1,"column_end":78}},{"value":"/         prop_assert_eq!(vec, &vec2);","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72286,"byte_end":72326,"line_start":145,"line_end":145,"column_start":1,"column_end":41}},{"value":"/     }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72327,"byte_end":72336,"line_start":146,"line_end":146,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72337,"byte_end":72342,"line_start":147,"line_end":147,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72343,"byte_end":72346,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72347,"byte_end":72362,"line_start":149,"line_end":149,"column_start":1,"column_end":16}},{"value":"/     reverse_reverse_is_identity();","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72363,"byte_end":72401,"line_start":150,"line_end":150,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72402,"byte_end":72407,"line_start":151,"line_end":151,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72408,"byte_end":72415,"line_start":152,"line_end":152,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72416,"byte_end":72419,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ [`any_with::<A>(args)`]: fn.any_with.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72420,"byte_end":72465,"line_start":154,"line_end":154,"column_start":1,"column_end":46}},{"value":"/ [fn arbitrary]: fn.arbitrary.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72466,"byte_end":72503,"line_start":155,"line_end":155,"column_start":1,"column_end":38}},{"value":"/ [trait Arbitrary]: trait.Arbitrary.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72504,"byte_end":72547,"line_start":156,"line_end":156,"column_start":1,"column_end":44}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72548,"byte_end":72597,"line_start":157,"line_end":157,"column_start":1,"column_end":50}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72598,"byte_end":72647,"line_start":158,"line_end":158,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":74},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74100,"byte_end":74108,"line_start":203,"line_end":203,"column_start":8,"column_end":16},"name":"any_with","qualname":"::arbitrary::traits::any_with","value":"pub fn any_with<A: Arbitrary>(ParamsFor<A>) -> StrategyFor<A>","parent":null,"children":[],"decl_id":null,"docs":" Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the\n given configuration arguments passed in `args`. Unlike [`arbitrary_with`],\n it should be used for being explicit on what `A` is.\n For clarity, this may be a good idea.","sig":null,"attributes":[{"value":"/ Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72792,"byte_end":72867,"line_start":164,"line_end":164,"column_start":1,"column_end":76}},{"value":"/ given configuration arguments passed in `args`. Unlike [`arbitrary_with`],","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72868,"byte_end":72946,"line_start":165,"line_end":165,"column_start":1,"column_end":79}},{"value":"/ it should be used for being explicit on what `A` is.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":72947,"byte_end":73003,"line_start":166,"line_end":166,"column_start":1,"column_end":57}},{"value":"/ For clarity, this may be a good idea.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73004,"byte_end":73045,"line_start":167,"line_end":167,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73046,"byte_end":73049,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ Use this version instead of [`arbitrary_with`] if you want to be clear which","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73050,"byte_end":73130,"line_start":169,"line_end":169,"column_start":1,"column_end":81}},{"value":"/ type you want to generate a `Strategy` for, or if you don't have an anchoring","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73131,"byte_end":73212,"line_start":170,"line_end":170,"column_start":1,"column_end":82}},{"value":"/ type for type inference to work with.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73213,"byte_end":73254,"line_start":171,"line_end":171,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73255,"byte_end":73258,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ If you don't want to specify any arguments and instead use the default","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73259,"byte_end":73333,"line_start":173,"line_end":173,"column_start":1,"column_end":75}},{"value":"/ behavior, you should use [`any::<A>()`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73334,"byte_end":73378,"line_start":174,"line_end":174,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73379,"byte_end":73382,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73383,"byte_end":73396,"line_start":176,"line_end":176,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73397,"byte_end":73400,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ The function can be used as:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73401,"byte_end":73433,"line_start":178,"line_end":178,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73434,"byte_end":73437,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73438,"byte_end":73449,"line_start":180,"line_end":180,"column_start":1,"column_end":12}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73450,"byte_end":73479,"line_start":181,"line_end":181,"column_start":1,"column_end":30}},{"value":"/ use proptest::collection::size_range;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73480,"byte_end":73521,"line_start":182,"line_end":182,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73522,"byte_end":73525,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ proptest! {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73526,"byte_end":73541,"line_start":184,"line_end":184,"column_start":1,"column_end":16}},{"value":"/     fn reverse_reverse_is_identity","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73542,"byte_end":73580,"line_start":185,"line_end":185,"column_start":1,"column_end":39}},{"value":"/         (ref vec in any_with::<Vec<u32>>(size_range(1000).lift()))","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73581,"byte_end":73651,"line_start":186,"line_end":186,"column_start":1,"column_end":71}},{"value":"/     {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73652,"byte_end":73661,"line_start":187,"line_end":187,"column_start":1,"column_end":10}},{"value":"/         let vec2 = vec.iter().cloned().rev().rev().collect::<Vec<u32>>();","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73662,"byte_end":73739,"line_start":188,"line_end":188,"column_start":1,"column_end":78}},{"value":"/         prop_assert_eq!(vec, &vec2);","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73740,"byte_end":73780,"line_start":189,"line_end":189,"column_start":1,"column_end":41}},{"value":"/     }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73781,"byte_end":73790,"line_start":190,"line_end":190,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73791,"byte_end":73796,"line_start":191,"line_end":191,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73797,"byte_end":73800,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73801,"byte_end":73816,"line_start":193,"line_end":193,"column_start":1,"column_end":16}},{"value":"/     reverse_reverse_is_identity();","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73817,"byte_end":73855,"line_start":194,"line_end":194,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73856,"byte_end":73861,"line_start":195,"line_end":195,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73862,"byte_end":73869,"line_start":196,"line_end":196,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73870,"byte_end":73873,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ [`any::<A>()`]: fn.any.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73874,"byte_end":73905,"line_start":198,"line_end":198,"column_start":1,"column_end":32}},{"value":"/ [`arbitrary_with`]: fn.arbitrary_with.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73906,"byte_end":73952,"line_start":199,"line_end":199,"column_start":1,"column_end":47}},{"value":"/ [`Arbitrary`]: trait.Arbitrary.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73953,"byte_end":73992,"line_start":200,"line_end":200,"column_start":1,"column_end":40}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":73993,"byte_end":74042,"line_start":201,"line_end":201,"column_start":1,"column_end":50}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74043,"byte_end":74092,"line_start":202,"line_end":202,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75417,"byte_end":75426,"line_start":242,"line_end":242,"column_start":8,"column_end":17},"name":"arbitrary","qualname":"::arbitrary::traits::arbitrary","value":"pub fn arbitrary<A, S>() -> S where S: Strategy<Value = A>,\nA: Arbitrary<Strategy = S>","parent":null,"children":[],"decl_id":null,"docs":" Generates a [`Strategy`] producing [`Arbitrary`] values of `A`.\n Works better with type inference than [`any::<A>()`].","sig":null,"attributes":[{"value":"/ Generates a [`Strategy`] producing [`Arbitrary`] values of `A`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74269,"byte_end":74336,"line_start":208,"line_end":208,"column_start":1,"column_end":68}},{"value":"/ Works better with type inference than [`any::<A>()`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74337,"byte_end":74394,"line_start":209,"line_end":209,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74395,"byte_end":74398,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ With this version, you shouldn't need to specify any of the (many) type","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74399,"byte_end":74474,"line_start":211,"line_end":211,"column_start":1,"column_end":76}},{"value":"/ parameters explicitly. This can have a positive effect on type inference.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74475,"byte_end":74552,"line_start":212,"line_end":212,"column_start":1,"column_end":78}},{"value":"/ However, if you want specify `A`, you should use [`any::<A>()`] instead.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74553,"byte_end":74629,"line_start":213,"line_end":213,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74630,"byte_end":74633,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ For clarity, it is often a good idea to specify the type generated, and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74634,"byte_end":74709,"line_start":215,"line_end":215,"column_start":1,"column_end":76}},{"value":"/ so using [`any::<A>()`] can be a good idea.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74710,"byte_end":74757,"line_start":216,"line_end":216,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74758,"byte_end":74761,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ If you want to customize how the strategy is generated, use","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74762,"byte_end":74825,"line_start":218,"line_end":218,"column_start":1,"column_end":64}},{"value":"/ [`arbitrary_with(args)`] where `args` is of type","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74826,"byte_end":74878,"line_start":219,"line_end":219,"column_start":1,"column_end":53}},{"value":"/ `<A as Arbitrary>::Parameters`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74879,"byte_end":74914,"line_start":220,"line_end":220,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74915,"byte_end":74918,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74919,"byte_end":74932,"line_start":222,"line_end":222,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74933,"byte_end":74936,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ The function can be used as:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74937,"byte_end":74969,"line_start":224,"line_end":224,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74970,"byte_end":74973,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74974,"byte_end":74985,"line_start":226,"line_end":226,"column_start":1,"column_end":12}},{"value":"/ extern crate proptest;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":74986,"byte_end":75012,"line_start":227,"line_end":227,"column_start":1,"column_end":27}},{"value":"/ use proptest::arbitrary::{arbitrary, StrategyFor};","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75013,"byte_end":75067,"line_start":228,"line_end":228,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75068,"byte_end":75071,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ fn gen_vec_usize() -> StrategyFor<Vec<usize>> {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75072,"byte_end":75123,"line_start":230,"line_end":230,"column_start":1,"column_end":52}},{"value":"/     arbitrary()","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75124,"byte_end":75143,"line_start":231,"line_end":231,"column_start":1,"column_end":20}},{"value":"/ }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75144,"byte_end":75149,"line_start":232,"line_end":232,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75150,"byte_end":75153,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ # fn main() {}","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75154,"byte_end":75172,"line_start":234,"line_end":234,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75173,"byte_end":75180,"line_start":235,"line_end":235,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75181,"byte_end":75184,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ [`arbitrary_with(args)`]: fn.arbitrary_with.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75185,"byte_end":75237,"line_start":237,"line_end":237,"column_start":1,"column_end":53}},{"value":"/ [`any::<A>()`]: fn.any.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75238,"byte_end":75269,"line_start":238,"line_end":238,"column_start":1,"column_end":32}},{"value":"/ [`Arbitrary`]: trait.Arbitrary.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75270,"byte_end":75309,"line_start":239,"line_end":239,"column_start":1,"column_end":40}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75310,"byte_end":75359,"line_start":240,"line_end":240,"column_start":1,"column_end":50}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75360,"byte_end":75409,"line_start":241,"line_end":241,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":79},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76884,"byte_end":76898,"line_start":287,"line_end":287,"column_start":8,"column_end":22},"name":"arbitrary_with","qualname":"::arbitrary::traits::arbitrary_with","value":"pub fn arbitrary_with<A, S, P>(P) -> S where P: Default, S: Strategy<Value =\nA>, A: Arbitrary<Strategy = S, Parameters = S>","parent":null,"children":[],"decl_id":null,"docs":" Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the\n given configuration arguments passed in `args`.\n Works better with type inference than [`any_with::<A>(args)`].","sig":null,"attributes":[{"value":"/ Generates a [`Strategy`] producing [`Arbitrary`] values of `A` with the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75605,"byte_end":75680,"line_start":251,"line_end":251,"column_start":1,"column_end":76}},{"value":"/ given configuration arguments passed in `args`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75681,"byte_end":75732,"line_start":252,"line_end":252,"column_start":1,"column_end":52}},{"value":"/ Works better with type inference than [`any_with::<A>(args)`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75733,"byte_end":75799,"line_start":253,"line_end":253,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75800,"byte_end":75803,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ With this version, you shouldn't need to specify any of the (many) type","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75804,"byte_end":75879,"line_start":255,"line_end":255,"column_start":1,"column_end":76}},{"value":"/ parameters explicitly. This can have a positive effect on type inference.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75880,"byte_end":75957,"line_start":256,"line_end":256,"column_start":1,"column_end":78}},{"value":"/ However, if you want specify `A`, you should use","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":75958,"byte_end":76010,"line_start":257,"line_end":257,"column_start":1,"column_end":53}},{"value":"/ [`any_with::<A>(args)`] instead.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76011,"byte_end":76047,"line_start":258,"line_end":258,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76048,"byte_end":76051,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ For clarity, it is often a good idea to specify the type generated, and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76052,"byte_end":76127,"line_start":260,"line_end":260,"column_start":1,"column_end":76}},{"value":"/ so using [`any_with::<A>(args)`] can be a good idea.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76128,"byte_end":76184,"line_start":261,"line_end":261,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76185,"byte_end":76188,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ If you don't want to specify any arguments and instead use the default","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76189,"byte_end":76263,"line_start":263,"line_end":263,"column_start":1,"column_end":75}},{"value":"/ behavior, you should use [`arbitrary()`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76264,"byte_end":76309,"line_start":264,"line_end":264,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76310,"byte_end":76313,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76314,"byte_end":76327,"line_start":266,"line_end":266,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76328,"byte_end":76331,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ The function can be used as:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76332,"byte_end":76364,"line_start":268,"line_end":268,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76365,"byte_end":76368,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76369,"byte_end":76380,"line_start":270,"line_end":270,"column_start":1,"column_end":12}},{"value":"/ extern crate proptest;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76381,"byte_end":76407,"line_start":271,"line_end":271,"column_start":1,"column_end":27}},{"value":"/ use proptest::arbitrary::{arbitrary_with, StrategyFor};","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76408,"byte_end":76467,"line_start":272,"line_end":272,"column_start":1,"column_end":60}},{"value":"/ use proptest::collection::size_range;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76468,"byte_end":76509,"line_start":273,"line_end":273,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76510,"byte_end":76513,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ fn gen_vec_10_u32() -> StrategyFor<Vec<u32>> {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76514,"byte_end":76564,"line_start":275,"line_end":275,"column_start":1,"column_end":51}},{"value":"/     arbitrary_with(size_range(10).lift())","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76565,"byte_end":76610,"line_start":276,"line_end":276,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76611,"byte_end":76616,"line_start":277,"line_end":277,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76617,"byte_end":76620,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"/ # fn main() {}","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76621,"byte_end":76639,"line_start":279,"line_end":279,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76640,"byte_end":76647,"line_start":280,"line_end":280,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76648,"byte_end":76651,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ [`any_with::<A>(args)`]: fn.any_with.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76652,"byte_end":76697,"line_start":282,"line_end":282,"column_start":1,"column_end":46}},{"value":"/ [`arbitrary()`]: fn.arbitrary.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76698,"byte_end":76736,"line_start":283,"line_end":283,"column_start":1,"column_end":39}},{"value":"/ [`Arbitrary`]: trait.Arbitrary.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76737,"byte_end":76776,"line_start":284,"line_end":284,"column_start":1,"column_end":40}},{"value":"/ [`Strategy`]: ../strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76777,"byte_end":76826,"line_start":285,"line_end":285,"column_start":1,"column_end":50}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":76827,"byte_end":76876,"line_start":286,"line_end":286,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":83},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"functor","qualname":"::arbitrary::functor","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":101}],"decl_id":null,"docs":" Provides higher order `Arbitrary` traits.\n This is mainly for use by `proptest_derive`.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":64931,"byte_end":64943,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/ Provides higher order `Arbitrary` traits.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":77484,"byte_end":77529,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"/ This is mainly for use by `proptest_derive`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":77530,"byte_end":77578,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":77579,"byte_end":77582,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ## Stability note","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":77583,"byte_end":77604,"line_start":13,"line_end":13,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":77605,"byte_end":77608,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This trait is mainly defined for `proptest_derive` to simplify the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":77609,"byte_end":77679,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/ mechanics of deriving recursive types. If you have custom containers","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":77680,"byte_end":77752,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ and want to support recursive for those, it is a good idea to implement","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":77753,"byte_end":77828,"line_start":17,"line_end":17,"column_start":1,"column_end":76}},{"value":"/ this trait.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":77829,"byte_end":77844,"line_start":18,"line_end":18,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":77845,"byte_end":77848,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ There are clearer and terser ways that work better with","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":77849,"byte_end":77908,"line_start":20,"line_end":20,"column_start":1,"column_end":60}},{"value":"/ inference such as using `proptest::collection::vec(..)`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":77909,"byte_end":77968,"line_start":21,"line_end":21,"column_start":1,"column_end":60}},{"value":"/ to achieve the same result.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":77969,"byte_end":78000,"line_start":22,"line_end":22,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":78001,"byte_end":78004,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ For these reasons, the traits here are deliberately","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":78005,"byte_end":78060,"line_start":24,"line_end":24,"column_start":1,"column_end":56}},{"value":"/ not exported in a convenient way.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":78061,"byte_end":78098,"line_start":25,"line_end":25,"column_start":1,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":94},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":78589,"byte_end":78600,"line_start":41,"line_end":41,"column_start":11,"column_end":22},"name":"ArbitraryF1","qualname":"::arbitrary::functor::ArbitraryF1","value":"ArbitraryF1<A: fmt::Debug>: fmt::Debug + Sized","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":99}],"decl_id":null,"docs":" `ArbitraryF1` lets you lift a [`Strategy`] to unary\n type constructors such as `Box`, `Vec`, and `Option`.","sig":null,"attributes":[{"value":"/ `ArbitraryF1` lets you lift a [`Strategy`] to unary","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":78178,"byte_end":78233,"line_start":31,"line_end":31,"column_start":1,"column_end":56}},{"value":"/ type constructors such as `Box`, `Vec`, and `Option`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":78234,"byte_end":78291,"line_start":32,"line_end":32,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":78292,"byte_end":78295,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ The trait corresponds to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":78296,"byte_end":78324,"line_start":34,"line_end":34,"column_start":1,"column_end":29}},{"value":"/ [Haskell QuickCheck's `Arbitrary1` type class][HaskellQC].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":78325,"byte_end":78387,"line_start":35,"line_end":35,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":78388,"byte_end":78391,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ [HaskellQC]:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":78392,"byte_end":78408,"line_start":37,"line_end":37,"column_start":1,"column_end":17}},{"value":"/ https://hackage.haskell.org/package/QuickCheck-2.10.1/docs/Test-QuickCheck-Arbitrary.html#t:Arbitrary1","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":78409,"byte_end":78515,"line_start":38,"line_end":38,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":78516,"byte_end":78519,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":78520,"byte_end":78578,"line_start":40,"line_end":40,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":96},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80387,"byte_end":80397,"line_start":77,"line_end":77,"column_start":10,"column_end":20},"name":"Parameters","qualname":"::arbitrary::functor::ArbitraryF1::Parameters","value":"type Parameters: Default;","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" The type of parameters that [`lift1_with`] accepts for\n configuration of the lifted and generated [`Strategy`]. Parameters\n must implement [`Default`].","sig":null,"attributes":[{"value":"/ The type of parameters that [`lift1_with`] accepts for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":79952,"byte_end":80010,"line_start":67,"line_end":67,"column_start":5,"column_end":63}},{"value":"/ configuration of the lifted and generated [`Strategy`]. Parameters","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80015,"byte_end":80085,"line_start":68,"line_end":68,"column_start":5,"column_end":75}},{"value":"/ must implement [`Default`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80090,"byte_end":80121,"line_start":69,"line_end":69,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80126,"byte_end":80129,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ [`lift1_with`]:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80134,"byte_end":80153,"line_start":71,"line_end":71,"column_start":5,"column_end":24}},{"value":"/     trait.ArbitraryF1.html#tymethod.lift1_with","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80158,"byte_end":80208,"line_start":72,"line_end":72,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80213,"byte_end":80216,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80221,"byte_end":80279,"line_start":74,"line_end":74,"column_start":5,"column_end":63}},{"value":"/ [`Default`]:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80284,"byte_end":80300,"line_start":75,"line_end":75,"column_start":5,"column_end":21}},{"value":"/     https://doc.rust-lang.org/nightly/std/default/trait.Default.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80305,"byte_end":80377,"line_start":76,"line_end":76,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81123,"byte_end":81128,"line_start":94,"line_end":94,"column_start":8,"column_end":13},"name":"lift1","qualname":"::arbitrary::functor::ArbitraryF1::lift1","value":"pub fn lift1<AS>(AS) -> BoxedStrategy<Self> where AS: Strategy<Value = A> +\n'static","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Lifts a given [`Strategy`] to a new [`Strategy`] for the (presumably)\n bigger type. This is useful for lifting a `Strategy` for `SomeType`\n to a container such as `Vec<SomeType>`.","sig":null,"attributes":[{"value":"/ Lifts a given [`Strategy`] to a new [`Strategy`] for the (presumably)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80413,"byte_end":80486,"line_start":79,"line_end":79,"column_start":5,"column_end":78}},{"value":"/ bigger type. This is useful for lifting a `Strategy` for `SomeType`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80491,"byte_end":80562,"line_start":80,"line_end":80,"column_start":5,"column_end":76}},{"value":"/ to a container such as `Vec<SomeType>`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80567,"byte_end":80610,"line_start":81,"line_end":81,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80615,"byte_end":80618,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Calling this for the type `X` is the equivalent of using","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80623,"byte_end":80683,"line_start":83,"line_end":83,"column_start":5,"column_end":65}},{"value":"/ [`X::lift1_with(base, Default::default())`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80688,"byte_end":80736,"line_start":84,"line_end":84,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80741,"byte_end":80744,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ This method is defined in the trait for optimization for the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80749,"byte_end":80813,"line_start":86,"line_end":86,"column_start":5,"column_end":69}},{"value":"/ default if you want to do that. It is a logic error to not","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80818,"byte_end":80880,"line_start":87,"line_end":87,"column_start":5,"column_end":67}},{"value":"/ preserve the semantics when overriding.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80885,"byte_end":80928,"line_start":88,"line_end":88,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80933,"byte_end":80936,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":80941,"byte_end":80999,"line_start":90,"line_end":90,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81004,"byte_end":81007,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ [`X::lift1_with(base, Default::default())`]:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81012,"byte_end":81060,"line_start":92,"line_end":92,"column_start":5,"column_end":53}},{"value":"/     trait.ArbitraryF1.html#tymethod.lift1_with","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81065,"byte_end":81115,"line_start":93,"line_end":93,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81914,"byte_end":81924,"line_start":115,"line_end":115,"column_start":8,"column_end":18},"name":"lift1_with","qualname":"::arbitrary::functor::ArbitraryF1::lift1_with","value":"pub fn lift1_with<AS>(AS, Self::Parameters) -> BoxedStrategy<Self> where\nAS: Strategy<Value = A> + 'static","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Lifts a given [`Strategy`] to a new [`Strategy`] for the (presumably)\n bigger type. This is useful for lifting a `Strategy` for `SomeType`\n to a container such as `Vec` of `SomeType`. The composite strategy is\n passed the arguments given in `args`.","sig":null,"attributes":[{"value":"/ Lifts a given [`Strategy`] to a new [`Strategy`] for the (presumably)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81296,"byte_end":81369,"line_start":101,"line_end":101,"column_start":5,"column_end":78}},{"value":"/ bigger type. This is useful for lifting a `Strategy` for `SomeType`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81374,"byte_end":81445,"line_start":102,"line_end":102,"column_start":5,"column_end":76}},{"value":"/ to a container such as `Vec` of `SomeType`. The composite strategy is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81450,"byte_end":81523,"line_start":103,"line_end":103,"column_start":5,"column_end":78}},{"value":"/ passed the arguments given in `args`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81528,"byte_end":81569,"line_start":104,"line_end":104,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81574,"byte_end":81577,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ If you wish to use the [`default()`] arguments,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81582,"byte_end":81633,"line_start":106,"line_end":106,"column_start":5,"column_end":56}},{"value":"/ use [`lift1`] instead.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81638,"byte_end":81664,"line_start":107,"line_end":107,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81669,"byte_end":81672,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81677,"byte_end":81735,"line_start":109,"line_end":109,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81740,"byte_end":81743,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ [`lift1`]: trait.ArbitraryF1.html#method.lift1","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81748,"byte_end":81798,"line_start":111,"line_end":111,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81803,"byte_end":81806,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ [`default()`]:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81811,"byte_end":81829,"line_start":113,"line_end":113,"column_start":5,"column_end":23}},{"value":"/     https://doc.rust-lang.org/nightly/std/default/trait.Default.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":81834,"byte_end":81906,"line_start":114,"line_end":114,"column_start":5,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":101},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82445,"byte_end":82456,"line_start":130,"line_end":130,"column_start":11,"column_end":22},"name":"ArbitraryF2","qualname":"::arbitrary::functor::ArbitraryF2","value":"ArbitraryF2<A: fmt::Debug, B: fmt::Debug>: fmt::Debug + Sized","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":108}],"decl_id":null,"docs":" `ArbitraryF2` lets you lift [`Strategy`] to binary\n type constructors such as `Result`, `HashMap`.","sig":null,"attributes":[{"value":"/ `ArbitraryF2` lets you lift [`Strategy`] to binary","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82042,"byte_end":82096,"line_start":120,"line_end":120,"column_start":1,"column_end":55}},{"value":"/ type constructors such as `Result`, `HashMap`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82097,"byte_end":82147,"line_start":121,"line_end":121,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82148,"byte_end":82151,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ The trait corresponds to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82152,"byte_end":82180,"line_start":123,"line_end":123,"column_start":1,"column_end":29}},{"value":"/ [Haskell QuickCheck's `Arbitrary2` type class][HaskellQC].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82181,"byte_end":82243,"line_start":124,"line_end":124,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82244,"byte_end":82247,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ [HaskellQC]:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82248,"byte_end":82264,"line_start":126,"line_end":126,"column_start":1,"column_end":17}},{"value":"/ https://hackage.haskell.org/package/QuickCheck-2.10.1/docs/Test-QuickCheck-Arbitrary.html#t:Arbitrary2","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82265,"byte_end":82371,"line_start":127,"line_end":127,"column_start":1,"column_end":107}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82372,"byte_end":82375,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82376,"byte_end":82434,"line_start":129,"line_end":129,"column_start":1,"column_end":59}}]},{"kind":"Type","id":{"krate":0,"index":104},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82948,"byte_end":82958,"line_start":143,"line_end":143,"column_start":10,"column_end":20},"name":"Parameters","qualname":"::arbitrary::functor::ArbitraryF2::Parameters","value":"type Parameters: Default;","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" The type of parameters that [`lift2_with`] accepts for\n configuration of the lifted and generated [`Strategy`]. Parameters\n must implement [`Default`].","sig":null,"attributes":[{"value":"/ The type of parameters that [`lift2_with`] accepts for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82517,"byte_end":82575,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ configuration of the lifted and generated [`Strategy`]. Parameters","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82580,"byte_end":82650,"line_start":134,"line_end":134,"column_start":5,"column_end":75}},{"value":"/ must implement [`Default`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82655,"byte_end":82686,"line_start":135,"line_end":135,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82691,"byte_end":82694,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ [`lift2_with`]: trait.ArbitraryF2.html#tymethod.lift2_with","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82699,"byte_end":82761,"line_start":137,"line_end":137,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82766,"byte_end":82769,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82774,"byte_end":82832,"line_start":139,"line_end":139,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82837,"byte_end":82840,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ [`Default`]:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82845,"byte_end":82861,"line_start":141,"line_end":141,"column_start":5,"column_end":21}},{"value":"/     https://doc.rust-lang.org/nightly/std/default/trait.Default.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82866,"byte_end":82938,"line_start":142,"line_end":142,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":83707,"byte_end":83712,"line_start":160,"line_end":160,"column_start":8,"column_end":13},"name":"lift2","qualname":"::arbitrary::functor::ArbitraryF2::lift2","value":"pub fn lift2<AS, BS>(AS, BS) -> BoxedStrategy<Self> where AS: Strategy<Value =\nA> + 'static, BS: Strategy<Value = B> + 'static","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Lifts two given strategies to a new [`Strategy`] for the (presumably)\n bigger type. This is useful for lifting a `Strategy` for `Type1`\n and one for `Type2` to a container such as `HashMap<Type1, Type2>`.","sig":null,"attributes":[{"value":"/ Lifts two given strategies to a new [`Strategy`] for the (presumably)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82974,"byte_end":83047,"line_start":145,"line_end":145,"column_start":5,"column_end":78}},{"value":"/ bigger type. This is useful for lifting a `Strategy` for `Type1`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":83052,"byte_end":83120,"line_start":146,"line_end":146,"column_start":5,"column_end":73}},{"value":"/ and one for `Type2` to a container such as `HashMap<Type1, Type2>`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":83125,"byte_end":83196,"line_start":147,"line_end":147,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":83201,"byte_end":83204,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ Calling this for the type `X` is the equivalent of using","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":83209,"byte_end":83269,"line_start":149,"line_end":149,"column_start":5,"column_end":65}},{"value":"/ [`X::lift2_with(base, Default::default())`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":83274,"byte_end":83322,"line_start":150,"line_end":150,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":83327,"byte_end":83330,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ This method is defined in the trait for optimization for the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":83335,"byte_end":83399,"line_start":152,"line_end":152,"column_start":5,"column_end":69}},{"value":"/ default if you want to do that. It is a logic error to not","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":83404,"byte_end":83466,"line_start":153,"line_end":153,"column_start":5,"column_end":67}},{"value":"/ preserve the semantics when overriding.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":83471,"byte_end":83514,"line_start":154,"line_end":154,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":83519,"byte_end":83522,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":83527,"byte_end":83585,"line_start":156,"line_end":156,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":83590,"byte_end":83593,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ [`X::lift2_with(base, Default::default())`]:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":83598,"byte_end":83646,"line_start":158,"line_end":158,"column_start":5,"column_end":53}},{"value":"/     trait.Arbitrary.html#tymethod.lift2_with","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":83651,"byte_end":83699,"line_start":159,"line_end":159,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":84578,"byte_end":84588,"line_start":182,"line_end":182,"column_start":8,"column_end":18},"name":"lift2_with","qualname":"::arbitrary::functor::ArbitraryF2::lift2_with","value":"pub fn lift2_with<AS, BS>(AS, BS, Self::Parameters) -> BoxedStrategy<Self>\nwhere AS: Strategy<Value = A> + 'static, BS: Strategy<Value = B> + 'static","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Lifts two given strategies to a new [`Strategy`] for the (presumably)\n bigger type. This is useful for lifting a `Strategy` for `Type1`\n and one for `Type2` to a container such as `HashMap<Type1, Type2>`.\n The composite strategy is passed the arguments given in `args`.","sig":null,"attributes":[{"value":"/ Lifts two given strategies to a new [`Strategy`] for the (presumably)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":83939,"byte_end":84012,"line_start":168,"line_end":168,"column_start":5,"column_end":78}},{"value":"/ bigger type. This is useful for lifting a `Strategy` for `Type1`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":84017,"byte_end":84085,"line_start":169,"line_end":169,"column_start":5,"column_end":73}},{"value":"/ and one for `Type2` to a container such as `HashMap<Type1, Type2>`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":84090,"byte_end":84161,"line_start":170,"line_end":170,"column_start":5,"column_end":76}},{"value":"/ The composite strategy is passed the arguments given in `args`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":84166,"byte_end":84233,"line_start":171,"line_end":171,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":84238,"byte_end":84241,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ If you wish to use the [`default()`] arguments,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":84246,"byte_end":84297,"line_start":173,"line_end":173,"column_start":5,"column_end":56}},{"value":"/ use [`lift2`] instead.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":84302,"byte_end":84328,"line_start":174,"line_end":174,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":84333,"byte_end":84336,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ [`Strategy`]: ../proptest/strategy/trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":84341,"byte_end":84399,"line_start":176,"line_end":176,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":84404,"byte_end":84407,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ [`lift2`]: trait.ArbitraryF2.html#method.lift2","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":84412,"byte_end":84462,"line_start":178,"line_end":178,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":84467,"byte_end":84470,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ [`default()`]:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":84475,"byte_end":84493,"line_start":180,"line_end":180,"column_start":5,"column_end":23}},{"value":"/     https://doc.rust-lang.org/nightly/std/default/trait.Default.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":84498,"byte_end":84570,"line_start":181,"line_end":181,"column_start":5,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":808},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":65674,"byte_end":65681,"line_start":60,"line_end":60,"column_start":10,"column_end":17},"name":"SMapped","qualname":"::arbitrary::SMapped","value":"statics::Map<StrategyFor<I>, fn(: I) -> O>","parent":null,"children":[],"decl_id":null,"docs":" A static map from a strategy of `I` to `O`.","sig":null,"attributes":[{"value":"/ A static map from a strategy of `I` to `O`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":65486,"byte_end":65533,"line_start":54,"line_end":54,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":65534,"byte_end":65537,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ # Stability","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":65538,"byte_end":65553,"line_start":56,"line_end":56,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":65554,"byte_end":65557,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ This is provided to make documentation more readable.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":65558,"byte_end":65615,"line_start":58,"line_end":58,"column_start":1,"column_end":58}},{"value":"/ Do not rely on it existing in your own code.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":65616,"byte_end":65664,"line_start":59,"line_end":59,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":811},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":65921,"byte_end":65927,"line_start":68,"line_end":68,"column_start":10,"column_end":16},"name":"Mapped","qualname":"::arbitrary::Mapped","value":"Map<StrategyFor<I>, fn(: I) -> O>","parent":null,"children":[],"decl_id":null,"docs":" A normal map from a strategy of `I` to `O`.","sig":null,"attributes":[{"value":"/ A normal map from a strategy of `I` to `O`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":65733,"byte_end":65780,"line_start":62,"line_end":62,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":65781,"byte_end":65784,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Stability","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":65785,"byte_end":65800,"line_start":64,"line_end":64,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":65801,"byte_end":65804,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ This is provided to make documentation more readable.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":65805,"byte_end":65862,"line_start":66,"line_end":66,"column_start":1,"column_end":58}},{"value":"/ Do not rely on it existing in your own code.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":65863,"byte_end":65911,"line_start":67,"line_end":67,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":814},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"array","qualname":"::array","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","parent":null,"children":[{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":5085},{"krate":0,"index":5090},{"krate":0,"index":5094},{"krate":0,"index":5097},{"krate":0,"index":820},{"krate":0,"index":5101},{"krate":0,"index":5106},{"krate":0,"index":5109},{"krate":0,"index":5111},{"krate":0,"index":5114},{"krate":0,"index":5117},{"krate":0,"index":5125},{"krate":0,"index":5133},{"krate":0,"index":5142},{"krate":0,"index":5145},{"krate":0,"index":5153},{"krate":0,"index":5161},{"krate":0,"index":5170},{"krate":0,"index":5173},{"krate":0,"index":5181},{"krate":0,"index":5189},{"krate":0,"index":5198},{"krate":0,"index":5201},{"krate":0,"index":5209},{"krate":0,"index":5217},{"krate":0,"index":5226},{"krate":0,"index":5229},{"krate":0,"index":5237},{"krate":0,"index":5245},{"krate":0,"index":5254},{"krate":0,"index":5257},{"krate":0,"index":5265},{"krate":0,"index":5273},{"krate":0,"index":5282},{"krate":0,"index":5285},{"krate":0,"index":5293},{"krate":0,"index":5301},{"krate":0,"index":5310},{"krate":0,"index":5313},{"krate":0,"index":5321},{"krate":0,"index":5329},{"krate":0,"index":5338},{"krate":0,"index":5341},{"krate":0,"index":5349},{"krate":0,"index":5357},{"krate":0,"index":5366},{"krate":0,"index":5369},{"krate":0,"index":5377},{"krate":0,"index":5385},{"krate":0,"index":5394},{"krate":0,"index":5397},{"krate":0,"index":5405},{"krate":0,"index":5413},{"krate":0,"index":5422},{"krate":0,"index":5425},{"krate":0,"index":5433},{"krate":0,"index":5441},{"krate":0,"index":5450},{"krate":0,"index":5453},{"krate":0,"index":5461},{"krate":0,"index":5469},{"krate":0,"index":5478},{"krate":0,"index":5481},{"krate":0,"index":5489},{"krate":0,"index":5497},{"krate":0,"index":5506},{"krate":0,"index":5509},{"krate":0,"index":5517},{"krate":0,"index":5525},{"krate":0,"index":5534},{"krate":0,"index":5537},{"krate":0,"index":5545},{"krate":0,"index":5553},{"krate":0,"index":5562},{"krate":0,"index":5565},{"krate":0,"index":5573},{"krate":0,"index":5581},{"krate":0,"index":5590},{"krate":0,"index":5593},{"krate":0,"index":5601},{"krate":0,"index":5609},{"krate":0,"index":5618},{"krate":0,"index":5621},{"krate":0,"index":5629},{"krate":0,"index":5637},{"krate":0,"index":5646},{"krate":0,"index":5649},{"krate":0,"index":5657},{"krate":0,"index":5665},{"krate":0,"index":5674},{"krate":0,"index":5677},{"krate":0,"index":5685},{"krate":0,"index":5693},{"krate":0,"index":5702},{"krate":0,"index":5705},{"krate":0,"index":5713},{"krate":0,"index":5721},{"krate":0,"index":5730},{"krate":0,"index":5733},{"krate":0,"index":5741},{"krate":0,"index":5749},{"krate":0,"index":5758},{"krate":0,"index":5761},{"krate":0,"index":5769},{"krate":0,"index":5777},{"krate":0,"index":5786},{"krate":0,"index":5789},{"krate":0,"index":5797},{"krate":0,"index":5805},{"krate":0,"index":5814},{"krate":0,"index":5817},{"krate":0,"index":5825},{"krate":0,"index":5833},{"krate":0,"index":5842},{"krate":0,"index":5845},{"krate":0,"index":5853},{"krate":0,"index":5861},{"krate":0,"index":5870},{"krate":0,"index":5873},{"krate":0,"index":5881},{"krate":0,"index":5889},{"krate":0,"index":5898},{"krate":0,"index":5901},{"krate":0,"index":5909},{"krate":0,"index":5917},{"krate":0,"index":5926},{"krate":0,"index":5929},{"krate":0,"index":5937},{"krate":0,"index":5945},{"krate":0,"index":5954},{"krate":0,"index":5957},{"krate":0,"index":5965},{"krate":0,"index":5973},{"krate":0,"index":5982},{"krate":0,"index":5985},{"krate":0,"index":5993},{"krate":0,"index":6001}],"decl_id":null,"docs":" Support for strategies producing fixed-length arrays.","sig":null,"attributes":[{"value":"/ Support for strategies producing fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":172474,"byte_end":172531,"line_start":10,"line_end":10,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":172532,"byte_end":172535,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ An array of strategies (but only length 1 to 32 for now) is itself a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":172536,"byte_end":172608,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"/ strategy which generates arrays of that size drawing elements from the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":172609,"byte_end":172683,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ corresponding input strategies.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":172684,"byte_end":172719,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":172720,"byte_end":172723,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ See also [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":172724,"byte_end":172799,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ easily making a strategy for an array drawn from one strategy.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":172800,"byte_end":172866,"line_start":17,"line_end":17,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":172867,"byte_end":172870,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ General implementations are available for sizes 1 through 32.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":172871,"byte_end":172936,"line_start":19,"line_end":19,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":5085},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173898,"byte_end":173918,"line_start":53,"line_end":53,"column_start":12,"column_end":32},"name":"UniformArrayStrategy","qualname":"::array::UniformArrayStrategy","value":"UniformArrayStrategy {  }","parent":null,"children":[{"krate":0,"index":5088},{"krate":0,"index":5089}],"decl_id":null,"docs":" A `Strategy` which generates fixed-size arrays containing values drawn from\n an inner strategy.","sig":null,"attributes":[{"value":"/ A `Strategy` which generates fixed-size arrays containing values drawn from","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173022,"byte_end":173101,"line_start":26,"line_end":26,"column_start":1,"column_end":80}},{"value":"/ an inner strategy.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173102,"byte_end":173124,"line_start":27,"line_end":27,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173125,"byte_end":173128,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ `T` must be an array type of length 1 to 32 whose values are produced by","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173129,"byte_end":173205,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/ strategy `S`. Instances of this type are normally created by the various","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173206,"byte_end":173282,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ `uniformXX` functions in this module.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173283,"byte_end":173324,"line_start":31,"line_end":31,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173325,"byte_end":173328,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ This is mainly useful when the inner strategy is not `Copy`, precluding","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173329,"byte_end":173404,"line_start":33,"line_end":33,"column_start":1,"column_end":76}},{"value":"/ expressing the strategy as `[myStrategy; 32]`, for example.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173405,"byte_end":173468,"line_start":34,"line_end":34,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173469,"byte_end":173472,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173473,"byte_end":173487,"line_start":36,"line_end":36,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173488,"byte_end":173491,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173492,"byte_end":173499,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173500,"byte_end":173529,"line_start":39,"line_end":39,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173530,"byte_end":173533,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ proptest! {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173534,"byte_end":173549,"line_start":41,"line_end":41,"column_start":1,"column_end":16}},{"value":"/   #[test]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173550,"byte_end":173563,"line_start":42,"line_end":42,"column_start":1,"column_end":14}},{"value":"/   fn test_something(a in prop::array::uniform32(1u32..)) {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173564,"byte_end":173626,"line_start":43,"line_end":43,"column_start":1,"column_end":63}},{"value":"/     let unexpected = [0u32;32];","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173627,"byte_end":173662,"line_start":44,"line_end":44,"column_start":1,"column_end":36}},{"value":"/     // `a` is also a [u32;32], so we can compare them directly","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173663,"byte_end":173729,"line_start":45,"line_end":45,"column_start":1,"column_end":67}},{"value":"/     assert_ne!(unexpected, a);","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173730,"byte_end":173764,"line_start":46,"line_end":46,"column_start":1,"column_end":35}},{"value":"/   }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173765,"byte_end":173772,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173773,"byte_end":173778,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"/ # fn main() { }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173779,"byte_end":173798,"line_start":49,"line_end":49,"column_start":1,"column_end":20}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173799,"byte_end":173806,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173807,"byte_end":173856,"line_start":51,"line_end":51,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174419,"byte_end":174422,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"new","qualname":"<UniformArrayStrategy<S, T>>::new","value":"pub fn new(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Directly create a `UniformArrayStrategy`.","sig":null,"attributes":[{"value":"/ Directly create a `UniformArrayStrategy`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174020,"byte_end":174065,"line_start":59,"line_end":59,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174070,"byte_end":174073,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ This is only intended for advanced use, since the only way to specify","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174078,"byte_end":174151,"line_start":61,"line_end":61,"column_start":5,"column_end":78}},{"value":"/ the array size is with the turbofish operator and explicitly naming the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174156,"byte_end":174231,"line_start":62,"line_end":62,"column_start":5,"column_end":80}},{"value":"/ type of the values in the array and the strategy itself.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174236,"byte_end":174296,"line_start":63,"line_end":63,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174301,"byte_end":174304,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ Prefer the `uniformXX` functions at module-level unless something","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174309,"byte_end":174378,"line_start":65,"line_end":65,"column_start":5,"column_end":74}},{"value":"/ precludes their use.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174383,"byte_end":174407,"line_start":66,"line_end":66,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":5101},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174646,"byte_end":174660,"line_start":77,"line_end":77,"column_start":12,"column_end":26},"name":"ArrayValueTree","qualname":"::array::ArrayValueTree","value":"ArrayValueTree {  }","parent":null,"children":[{"krate":0,"index":5103},{"krate":0,"index":5104},{"krate":0,"index":5105}],"decl_id":null,"docs":" A `ValueTree` operating over a fixed-size array.\n","sig":null,"attributes":[{"value":"/ A `ValueTree` operating over a fixed-size array.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174552,"byte_end":174604,"line_start":75,"line_end":75,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":5114},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":177546,"byte_end":177554,"line_start":169,"line_end":169,"column_start":16,"column_end":24},"name":"uniform1","qualname":"::array::uniform1","value":"pub fn uniform1<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5142},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":177588,"byte_end":177596,"line_start":171,"line_end":171,"column_start":16,"column_end":24},"name":"uniform2","qualname":"::array::uniform2","value":"pub fn uniform2<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5170},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":177633,"byte_end":177641,"line_start":173,"line_end":173,"column_start":16,"column_end":24},"name":"uniform3","qualname":"::array::uniform3","value":"pub fn uniform3<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5198},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":177681,"byte_end":177689,"line_start":175,"line_end":175,"column_start":16,"column_end":24},"name":"uniform4","qualname":"::array::uniform4","value":"pub fn uniform4<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5226},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":177732,"byte_end":177740,"line_start":177,"line_end":177,"column_start":16,"column_end":24},"name":"uniform5","qualname":"::array::uniform5","value":"pub fn uniform5<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5254},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":177786,"byte_end":177794,"line_start":179,"line_end":179,"column_start":16,"column_end":24},"name":"uniform6","qualname":"::array::uniform6","value":"pub fn uniform6<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5282},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":177843,"byte_end":177851,"line_start":181,"line_end":181,"column_start":16,"column_end":24},"name":"uniform7","qualname":"::array::uniform7","value":"pub fn uniform7<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5310},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":177903,"byte_end":177911,"line_start":183,"line_end":183,"column_start":16,"column_end":24},"name":"uniform8","qualname":"::array::uniform8","value":"pub fn uniform8<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5338},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":177966,"byte_end":177974,"line_start":185,"line_end":185,"column_start":16,"column_end":24},"name":"uniform9","qualname":"::array::uniform9","value":"pub fn uniform9<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5366},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":178033,"byte_end":178042,"line_start":187,"line_end":187,"column_start":17,"column_end":26},"name":"uniform10","qualname":"::array::uniform10","value":"pub fn uniform10<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5394},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":178104,"byte_end":178113,"line_start":189,"line_end":189,"column_start":17,"column_end":26},"name":"uniform11","qualname":"::array::uniform11","value":"pub fn uniform11<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5422},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":178179,"byte_end":178188,"line_start":191,"line_end":191,"column_start":17,"column_end":26},"name":"uniform12","qualname":"::array::uniform12","value":"pub fn uniform12<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5450},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":178258,"byte_end":178267,"line_start":193,"line_end":193,"column_start":17,"column_end":26},"name":"uniform13","qualname":"::array::uniform13","value":"pub fn uniform13<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5478},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":178341,"byte_end":178350,"line_start":195,"line_end":195,"column_start":17,"column_end":26},"name":"uniform14","qualname":"::array::uniform14","value":"pub fn uniform14<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5506},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":178428,"byte_end":178437,"line_start":197,"line_end":197,"column_start":17,"column_end":26},"name":"uniform15","qualname":"::array::uniform15","value":"pub fn uniform15<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5534},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":178519,"byte_end":178528,"line_start":199,"line_end":199,"column_start":17,"column_end":26},"name":"uniform16","qualname":"::array::uniform16","value":"pub fn uniform16<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5562},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":178614,"byte_end":178623,"line_start":201,"line_end":201,"column_start":17,"column_end":26},"name":"uniform17","qualname":"::array::uniform17","value":"pub fn uniform17<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5590},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":178713,"byte_end":178722,"line_start":203,"line_end":203,"column_start":17,"column_end":26},"name":"uniform18","qualname":"::array::uniform18","value":"pub fn uniform18<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5618},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":178816,"byte_end":178825,"line_start":205,"line_end":205,"column_start":17,"column_end":26},"name":"uniform19","qualname":"::array::uniform19","value":"pub fn uniform19<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5646},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":178936,"byte_end":178945,"line_start":208,"line_end":208,"column_start":17,"column_end":26},"name":"uniform20","qualname":"::array::uniform20","value":"pub fn uniform20<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5674},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":179060,"byte_end":179069,"line_start":211,"line_end":211,"column_start":17,"column_end":26},"name":"uniform21","qualname":"::array::uniform21","value":"pub fn uniform21<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5702},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":179188,"byte_end":179197,"line_start":214,"line_end":214,"column_start":17,"column_end":26},"name":"uniform22","qualname":"::array::uniform22","value":"pub fn uniform22<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5730},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":179320,"byte_end":179329,"line_start":217,"line_end":217,"column_start":17,"column_end":26},"name":"uniform23","qualname":"::array::uniform23","value":"pub fn uniform23<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5758},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":179456,"byte_end":179465,"line_start":220,"line_end":220,"column_start":17,"column_end":26},"name":"uniform24","qualname":"::array::uniform24","value":"pub fn uniform24<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5786},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":179596,"byte_end":179605,"line_start":223,"line_end":223,"column_start":17,"column_end":26},"name":"uniform25","qualname":"::array::uniform25","value":"pub fn uniform25<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5814},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":179740,"byte_end":179749,"line_start":226,"line_end":226,"column_start":17,"column_end":26},"name":"uniform26","qualname":"::array::uniform26","value":"pub fn uniform26<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5842},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":179888,"byte_end":179897,"line_start":229,"line_end":229,"column_start":17,"column_end":26},"name":"uniform27","qualname":"::array::uniform27","value":"pub fn uniform27<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5870},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":180040,"byte_end":180049,"line_start":232,"line_end":232,"column_start":17,"column_end":26},"name":"uniform28","qualname":"::array::uniform28","value":"pub fn uniform28<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5898},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":180196,"byte_end":180205,"line_start":235,"line_end":235,"column_start":17,"column_end":26},"name":"uniform29","qualname":"::array::uniform29","value":"pub fn uniform29<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5926},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":180356,"byte_end":180365,"line_start":238,"line_end":238,"column_start":17,"column_end":26},"name":"uniform30","qualname":"::array::uniform30","value":"pub fn uniform30<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5954},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":180520,"byte_end":180529,"line_start":241,"line_end":241,"column_start":17,"column_end":26},"name":"uniform31","qualname":"::array::uniform31","value":"pub fn uniform31<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":5982},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":180688,"byte_end":180697,"line_start":244,"line_end":244,"column_start":17,"column_end":26},"name":"uniform32","qualname":"::array::uniform32","value":"pub fn uniform32<S: Strategy>(S) -> UniformArrayStrategy<S, [S::Value; ]>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate fixed-length arrays.","sig":null,"attributes":[{"value":"/ Create a strategy to generate fixed-length arrays.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174816,"byte_end":174870,"line_start":85,"line_end":85,"column_start":9,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174879,"byte_end":174882,"line_start":86,"line_end":86,"column_start":9,"column_end":12}},{"value":"/ All values within the new strategy are generated using the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174891,"byte_end":174959,"line_start":87,"line_end":87,"column_start":9,"column_end":77}},{"value":"/ strategy. The length of the array corresponds to the suffix of the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":174968,"byte_end":175038,"line_start":88,"line_end":88,"column_start":9,"column_end":79}},{"value":"/ name of this function.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175047,"byte_end":175073,"line_start":89,"line_end":89,"column_start":9,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175082,"byte_end":175085,"line_start":90,"line_end":90,"column_start":9,"column_end":12}},{"value":"/ See [`UniformArrayStrategy`](struct.UniformArrayStrategy.html) for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175094,"byte_end":175164,"line_start":91,"line_end":91,"column_start":9,"column_end":79}},{"value":"/ example usage.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":175173,"byte_end":175191,"line_start":92,"line_end":92,"column_start":9,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":825},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bits","qualname":"::bits","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":830},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":836},{"krate":0,"index":839},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":846},{"krate":0,"index":849},{"krate":0,"index":852},{"krate":0,"index":855},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":6010},{"krate":0,"index":6017},{"krate":0,"index":6024},{"krate":0,"index":6031},{"krate":0,"index":6038},{"krate":0,"index":6045},{"krate":0,"index":6052},{"krate":0,"index":6059},{"krate":0,"index":6066},{"krate":0,"index":6073},{"krate":0,"index":868},{"krate":0,"index":875},{"krate":0,"index":6080},{"krate":0,"index":6085},{"krate":0,"index":6088},{"krate":0,"index":6090},{"krate":0,"index":883},{"krate":0,"index":887},{"krate":0,"index":6093},{"krate":0,"index":6098},{"krate":0,"index":6101},{"krate":0,"index":893},{"krate":0,"index":898},{"krate":0,"index":6104},{"krate":0,"index":6110},{"krate":0,"index":6113},{"krate":0,"index":6115},{"krate":0,"index":903},{"krate":0,"index":6118},{"krate":0,"index":6126},{"krate":0,"index":6134},{"krate":0,"index":6142},{"krate":0,"index":6150},{"krate":0,"index":6158},{"krate":0,"index":6166},{"krate":0,"index":6174},{"krate":0,"index":6182},{"krate":0,"index":6189},{"krate":0,"index":6196},{"krate":0,"index":6203},{"krate":0,"index":911},{"krate":0,"index":935}],"decl_id":null,"docs":" Strategies for working with bit sets.","sig":null,"attributes":[{"value":"/ Strategies for working with bit sets.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":182449,"byte_end":182490,"line_start":10,"line_end":10,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":182491,"byte_end":182494,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Besides `BitSet` itself, this also defines strategies for all the primitive","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":182495,"byte_end":182574,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ integer types. These strategies are appropriate for integers which are used","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":182575,"byte_end":182654,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ as bit flags, etc; e.g., where the most reasonable simplification of `64`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":182655,"byte_end":182732,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ is `0` (clearing one bit) and not `63` (clearing one bit but setting 6","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":182733,"byte_end":182807,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ others). For integers treated as numeric values, see the corresponding","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":182808,"byte_end":182882,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"/ modules of the `num` module instead.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":182883,"byte_end":182923,"line_start":17,"line_end":17,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":860},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183365,"byte_end":183375,"line_start":34,"line_end":34,"column_start":11,"column_end":21},"name":"BitSetLike","qualname":"::bits::BitSetLike","value":"BitSetLike: Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866}],"decl_id":null,"docs":" Trait for types which can be handled with `BitSetStrategy`.\n","sig":null,"attributes":[{"value":"/ Trait for types which can be handled with `BitSetStrategy`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183224,"byte_end":183287,"line_start":32,"line_end":32,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183508,"byte_end":183518,"line_start":37,"line_end":37,"column_start":8,"column_end":18},"name":"new_bitset","qualname":"::bits::BitSetLike::new_bitset","value":"pub fn new_bitset(usize) -> Self","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Create a new value of `Self` with space for up to `max` bits, all\n initialised to zero.\n","sig":null,"attributes":[{"value":"/ Create a new value of `Self` with space for up to `max` bits, all","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183402,"byte_end":183471,"line_start":35,"line_end":35,"column_start":5,"column_end":74}},{"value":"/ initialised to zero.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183476,"byte_end":183500,"line_start":36,"line_end":36,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183613,"byte_end":183616,"line_start":39,"line_end":39,"column_start":8,"column_end":11},"name":"len","qualname":"::bits::BitSetLike::len","value":"pub fn len(&Self) -> usize","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Return an upper bound on the greatest bit set _plus one_.\n","sig":null,"attributes":[{"value":"/ Return an upper bound on the greatest bit set _plus one_.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183544,"byte_end":183605,"line_start":38,"line_end":38,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183684,"byte_end":183688,"line_start":41,"line_end":41,"column_start":8,"column_end":12},"name":"test","qualname":"::bits::BitSetLike::test","value":"pub fn test(&Self, usize) -> bool","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Test whether the given bit is set.\n","sig":null,"attributes":[{"value":"/ Test whether the given bit is set.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183638,"byte_end":183676,"line_start":40,"line_end":40,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183750,"byte_end":183753,"line_start":43,"line_end":43,"column_start":8,"column_end":11},"name":"set","qualname":"::bits::BitSetLike::set","value":"pub fn set(&mut Self, usize)","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Set the given bit.\n","sig":null,"attributes":[{"value":"/ Set the given bit.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183720,"byte_end":183742,"line_start":42,"line_end":42,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183813,"byte_end":183818,"line_start":45,"line_end":45,"column_start":8,"column_end":13},"name":"clear","qualname":"::bits::BitSetLike::clear","value":"pub fn clear(&mut Self, usize)","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Clear the given bit.\n","sig":null,"attributes":[{"value":"/ Clear the given bit.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183781,"byte_end":183805,"line_start":44,"line_end":44,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":184076,"byte_end":184081,"line_start":51,"line_end":51,"column_start":8,"column_end":13},"name":"count","qualname":"::bits::BitSetLike::count","value":"pub fn count(&Self) -> usize","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Return the number of bits set.","sig":null,"attributes":[{"value":"/ Return the number of bits set.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183846,"byte_end":183880,"line_start":46,"line_end":46,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183885,"byte_end":183888,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ This has a default for backwards compatibility, which simply does a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183893,"byte_end":183964,"line_start":48,"line_end":48,"column_start":5,"column_end":76}},{"value":"/ linear scan through the bits. Implementations are strongly encouraged","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183969,"byte_end":184042,"line_start":49,"line_end":49,"column_start":5,"column_end":78}},{"value":"/ to override this.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":184047,"byte_end":184068,"line_start":50,"line_end":50,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":6080},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":186541,"byte_end":186555,"line_start":166,"line_end":166,"column_start":12,"column_end":26},"name":"BitSetStrategy","qualname":"::bits::BitSetStrategy","value":"BitSetStrategy {  }","parent":null,"children":[{"krate":0,"index":6082},{"krate":0,"index":6083},{"krate":0,"index":6084}],"decl_id":null,"docs":" Generates values as a set of bits between the two bounds.","sig":null,"attributes":[{"value":"/ Generates values as a set of bits between the two bounds.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":186253,"byte_end":186314,"line_start":160,"line_end":160,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":186315,"byte_end":186318,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ Values are generated by uniformly setting individual bits to 0","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":186319,"byte_end":186385,"line_start":162,"line_end":162,"column_start":1,"column_end":67}},{"value":"/ or 1 between the bounds. Shrinking iteratively clears bits.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":186386,"byte_end":186449,"line_start":163,"line_end":163,"column_start":1,"column_end":64}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":186450,"byte_end":186499,"line_start":164,"line_end":164,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":186940,"byte_end":186943,"line_start":178,"line_end":178,"column_start":12,"column_end":15},"name":"new","qualname":"<BitSetStrategy<T>>::new","value":"pub fn new(usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy which generates values where bits between `min`\n (inclusive) and `max` (exclusive) may be set.","sig":null,"attributes":[{"value":"/ Create a strategy which generates values where bits between `min`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":186673,"byte_end":186742,"line_start":173,"line_end":173,"column_start":5,"column_end":74}},{"value":"/ (inclusive) and `max` (exclusive) may be set.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":186747,"byte_end":186796,"line_start":174,"line_end":174,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":186801,"byte_end":186804,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Due to the generics, the functions in the typed submodules are usually","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":186809,"byte_end":186883,"line_start":176,"line_end":176,"column_start":5,"column_end":79}},{"value":"/ preferable to calling this directly.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":186888,"byte_end":186928,"line_start":177,"line_end":177,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":187209,"byte_end":187215,"line_start":188,"line_end":188,"column_start":12,"column_end":18},"name":"masked","qualname":"<BitSetStrategy<T>>::masked","value":"pub fn masked(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy which generates values where any bits set (and only\n those bits) in `mask` may be set.\n","sig":null,"attributes":[{"value":"/ Create a strategy which generates values where any bits set (and only","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":187082,"byte_end":187155,"line_start":186,"line_end":186,"column_start":5,"column_end":78}},{"value":"/ those bits) in `mask` may be set.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":187160,"byte_end":187197,"line_start":187,"line_end":187,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":6093},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188382,"byte_end":188403,"line_start":229,"line_end":229,"column_start":12,"column_end":33},"name":"SampledBitSetStrategy","qualname":"::bits::SampledBitSetStrategy","value":"SampledBitSetStrategy {  }","parent":null,"children":[{"krate":0,"index":6095},{"krate":0,"index":6096},{"krate":0,"index":6097}],"decl_id":null,"docs":" Generates bit sets with a particular number of bits set.","sig":null,"attributes":[{"value":"/ Generates bit sets with a particular number of bits set.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":187958,"byte_end":188018,"line_start":220,"line_end":220,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188019,"byte_end":188022,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ Specifically, this strategy is given both a size range and a bit range. To","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188023,"byte_end":188101,"line_start":222,"line_end":222,"column_start":1,"column_end":79}},{"value":"/ produce a new value, it selects a size, then uniformly selects that many","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188102,"byte_end":188178,"line_start":223,"line_end":223,"column_start":1,"column_end":77}},{"value":"/ bits from within the bit range.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188179,"byte_end":188214,"line_start":224,"line_end":224,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188215,"byte_end":188218,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ Shrinking happens as with [`BitSetStrategy`](struct.BitSetStrategy.html).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188219,"byte_end":188296,"line_start":226,"line_end":226,"column_start":1,"column_end":78}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188321,"byte_end":188370,"line_start":228,"line_end":228,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":189020,"byte_end":189023,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"new","qualname":"<SampledBitSetStrategy<T>>::new","value":"pub fn new<impl Into<SizeRange>: Into<SizeRange>,\n           impl Into<SizeRange>: Into<SizeRange>>(impl Into<SizeRange>,\n                                                  impl Into<SizeRange>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy which generates values where bits within the bounds\n given by `bits` may be set. The number of bits that are set is chosen\n to be in the range given by `size`.","sig":null,"attributes":[{"value":"/ Create a strategy which generates values where bits within the bounds","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188546,"byte_end":188619,"line_start":236,"line_end":236,"column_start":5,"column_end":78}},{"value":"/ given by `bits` may be set. The number of bits that are set is chosen","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188624,"byte_end":188697,"line_start":237,"line_end":237,"column_start":5,"column_end":78}},{"value":"/ to be in the range given by `size`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188702,"byte_end":188741,"line_start":238,"line_end":238,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188746,"byte_end":188749,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ Due to the generics, the functions in the typed submodules are usually","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188754,"byte_end":188828,"line_start":240,"line_end":240,"column_start":5,"column_end":79}},{"value":"/ preferable to calling this directly.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188833,"byte_end":188873,"line_start":241,"line_end":241,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188878,"byte_end":188881,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188886,"byte_end":188899,"line_start":243,"line_end":243,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188904,"byte_end":188907,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Panics if `size` includes a value that is greater than the number of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188912,"byte_end":188984,"line_start":245,"line_end":245,"column_start":5,"column_end":77}},{"value":"/ bits in `bits`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188989,"byte_end":189008,"line_start":246,"line_end":246,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":6104},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":190530,"byte_end":190545,"line_start":299,"line_end":299,"column_start":12,"column_end":27},"name":"BitSetValueTree","qualname":"::bits::BitSetValueTree","value":"BitSetValueTree {  }","parent":null,"children":[{"krate":0,"index":6106},{"krate":0,"index":6107},{"krate":0,"index":6108},{"krate":0,"index":6109}],"decl_id":null,"docs":" Value tree produced by `BitSetStrategy` and `SampledBitSetStrategy`.\n","sig":null,"attributes":[{"value":"/ Value tree produced by `BitSetStrategy` and `SampledBitSetStrategy`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":190416,"byte_end":190488,"line_start":297,"line_end":297,"column_start":1,"column_end":73}}]},{"kind":"Mod","id":{"krate":0,"index":6118},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":192993,"byte_end":192995,"line_start":386,"line_end":386,"column_start":10,"column_end":12},"name":"u8","qualname":"::bits::u8","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":6119},{"krate":0,"index":6120},{"krate":0,"index":6121},{"krate":0,"index":6122},{"krate":0,"index":6123}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":191571,"byte_end":191593,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6126},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":193010,"byte_end":193013,"line_start":387,"line_end":387,"column_start":10,"column_end":13},"name":"u16","qualname":"::bits::u16","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":6127},{"krate":0,"index":6128},{"krate":0,"index":6129},{"krate":0,"index":6130},{"krate":0,"index":6131}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":191571,"byte_end":191593,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6134},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":193029,"byte_end":193032,"line_start":388,"line_end":388,"column_start":10,"column_end":13},"name":"u32","qualname":"::bits::u32","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":6135},{"krate":0,"index":6136},{"krate":0,"index":6137},{"krate":0,"index":6138},{"krate":0,"index":6139}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":191571,"byte_end":191593,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6142},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":193048,"byte_end":193051,"line_start":389,"line_end":389,"column_start":10,"column_end":13},"name":"u64","qualname":"::bits::u64","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":6143},{"krate":0,"index":6144},{"krate":0,"index":6145},{"krate":0,"index":6146},{"krate":0,"index":6147}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":191571,"byte_end":191593,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6150},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":193067,"byte_end":193069,"line_start":390,"line_end":390,"column_start":10,"column_end":12},"name":"i8","qualname":"::bits::i8","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":6151},{"krate":0,"index":6152},{"krate":0,"index":6153},{"krate":0,"index":6154},{"krate":0,"index":6155}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":191571,"byte_end":191593,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6158},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":193084,"byte_end":193087,"line_start":391,"line_end":391,"column_start":10,"column_end":13},"name":"i16","qualname":"::bits::i16","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":6159},{"krate":0,"index":6160},{"krate":0,"index":6161},{"krate":0,"index":6162},{"krate":0,"index":6163}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":191571,"byte_end":191593,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6166},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":193103,"byte_end":193106,"line_start":392,"line_end":392,"column_start":10,"column_end":13},"name":"i32","qualname":"::bits::i32","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":6167},{"krate":0,"index":6168},{"krate":0,"index":6169},{"krate":0,"index":6170},{"krate":0,"index":6171}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":191571,"byte_end":191593,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6174},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":193122,"byte_end":193125,"line_start":393,"line_end":393,"column_start":10,"column_end":13},"name":"i64","qualname":"::bits::i64","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":6175},{"krate":0,"index":6176},{"krate":0,"index":6177},{"krate":0,"index":6178},{"krate":0,"index":6179}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":191571,"byte_end":191593,"line_start":345,"line_end":345,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6182},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":194398,"byte_end":194403,"line_start":430,"line_end":430,"column_start":14,"column_end":19},"name":"usize","qualname":"::bits::usize","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":6183},{"krate":0,"index":6184},{"krate":0,"index":6185},{"krate":0,"index":6186}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":193198,"byte_end":193220,"line_start":397,"line_end":397,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6189},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":194426,"byte_end":194431,"line_start":431,"line_end":431,"column_start":14,"column_end":19},"name":"isize","qualname":"::bits::isize","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":6190},{"krate":0,"index":6191},{"krate":0,"index":6192},{"krate":0,"index":6193}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":193198,"byte_end":193220,"line_start":397,"line_end":397,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6196},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":194482,"byte_end":194488,"line_start":433,"line_end":433,"column_start":14,"column_end":20},"name":"bitset","qualname":"::bits::bitset","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":6197},{"krate":0,"index":6198},{"krate":0,"index":6199},{"krate":0,"index":6200}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":193198,"byte_end":193220,"line_start":397,"line_end":397,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6203},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":194512,"byte_end":194520,"line_start":434,"line_end":434,"column_start":14,"column_end":22},"name":"bool_vec","qualname":"::bits::bool_vec","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","parent":null,"children":[{"krate":0,"index":6204},{"krate":0,"index":6205},{"krate":0,"index":6206},{"krate":0,"index":6207}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":193198,"byte_end":193220,"line_start":397,"line_end":397,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":938},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bool","qualname":"::bool","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","parent":null,"children":[{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":6217},{"krate":0,"index":6220},{"krate":0,"index":6222},{"krate":0,"index":6223},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":949},{"krate":0,"index":6225},{"krate":0,"index":6228},{"krate":0,"index":6230},{"krate":0,"index":6231},{"krate":0,"index":950},{"krate":0,"index":6233},{"krate":0,"index":6236},{"krate":0,"index":6238},{"krate":0,"index":6239},{"krate":0,"index":6241},{"krate":0,"index":6248},{"krate":0,"index":6250},{"krate":0,"index":6251},{"krate":0,"index":6253},{"krate":0,"index":6254},{"krate":0,"index":954},{"krate":0,"index":956}],"decl_id":null,"docs":" Strategies for generating `bool` values.\n","sig":null,"attributes":[{"value":"/ Strategies for generating `bool` values.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":201402,"byte_end":201446,"line_start":10,"line_end":10,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":6217},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":201593,"byte_end":201596,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"Any","qualname":"::bool::Any","value":"","parent":null,"children":[],"decl_id":null,"docs":" The type of the `ANY` constant.\n","sig":null,"attributes":[{"value":"/ The type of the `ANY` constant.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":201516,"byte_end":201551,"line_start":17,"line_end":17,"column_start":1,"column_end":36}}]},{"kind":"Const","id":{"krate":0,"index":944},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":201717,"byte_end":201720,"line_start":24,"line_end":24,"column_start":11,"column_end":14},"name":"ANY","qualname":"::bool::ANY","value":"Any","parent":null,"children":[],"decl_id":null,"docs":" Generates boolean values by picking `true` or `false` uniformly.","sig":null,"attributes":[{"value":"/ Generates boolean values by picking `true` or `false` uniformly.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":201603,"byte_end":201671,"line_start":21,"line_end":21,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":201672,"byte_end":201675,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Shrinks `true` to `false`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":201676,"byte_end":201706,"line_start":23,"line_end":23,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":949},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":202107,"byte_end":202115,"line_start":39,"line_end":39,"column_start":8,"column_end":16},"name":"weighted","qualname":"::bool::weighted","value":"pub fn weighted(f64) -> Weighted","parent":null,"children":[],"decl_id":null,"docs":" Generates boolean values by picking `true` with the given `probability`\n (1.0 = always true, 0.0 = always false).","sig":null,"attributes":[{"value":"/ Generates boolean values by picking `true` with the given `probability`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":201944,"byte_end":202019,"line_start":35,"line_end":35,"column_start":1,"column_end":76}},{"value":"/ (1.0 = always true, 0.0 = always false).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":202020,"byte_end":202064,"line_start":36,"line_end":36,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":202065,"byte_end":202068,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Shrinks `true` to `false`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":202069,"byte_end":202099,"line_start":38,"line_end":38,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":6225},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":202307,"byte_end":202315,"line_start":46,"line_end":46,"column_start":12,"column_end":20},"name":"Weighted","qualname":"::bool::Weighted","value":"","parent":null,"children":[],"decl_id":null,"docs":" The return type from `weighted()`.\n","sig":null,"attributes":[{"value":"/ The return type from `weighted()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":202177,"byte_end":202215,"line_start":43,"line_end":43,"column_start":1,"column_end":39}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":202216,"byte_end":202265,"line_start":44,"line_end":44,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":6233},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":202635,"byte_end":202648,"line_start":59,"line_end":59,"column_start":12,"column_end":25},"name":"BoolValueTree","qualname":"::bool::BoolValueTree","value":"BoolValueTree {  }","parent":null,"children":[{"krate":0,"index":6234},{"krate":0,"index":6235}],"decl_id":null,"docs":" The `ValueTree` to shrink booleans to false.\n","sig":null,"attributes":[{"value":"/ The `ValueTree` to shrink booleans to false.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":202545,"byte_end":202593,"line_start":57,"line_end":57,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":961},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"char","qualname":"::char","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","parent":null,"children":[{"krate":0,"index":962},{"krate":0,"index":965},{"krate":0,"index":968},{"krate":0,"index":971},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":981},{"krate":0,"index":6256},{"krate":0,"index":6261},{"krate":0,"index":6264},{"krate":0,"index":986},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":6267},{"krate":0,"index":6269},{"krate":0,"index":6271},{"krate":0,"index":6273},{"krate":0,"index":994},{"krate":0,"index":999},{"krate":0,"index":1001}],"decl_id":null,"docs":" Strategies for generating `char` values.","sig":null,"attributes":[{"value":"/ Strategies for generating `char` values.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":204960,"byte_end":205004,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":205005,"byte_end":205008,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Unlike most strategies in Proptest, character generation is by default","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":205009,"byte_end":205083,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ biased to particular values known to be difficult to handle in various","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":205084,"byte_end":205158,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/ circumstances.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":205159,"byte_end":205177,"line_start":14,"line_end":14,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":205178,"byte_end":205181,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ The main things of interest are `any()` to generate truly arbitrary","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":205182,"byte_end":205253,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/ characters, and `range()` and `ranges()` to select characters from","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":205254,"byte_end":205324,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"/ inclusive ranges.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":205325,"byte_end":205346,"line_start":18,"line_end":18,"column_start":1,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":977},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":205803,"byte_end":205824,"line_start":37,"line_end":37,"column_start":11,"column_end":32},"name":"DEFAULT_SPECIAL_CHARS","qualname":"::char::DEFAULT_SPECIAL_CHARS","value":"&[char]","parent":null,"children":[],"decl_id":null,"docs":" A default set of characters to consider as \"special\" during character\n generation.","sig":null,"attributes":[{"value":"/ A default set of characters to consider as \"special\" during character","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":205577,"byte_end":205650,"line_start":32,"line_end":32,"column_start":1,"column_end":74}},{"value":"/ generation.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":205651,"byte_end":205666,"line_start":33,"line_end":33,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":205667,"byte_end":205670,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ Most of the characters here were chosen specifically because they are","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":205671,"byte_end":205744,"line_start":35,"line_end":35,"column_start":1,"column_end":74}},{"value":"/ difficult to handle in particular contexts.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":205745,"byte_end":205792,"line_start":36,"line_end":36,"column_start":1,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":978},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":206719,"byte_end":206743,"line_start":57,"line_end":57,"column_start":11,"column_end":35},"name":"DEFAULT_PREFERRED_RANGES","qualname":"::char::DEFAULT_PREFERRED_RANGES","value":"&[CharRange]","parent":null,"children":[],"decl_id":null,"docs":" A default sequence of ranges used preferentially when generating random\n characters.\n","sig":null,"attributes":[{"value":"/ A default sequence of ranges used preferentially when generating random","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":206617,"byte_end":206692,"line_start":55,"line_end":55,"column_start":1,"column_end":76}},{"value":"/ characters.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":206693,"byte_end":206708,"line_start":56,"line_end":56,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":979},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":208141,"byte_end":208152,"line_start":93,"line_end":93,"column_start":8,"column_end":19},"name":"select_char","qualname":"::char::select_char","value":"pub fn select_char<impl Rng: Rng>(&mut impl Rng, &[char], &[CharRange],\n                                  &[CharRange]) -> char","parent":null,"children":[],"decl_id":null,"docs":" Selects a random character the way `CharStrategy` does.","sig":null,"attributes":[{"value":"/ Selects a random character the way `CharStrategy` does.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":206909,"byte_end":206968,"line_start":68,"line_end":68,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":206969,"byte_end":206972,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ If `special` is non-empty, there is a 50% chance that a character from this","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":206973,"byte_end":207052,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/ array is chosen randomly, and will be returned if that character falls","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207053,"byte_end":207127,"line_start":71,"line_end":71,"column_start":1,"column_end":75}},{"value":"/ within `ranges`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207128,"byte_end":207148,"line_start":72,"line_end":72,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207149,"byte_end":207152,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ If `preferred` is non-empty, there is a 50% chance that any generation","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207153,"byte_end":207227,"line_start":74,"line_end":74,"column_start":1,"column_end":75}},{"value":"/ which gets past the `special` step picks a random element from this list,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207228,"byte_end":207305,"line_start":75,"line_end":75,"column_start":1,"column_end":78}},{"value":"/ then a random character from within that range (both endpoints inclusive).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207306,"byte_end":207384,"line_start":76,"line_end":76,"column_start":1,"column_end":79}},{"value":"/ That character will be returned if it falls within `ranges`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207385,"byte_end":207449,"line_start":77,"line_end":77,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207450,"byte_end":207453,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ In all other cases, an element is picked randomly from `ranges` and a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207454,"byte_end":207527,"line_start":79,"line_end":79,"column_start":1,"column_end":74}},{"value":"/ random character within the range (both endpoints inclusive) is chosen and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207528,"byte_end":207606,"line_start":80,"line_end":80,"column_start":1,"column_end":79}},{"value":"/ returned.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207607,"byte_end":207620,"line_start":81,"line_end":81,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207621,"byte_end":207624,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ Notice that in all cases, `ranges` completely defines the set of characters","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207625,"byte_end":207704,"line_start":83,"line_end":83,"column_start":1,"column_end":80}},{"value":"/ that can possibly be defined.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207705,"byte_end":207738,"line_start":84,"line_end":84,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207739,"byte_end":207742,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ It is legal for ranges in all cases to contain non-characters.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207743,"byte_end":207809,"line_start":86,"line_end":86,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207810,"byte_end":207813,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ Both `preferred` and `ranges` bias selection towards characters in smaller","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207814,"byte_end":207892,"line_start":88,"line_end":88,"column_start":1,"column_end":79}},{"value":"/ ranges. This is deliberate. `preferred` is usually tuned to select","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207893,"byte_end":207963,"line_start":89,"line_end":89,"column_start":1,"column_end":71}},{"value":"/ particular characters anyway. `ranges` is usually derived from some","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":207964,"byte_end":208035,"line_start":90,"line_end":90,"column_start":1,"column_end":72}},{"value":"/ external property, and the fact that a range is small often means it is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":208036,"byte_end":208111,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/ more interesting.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":208112,"byte_end":208133,"line_start":92,"line_end":92,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":6256},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":211293,"byte_end":211305,"line_start":173,"line_end":173,"column_start":12,"column_end":24},"name":"CharStrategy","qualname":"::char::CharStrategy","value":"CharStrategy {  }","parent":null,"children":[{"krate":0,"index":6258},{"krate":0,"index":6259},{"krate":0,"index":6260}],"decl_id":null,"docs":" Strategy for generating `char`s.","sig":null,"attributes":[{"value":"/ Strategy for generating `char`s.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":209797,"byte_end":209833,"line_start":147,"line_end":147,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":209834,"byte_end":209837,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ Character selection is more sophisticated than integer selection. Naïve","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":209838,"byte_end":209914,"line_start":149,"line_end":149,"column_start":1,"column_end":76}},{"value":"/ selection (particularly in the larger context of generating strings) would","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":209915,"byte_end":209993,"line_start":150,"line_end":150,"column_start":1,"column_end":79}},{"value":"/ result in starting inputs like `ꂡ螧轎ቶᢹ糦狥芹ᘆ㶏曊ᒀ踔虙ჲ` and \"simplified\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":209994,"byte_end":210093,"line_start":151,"line_end":151,"column_start":1,"column_end":70}},{"value":"/ inputs consisting mostly of control characters. It also has difficulty","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":210094,"byte_end":210168,"line_start":152,"line_end":152,"column_start":1,"column_end":75}},{"value":"/ locating edge cases, since the vast majority of code points (such as the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":210169,"byte_end":210245,"line_start":153,"line_end":153,"column_start":1,"column_end":77}},{"value":"/ enormous CJK regions) don't cause problems for anything with even basic","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":210246,"byte_end":210321,"line_start":154,"line_end":154,"column_start":1,"column_end":76}},{"value":"/ Unicode support.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":210322,"byte_end":210342,"line_start":155,"line_end":155,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":210343,"byte_end":210346,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ Instead, character selection is always based on explicit ranges, and is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":210347,"byte_end":210422,"line_start":157,"line_end":157,"column_start":1,"column_end":76}},{"value":"/ designed to bias to specifically chosen characters and character ranges to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":210423,"byte_end":210501,"line_start":158,"line_end":158,"column_start":1,"column_end":79}},{"value":"/ produce inputs that are both more useful and easier for humans to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":210502,"byte_end":210571,"line_start":159,"line_end":159,"column_start":1,"column_end":70}},{"value":"/ understand. There are also hard-wired simplification targets based on ASCII","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":210572,"byte_end":210651,"line_start":160,"line_end":160,"column_start":1,"column_end":80}},{"value":"/ instead of simply simplifying towards NUL to avoid problematic inputs being","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":210652,"byte_end":210731,"line_start":161,"line_end":161,"column_start":1,"column_end":80}},{"value":"/ reduced to a bunch of NUL characters.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":210732,"byte_end":210773,"line_start":162,"line_end":162,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":210774,"byte_end":210777,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ Shrinking never crosses ranges. If you have a complex range like `[A-Za-z]`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":210778,"byte_end":210857,"line_start":164,"line_end":164,"column_start":1,"column_end":80}},{"value":"/ and the starting point `x` is chosen, it will not shrink to the first `A-Z`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":210858,"byte_end":210937,"line_start":165,"line_end":165,"column_start":1,"column_end":80}},{"value":"/ group, but rather simply to `a`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":210938,"byte_end":210974,"line_start":166,"line_end":166,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":210975,"byte_end":210978,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ The usual way to get instances of this class is with the module-level `ANY`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":210979,"byte_end":211058,"line_start":168,"line_end":168,"column_start":1,"column_end":80}},{"value":"/ constant or `range` function. Directly constructing a `CharStrategy` is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":211059,"byte_end":211134,"line_start":169,"line_end":169,"column_start":1,"column_end":76}},{"value":"/ only necessary for complex ranges or to override the default biases.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":211135,"byte_end":211207,"line_start":170,"line_end":170,"column_start":1,"column_end":73}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":211232,"byte_end":211281,"line_start":172,"line_end":172,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":211633,"byte_end":211636,"line_start":184,"line_end":184,"column_start":12,"column_end":15},"name":"new","qualname":"<CharStrategy>::new","value":"pub fn new(Cow, Cow, Cow) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `CharStrategy` with the parameters it will pass to the\n function underlying `select_char()`.","sig":null,"attributes":[{"value":"/ Construct a new `CharStrategy` with the parameters it will pass to the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":211448,"byte_end":211522,"line_start":180,"line_end":180,"column_start":5,"column_end":79}},{"value":"/ function underlying `select_char()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":211527,"byte_end":211567,"line_start":181,"line_end":181,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":211572,"byte_end":211575,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ All arguments as per `select_char()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":211580,"byte_end":211621,"line_start":183,"line_end":183,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":989},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":211961,"byte_end":211973,"line_start":197,"line_end":197,"column_start":12,"column_end":24},"name":"new_borrowed","qualname":"<CharStrategy>::new_borrowed","value":"pub fn new_borrowed(&'a [char], &'a [CharRange], &'a [CharRange]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Same as `CharStrategy::new()` but using `Cow::Borrowed` for all parts.\n","sig":null,"attributes":[{"value":"/ Same as `CharStrategy::new()` but using `Cow::Borrowed` for all parts.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":211875,"byte_end":211949,"line_start":196,"line_end":196,"column_start":5,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":991},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":212417,"byte_end":212420,"line_start":214,"line_end":214,"column_start":8,"column_end":11},"name":"any","qualname":"::char::any","value":"pub fn any() -> CharStrategy","parent":null,"children":[],"decl_id":null,"docs":" Creates a `CharStrategy` which picks from literally any character, with the\n default biases.\n","sig":null,"attributes":[{"value":"/ Creates a `CharStrategy` which picks from literally any character, with the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":212310,"byte_end":212389,"line_start":212,"line_end":212,"column_start":1,"column_end":80}},{"value":"/ default biases.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":212390,"byte_end":212409,"line_start":213,"line_end":213,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":992},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":212767,"byte_end":212772,"line_start":224,"line_end":224,"column_start":8,"column_end":13},"name":"range","qualname":"::char::range","value":"pub fn range(char, char) -> CharStrategy","parent":null,"children":[],"decl_id":null,"docs":" Creates a `CharStrategy` which selects characters within the given\n endpoints, inclusive, using the default biases.\n","sig":null,"attributes":[{"value":"/ Creates a `CharStrategy` which selects characters within the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":212637,"byte_end":212707,"line_start":222,"line_end":222,"column_start":1,"column_end":71}},{"value":"/ endpoints, inclusive, using the default biases.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":212708,"byte_end":212759,"line_start":223,"line_end":223,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":993},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":213145,"byte_end":213151,"line_start":234,"line_end":234,"column_start":8,"column_end":14},"name":"ranges","qualname":"::char::ranges","value":"pub fn ranges(Cow<, [CharRange]>) -> CharStrategy","parent":null,"children":[],"decl_id":null,"docs":" Creates a `CharStrategy` which selects characters within the given ranges,\n all inclusive, using the default biases.\n","sig":null,"attributes":[{"value":"/ Creates a `CharStrategy` which selects characters within the given ranges,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":213014,"byte_end":213092,"line_start":232,"line_end":232,"column_start":1,"column_end":79}},{"value":"/ all inclusive, using the default biases.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":213093,"byte_end":213137,"line_start":233,"line_end":233,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":6267},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":213449,"byte_end":213462,"line_start":244,"line_end":244,"column_start":12,"column_end":25},"name":"CharValueTree","qualname":"::char::CharValueTree","value":"CharValueTree {  }","parent":null,"children":[{"krate":0,"index":6268}],"decl_id":null,"docs":" The `ValueTree` corresponding to `CharStrategy`.\n","sig":null,"attributes":[{"value":"/ The `ValueTree` corresponding to `CharStrategy`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":213355,"byte_end":213407,"line_start":242,"line_end":242,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":1006},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"collection","qualname":"::collection","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","parent":null,"children":[{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1036},{"krate":0,"index":1039},{"krate":0,"index":1042},{"krate":0,"index":1045},{"krate":0,"index":1048},{"krate":0,"index":1051},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1058},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1065},{"krate":0,"index":1068},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":6274},{"krate":0,"index":6277},{"krate":0,"index":6279},{"krate":0,"index":6280},{"krate":0,"index":6283},{"krate":0,"index":6284},{"krate":0,"index":6286},{"krate":0,"index":6289},{"krate":0,"index":1076},{"krate":0,"index":1078},{"krate":0,"index":1080},{"krate":0,"index":1094},{"krate":0,"index":1096},{"krate":0,"index":1098},{"krate":0,"index":1100},{"krate":0,"index":1102},{"krate":0,"index":1104},{"krate":0,"index":1106},{"krate":0,"index":6291},{"krate":0,"index":6295},{"krate":0,"index":6298},{"krate":0,"index":1109},{"krate":0,"index":6305},{"krate":0,"index":6307},{"krate":0,"index":6309},{"krate":0,"index":6310},{"krate":0,"index":6301},{"krate":0,"index":6320},{"krate":0,"index":6324},{"krate":0,"index":6327},{"krate":0,"index":6330},{"krate":0,"index":6334},{"krate":0,"index":6337},{"krate":0,"index":6312},{"krate":0,"index":6317},{"krate":0,"index":1112},{"krate":0,"index":6347},{"krate":0,"index":6349},{"krate":0,"index":6351},{"krate":0,"index":6352},{"krate":0,"index":6343},{"krate":0,"index":6362},{"krate":0,"index":6366},{"krate":0,"index":6369},{"krate":0,"index":6372},{"krate":0,"index":6376},{"krate":0,"index":6379},{"krate":0,"index":6354},{"krate":0,"index":6359},{"krate":0,"index":1115},{"krate":0,"index":6389},{"krate":0,"index":6391},{"krate":0,"index":6393},{"krate":0,"index":6394},{"krate":0,"index":6385},{"krate":0,"index":6404},{"krate":0,"index":6408},{"krate":0,"index":6411},{"krate":0,"index":6414},{"krate":0,"index":6418},{"krate":0,"index":6421},{"krate":0,"index":6396},{"krate":0,"index":6401},{"krate":0,"index":1118},{"krate":0,"index":6431},{"krate":0,"index":6433},{"krate":0,"index":6435},{"krate":0,"index":6436},{"krate":0,"index":6427},{"krate":0,"index":6438},{"krate":0,"index":6441},{"krate":0,"index":6443},{"krate":0,"index":6445},{"krate":0,"index":1121},{"krate":0,"index":6454},{"krate":0,"index":6458},{"krate":0,"index":6461},{"krate":0,"index":6464},{"krate":0,"index":6468},{"krate":0,"index":6471},{"krate":0,"index":6446},{"krate":0,"index":6451},{"krate":0,"index":1124},{"krate":0,"index":6481},{"krate":0,"index":6483},{"krate":0,"index":6485},{"krate":0,"index":6486},{"krate":0,"index":6477},{"krate":0,"index":1127},{"krate":0,"index":6496},{"krate":0,"index":6500},{"krate":0,"index":6503},{"krate":0,"index":6506},{"krate":0,"index":6510},{"krate":0,"index":6513},{"krate":0,"index":6488},{"krate":0,"index":6493},{"krate":0,"index":1130},{"krate":0,"index":6524},{"krate":0,"index":6526},{"krate":0,"index":6528},{"krate":0,"index":6529},{"krate":0,"index":6519},{"krate":0,"index":1133},{"krate":0,"index":6541},{"krate":0,"index":6546},{"krate":0,"index":6550},{"krate":0,"index":6554},{"krate":0,"index":6559},{"krate":0,"index":6563},{"krate":0,"index":6531},{"krate":0,"index":6537},{"krate":0,"index":1137},{"krate":0,"index":6575},{"krate":0,"index":6577},{"krate":0,"index":6579},{"krate":0,"index":6580},{"krate":0,"index":6570},{"krate":0,"index":1141},{"krate":0,"index":6592},{"krate":0,"index":6597},{"krate":0,"index":6601},{"krate":0,"index":6605},{"krate":0,"index":6610},{"krate":0,"index":6614},{"krate":0,"index":6582},{"krate":0,"index":6588},{"krate":0,"index":1145},{"krate":0,"index":6621},{"krate":0,"index":6628},{"krate":0,"index":6630},{"krate":0,"index":6631},{"krate":0,"index":6633},{"krate":0,"index":6640},{"krate":0,"index":6643},{"krate":0,"index":1149},{"krate":0,"index":1154},{"krate":0,"index":1160}],"decl_id":null,"docs":" Strategies for generating `std::collections` of values.\n","sig":null,"attributes":[{"value":"/ Strategies for generating `std::collections` of values.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":218434,"byte_end":218493,"line_start":10,"line_end":10,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":6274},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":219492,"byte_end":219501,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"name":"SizeRange","qualname":"::collection::SizeRange","value":"","parent":null,"children":[],"decl_id":null,"docs":" The minimum and maximum range/bounds on the size of a collection.\n The interval must form a subset of `[0, std::usize::MAX)`.","sig":null,"attributes":[{"value":"/ The minimum and maximum range/bounds on the size of a collection.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":219133,"byte_end":219202,"line_start":34,"line_end":34,"column_start":1,"column_end":70}},{"value":"/ The interval must form a subset of `[0, std::usize::MAX)`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":219203,"byte_end":219265,"line_start":35,"line_end":35,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":219266,"byte_end":219269,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ A value like `0..=std::usize::MAX` will still be accepted but will silently","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":219270,"byte_end":219349,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ truncate the maximum to `std::usize::MAX - 1`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":219350,"byte_end":219400,"line_start":38,"line_end":38,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":219401,"byte_end":219404,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ The `Default` is `0..100`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":219405,"byte_end":219435,"line_start":40,"line_end":40,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":1076},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":219596,"byte_end":219606,"line_start":45,"line_end":45,"column_start":8,"column_end":18},"name":"size_range","qualname":"::collection::size_range","value":"pub fn size_range<impl Into<SizeRange>: Into<SizeRange>>(impl Into<SizeRange>)\n-> SizeRange","parent":null,"children":[],"decl_id":null,"docs":" Creates a `SizeRange` from some value that is convertible into it.\n","sig":null,"attributes":[{"value":"/ Creates a `SizeRange` from some value that is convertible into it.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":219518,"byte_end":219588,"line_start":44,"line_end":44,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":219921,"byte_end":219924,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"new","qualname":"<SizeRange>::new","value":"pub fn new(RangeInclusive<usize>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `SizeBounds` from a `RangeInclusive<usize>`.\n","sig":null,"attributes":[{"value":"/ Creates a `SizeBounds` from a `RangeInclusive<usize>`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":219851,"byte_end":219909,"line_start":57,"line_end":57,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":220296,"byte_end":220300,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"with","qualname":"<SizeRange>::with","value":"pub fn with<X>(Self, X) -> (Self, X)","parent":null,"children":[],"decl_id":null,"docs":" Merges self together with some other argument producing a product\n type expected by some implementations of `A: Arbitrary` in\n `A::Parameters`. This can be more ergonomic to work with and may\n help type inference.\n","sig":null,"attributes":[{"value":"/ Merges self together with some other argument producing a product","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":220046,"byte_end":220115,"line_start":64,"line_end":64,"column_start":5,"column_end":74}},{"value":"/ type expected by some implementations of `A: Arbitrary` in","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":220120,"byte_end":220182,"line_start":65,"line_end":65,"column_start":5,"column_end":67}},{"value":"/ `A::Parameters`. This can be more ergonomic to work with and may","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":220187,"byte_end":220255,"line_start":66,"line_end":66,"column_start":5,"column_end":73}},{"value":"/ help type inference.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":220260,"byte_end":220284,"line_start":67,"line_end":67,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":220671,"byte_end":220675,"line_start":76,"line_end":76,"column_start":12,"column_end":16},"name":"lift","qualname":"<SizeRange>::lift","value":"pub fn lift<X: Default>(Self) -> (Self, X)","parent":null,"children":[],"decl_id":null,"docs":" Merges self together with some other argument generated with a\n default value producing a product type expected by some\n implementations of `A: Arbitrary` in `A::Parameters`.\n This can be more ergonomic to work with and may help type inference.\n","sig":null,"attributes":[{"value":"/ Merges self together with some other argument generated with a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":220390,"byte_end":220456,"line_start":72,"line_end":72,"column_start":5,"column_end":71}},{"value":"/ default value producing a product type expected by some","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":220461,"byte_end":220520,"line_start":73,"line_end":73,"column_start":5,"column_end":64}},{"value":"/ implementations of `A: Arbitrary` in `A::Parameters`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":220525,"byte_end":220582,"line_start":74,"line_end":74,"column_start":5,"column_end":62}},{"value":"/ This can be more ergonomic to work with and may help type inference.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":220587,"byte_end":220659,"line_start":75,"line_end":75,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":6291},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":224033,"byte_end":224044,"line_start":199,"line_end":199,"column_start":12,"column_end":23},"name":"VecStrategy","qualname":"::collection::VecStrategy","value":"VecStrategy {  }","parent":null,"children":[{"krate":0,"index":6293},{"krate":0,"index":6294}],"decl_id":null,"docs":" Strategy to create `Vec`s with a length in a certain range.","sig":null,"attributes":[{"value":"/ Strategy to create `Vec`s with a length in a certain range.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":223824,"byte_end":223887,"line_start":194,"line_end":194,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":223888,"byte_end":223891,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ Created by the `vec()` function in the same module.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":223892,"byte_end":223947,"line_start":196,"line_end":196,"column_start":1,"column_end":56}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":223948,"byte_end":223997,"line_start":197,"line_end":197,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":1109},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":224386,"byte_end":224389,"line_start":209,"line_end":209,"column_start":8,"column_end":11},"name":"vec","qualname":"::collection::vec","value":"pub fn vec<T: Strategy,\n           impl Into<SizeRange>: Into<SizeRange>>(T, impl Into<SizeRange>)\n-> VecStrategy<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `Vec`s containing elements drawn from\n `element` and with a size range given by `size`.","sig":null,"attributes":[{"value":"/ Create a strategy to generate `Vec`s containing elements drawn from","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":224100,"byte_end":224171,"line_start":204,"line_end":204,"column_start":1,"column_end":72}},{"value":"/ `element` and with a size range given by `size`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":224172,"byte_end":224224,"line_start":205,"line_end":205,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":224225,"byte_end":224228,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ To make a `Vec` with a fixed number of elements, each with its own","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":224229,"byte_end":224299,"line_start":207,"line_end":207,"column_start":1,"column_end":71}},{"value":"/ strategy, you can instead make a `Vec` of strategies (boxed if necessary).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":224300,"byte_end":224378,"line_start":208,"line_end":208,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":6320},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":224890,"byte_end":224906,"line_start":229,"line_end":229,"column_start":16,"column_end":32},"name":"VecDequeStrategy","qualname":"::collection::VecDequeStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `VecDeque`s with a length in a certain range.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":6330},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":225122,"byte_end":225139,"line_start":234,"line_end":234,"column_start":16,"column_end":33},"name":"VecDequeValueTree","qualname":"::collection::VecDequeValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `VecDequeStrategy`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1112},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":225389,"byte_end":225398,"line_start":241,"line_end":241,"column_start":8,"column_end":17},"name":"vec_deque","qualname":"::collection::vec_deque","value":"pub fn vec_deque<T: Strategy,\n                 impl Into<SizeRange>: Into<SizeRange>>(T,\n                                                        impl Into<SizeRange>)\n-> VecDequeStrategy<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `VecDeque`s containing elements drawn from\n `element` and with a size range given by `size`.\n","sig":null,"attributes":[{"value":"/ Create a strategy to generate `VecDeque`s containing elements drawn from","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":225252,"byte_end":225328,"line_start":239,"line_end":239,"column_start":1,"column_end":77}},{"value":"/ `element` and with a size range given by `size`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":225329,"byte_end":225381,"line_start":240,"line_end":240,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":6362},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":225903,"byte_end":225921,"line_start":259,"line_end":259,"column_start":16,"column_end":34},"name":"LinkedListStrategy","qualname":"::collection::LinkedListStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `LinkedList`s with a length in a certain range.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":6372},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":226138,"byte_end":226157,"line_start":264,"line_end":264,"column_start":16,"column_end":35},"name":"LinkedListValueTree","qualname":"::collection::LinkedListValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `LinkedListStrategy`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1115},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":226408,"byte_end":226419,"line_start":271,"line_end":271,"column_start":8,"column_end":19},"name":"linked_list","qualname":"::collection::linked_list","value":"pub fn linked_list<T: Strategy,\n                   impl Into<SizeRange>: Into<SizeRange>>(T,\n                                                          impl Into<SizeRange>)\n-> LinkedListStrategy<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `LinkedList`s containing elements drawn from\n `element` and with a size range given by `size`.\n","sig":null,"attributes":[{"value":"/ Create a strategy to generate `LinkedList`s containing elements drawn from","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":226269,"byte_end":226347,"line_start":269,"line_end":269,"column_start":1,"column_end":79}},{"value":"/ `element` and with a size range given by `size`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":226348,"byte_end":226400,"line_start":270,"line_end":270,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":6404},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":226922,"byte_end":226940,"line_start":289,"line_end":289,"column_start":16,"column_end":34},"name":"BinaryHeapStrategy","qualname":"::collection::BinaryHeapStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `BinaryHeap`s with a length in a certain range.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":6414},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":227178,"byte_end":227197,"line_start":294,"line_end":294,"column_start":16,"column_end":35},"name":"BinaryHeapValueTree","qualname":"::collection::BinaryHeapValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `BinaryHeapStrategy`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1118},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":227469,"byte_end":227480,"line_start":301,"line_end":301,"column_start":8,"column_end":19},"name":"binary_heap","qualname":"::collection::binary_heap","value":"pub fn binary_heap<T: Strategy,\n                   impl Into<SizeRange>: Into<SizeRange>>(T,\n                                                          impl Into<SizeRange>)\n-> BinaryHeapStrategy<T> where T::Value: Ord","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `BinaryHeap`s containing elements drawn from\n `element` and with a size range given by `size`.\n","sig":null,"attributes":[{"value":"/ Create a strategy to generate `BinaryHeap`s containing elements drawn from","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":227330,"byte_end":227408,"line_start":299,"line_end":299,"column_start":1,"column_end":79}},{"value":"/ `element` and with a size range given by `size`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":227409,"byte_end":227461,"line_start":300,"line_end":300,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":6454},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":228364,"byte_end":228379,"line_start":335,"line_end":335,"column_start":16,"column_end":31},"name":"HashSetStrategy","qualname":"::collection::HashSetStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `HashSet`s with a length in a certain range.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/macros.rs","byte_start":7706,"byte_end":7717,"line_start":58,"line_end":58,"column_start":11,"column_end":22}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":6464},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":228643,"byte_end":228659,"line_start":340,"line_end":340,"column_start":16,"column_end":32},"name":"HashSetValueTree","qualname":"::collection::HashSetValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `HashSetStrategy`.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/macros.rs","byte_start":7890,"byte_end":7901,"line_start":64,"line_end":64,"column_start":11,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":1124},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":229169,"byte_end":229177,"line_start":352,"line_end":352,"column_start":8,"column_end":16},"name":"hash_set","qualname":"::collection::hash_set","value":"pub fn hash_set<T: Strategy,\n                impl Into<SizeRange>: Into<SizeRange>>(T,\n                                                       impl Into<SizeRange>)\n-> HashSetStrategy<T> where T::Value: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `HashSet`s containing elements drawn from\n `element` and with a size range given by `size`.","sig":null,"attributes":[{"value":"/ Create a strategy to generate `HashSet`s containing elements drawn from","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":228821,"byte_end":228896,"line_start":345,"line_end":345,"column_start":1,"column_end":76}},{"value":"/ `element` and with a size range given by `size`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":228897,"byte_end":228949,"line_start":346,"line_end":346,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":228950,"byte_end":228953,"line_start":347,"line_end":347,"column_start":1,"column_end":4}},{"value":"/ This strategy will implicitly do local rejects to ensure that the `HashSet`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":228954,"byte_end":229033,"line_start":348,"line_end":348,"column_start":1,"column_end":80}},{"value":"/ has at least the minimum number of elements, in case `element` should","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":229034,"byte_end":229107,"line_start":349,"line_end":349,"column_start":1,"column_end":74}},{"value":"/ produce duplicate values.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":229108,"byte_end":229137,"line_start":350,"line_end":350,"column_start":1,"column_end":30}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":229138,"byte_end":229161,"line_start":351,"line_end":351,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":6496},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":230055,"byte_end":230071,"line_start":385,"line_end":385,"column_start":16,"column_end":32},"name":"BTreeSetStrategy","qualname":"::collection::BTreeSetStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `BTreeSet`s with a length in a certain range.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":6506},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":230332,"byte_end":230349,"line_start":390,"line_end":390,"column_start":16,"column_end":33},"name":"BTreeSetValueTree","qualname":"::collection::BTreeSetValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `BTreeSetStrategy`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1130},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":230833,"byte_end":230842,"line_start":401,"line_end":401,"column_start":8,"column_end":17},"name":"btree_set","qualname":"::collection::btree_set","value":"pub fn btree_set<T: Strategy,\n                 impl Into<SizeRange>: Into<SizeRange>>(T,\n                                                        impl Into<SizeRange>)\n-> BTreeSetStrategy<T> where T::Value: Ord","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `BTreeSet`s containing elements drawn from\n `element` and with a size range given by `size`.","sig":null,"attributes":[{"value":"/ Create a strategy to generate `BTreeSet`s containing elements drawn from","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":230507,"byte_end":230583,"line_start":395,"line_end":395,"column_start":1,"column_end":77}},{"value":"/ `element` and with a size range given by `size`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":230584,"byte_end":230636,"line_start":396,"line_end":396,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":230637,"byte_end":230640,"line_start":397,"line_end":397,"column_start":1,"column_end":4}},{"value":"/ This strategy will implicitly do local rejects to ensure that the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":230641,"byte_end":230710,"line_start":398,"line_end":398,"column_start":1,"column_end":70}},{"value":"/ `BTreeSet` has at least the minimum number of elements, in case `element`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":230711,"byte_end":230788,"line_start":399,"line_end":399,"column_start":1,"column_end":78}},{"value":"/ should produce duplicate values.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":230789,"byte_end":230825,"line_start":400,"line_end":400,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":6541},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":231806,"byte_end":231821,"line_start":438,"line_end":438,"column_start":16,"column_end":31},"name":"HashMapStrategy","qualname":"::collection::HashMapStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `HashMap`s with a length in a certain range.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/macros.rs","byte_start":7706,"byte_end":7717,"line_start":58,"line_end":58,"column_start":11,"column_end":22}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":6554},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":232140,"byte_end":232156,"line_start":445,"line_end":445,"column_start":16,"column_end":32},"name":"HashMapValueTree","qualname":"::collection::HashMapValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `HashMapStrategy`.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/macros.rs","byte_start":7890,"byte_end":7901,"line_start":64,"line_end":64,"column_start":11,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":1137},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":232770,"byte_end":232778,"line_start":460,"line_end":460,"column_start":8,"column_end":16},"name":"hash_map","qualname":"::collection::hash_map","value":"pub fn hash_map<K: Strategy, V: Strategy,\n                impl Into<SizeRange>: Into<SizeRange>>(K, V,\n                                                       impl Into<SizeRange>)\n-> HashMapStrategy<K, V> where K::Value: Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `HashMap`s containing keys and values drawn\n from `key` and `value` respectively, and with a size within the given\n range.","sig":null,"attributes":[{"value":"/ Create a strategy to generate `HashMap`s containing keys and values drawn","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":232392,"byte_end":232469,"line_start":452,"line_end":452,"column_start":1,"column_end":78}},{"value":"/ from `key` and `value` respectively, and with a size within the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":232470,"byte_end":232543,"line_start":453,"line_end":453,"column_start":1,"column_end":74}},{"value":"/ range.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":232544,"byte_end":232554,"line_start":454,"line_end":454,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":232555,"byte_end":232558,"line_start":455,"line_end":455,"column_start":1,"column_end":4}},{"value":"/ This strategy will implicitly do local rejects to ensure that the `HashMap`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":232559,"byte_end":232638,"line_start":456,"line_end":456,"column_start":1,"column_end":80}},{"value":"/ has at least the minimum number of elements, in case `key` should produce","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":232639,"byte_end":232716,"line_start":457,"line_end":457,"column_start":1,"column_end":78}},{"value":"/ duplicate values.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":232717,"byte_end":232738,"line_start":458,"line_end":458,"column_start":1,"column_end":22}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":232739,"byte_end":232762,"line_start":459,"line_end":459,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":6592},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":233685,"byte_end":233701,"line_start":495,"line_end":495,"column_start":16,"column_end":32},"name":"BTreeMapStrategy","qualname":"::collection::BTreeMapStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `BTreeMap`s with a length in a certain range.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":6605},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":234017,"byte_end":234034,"line_start":502,"line_end":502,"column_start":16,"column_end":33},"name":"BTreeMapValueTree","qualname":"::collection::BTreeMapValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `BTreeMapStrategy`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1145},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":234622,"byte_end":234631,"line_start":516,"line_end":516,"column_start":8,"column_end":17},"name":"btree_map","qualname":"::collection::btree_map","value":"pub fn btree_map<K: Strategy, V: Strategy,\n                 impl Into<SizeRange>: Into<SizeRange>>(K, V,\n                                                        impl Into<SizeRange>)\n-> BTreeMapStrategy<K, V> where K::Value: Ord","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy to generate `BTreeMap`s containing keys and values drawn\n from `key` and `value` respectively, and with a size within the given\n range.","sig":null,"attributes":[{"value":"/ Create a strategy to generate `BTreeMap`s containing keys and values drawn","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":234266,"byte_end":234344,"line_start":509,"line_end":509,"column_start":1,"column_end":79}},{"value":"/ from `key` and `value` respectively, and with a size within the given","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":234345,"byte_end":234418,"line_start":510,"line_end":510,"column_start":1,"column_end":74}},{"value":"/ range.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":234419,"byte_end":234429,"line_start":511,"line_end":511,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":234430,"byte_end":234433,"line_start":512,"line_end":512,"column_start":1,"column_end":4}},{"value":"/ This strategy will implicitly do local rejects to ensure that the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":234434,"byte_end":234503,"line_start":513,"line_end":513,"column_start":1,"column_end":70}},{"value":"/ `BTreeMap` has at least the minimum number of elements, in case `key`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":234504,"byte_end":234577,"line_start":514,"line_end":514,"column_start":1,"column_end":74}},{"value":"/ should produce duplicate values.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":234578,"byte_end":234614,"line_start":515,"line_end":515,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":6633},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":235181,"byte_end":235193,"line_start":540,"line_end":540,"column_start":12,"column_end":24},"name":"VecValueTree","qualname":"::collection::VecValueTree","value":"VecValueTree {  }","parent":null,"children":[{"krate":0,"index":6635},{"krate":0,"index":6636},{"krate":0,"index":6637},{"krate":0,"index":6638},{"krate":0,"index":6639}],"decl_id":null,"docs":" `ValueTree` corresponding to `VecStrategy`.\n","sig":null,"attributes":[{"value":"/ `ValueTree` corresponding to `VecStrategy`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":235098,"byte_end":235145,"line_start":538,"line_end":538,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":1168},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"num","qualname":"::num","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","parent":null,"children":[{"krate":0,"index":1169},{"krate":0,"index":1172},{"krate":0,"index":1175},{"krate":0,"index":1176},{"krate":0,"index":1179},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1186},{"krate":0,"index":1187},{"krate":0,"index":1189},{"krate":0,"index":1191},{"krate":0,"index":6646},{"krate":0,"index":6713},{"krate":0,"index":6780},{"krate":0,"index":6847},{"krate":0,"index":6914},{"krate":0,"index":6981},{"krate":0,"index":7048},{"krate":0,"index":7108},{"krate":0,"index":7168},{"krate":0,"index":7228},{"krate":0,"index":7288},{"krate":0,"index":7348},{"krate":0,"index":7408},{"krate":0,"index":7410},{"krate":0,"index":7411},{"krate":0,"index":7412},{"krate":0,"index":7415},{"krate":0,"index":7416},{"krate":0,"index":7418},{"krate":0,"index":7420},{"krate":0,"index":7422},{"krate":0,"index":7424},{"krate":0,"index":7427},{"krate":0,"index":7440},{"krate":0,"index":7442},{"krate":0,"index":7444},{"krate":0,"index":7446},{"krate":0,"index":7448},{"krate":0,"index":7477},{"krate":0,"index":7480},{"krate":0,"index":7482},{"krate":0,"index":7485},{"krate":0,"index":7487},{"krate":0,"index":7490},{"krate":0,"index":7492},{"krate":0,"index":7495},{"krate":0,"index":7497},{"krate":0,"index":7500},{"krate":0,"index":7503},{"krate":0,"index":1197},{"krate":0,"index":1199},{"krate":0,"index":1205},{"krate":0,"index":1211},{"krate":0,"index":7535},{"krate":0,"index":7625}],"decl_id":null,"docs":" Strategies to generate numeric values (as opposed to integers used as bit\n fields).","sig":null,"attributes":[{"value":"/ Strategies to generate numeric values (as opposed to integers used as bit","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":243039,"byte_end":243116,"line_start":10,"line_end":10,"column_start":1,"column_end":78}},{"value":"/ fields).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":243117,"byte_end":243129,"line_start":11,"line_end":11,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":243130,"byte_end":243133,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ All strategies in this module shrink by binary searching towards 0.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":243134,"byte_end":243205,"line_start":13,"line_end":13,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":6646},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":252947,"byte_end":252949,"line_start":330,"line_end":330,"column_start":28,"column_end":30},"name":"i8","qualname":"::num::i8","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","parent":null,"children":[{"krate":0,"index":6647},{"krate":0,"index":6650},{"krate":0,"index":6651},{"krate":0,"index":6676},{"krate":0,"index":6679},{"krate":0,"index":6681},{"krate":0,"index":6682},{"krate":0,"index":6671},{"krate":0,"index":6672},{"krate":0,"index":6684},{"krate":0,"index":6688},{"krate":0,"index":6690},{"krate":0,"index":6691},{"krate":0,"index":6654},{"krate":0,"index":6666},{"krate":0,"index":6693},{"krate":0,"index":6697},{"krate":0,"index":6701},{"krate":0,"index":6705},{"krate":0,"index":6709}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":247103,"byte_end":247125,"line_start":142,"line_end":142,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6713},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":252979,"byte_end":252982,"line_start":331,"line_end":331,"column_start":28,"column_end":31},"name":"i16","qualname":"::num::i16","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","parent":null,"children":[{"krate":0,"index":6714},{"krate":0,"index":6717},{"krate":0,"index":6718},{"krate":0,"index":6743},{"krate":0,"index":6746},{"krate":0,"index":6748},{"krate":0,"index":6749},{"krate":0,"index":6738},{"krate":0,"index":6739},{"krate":0,"index":6751},{"krate":0,"index":6755},{"krate":0,"index":6757},{"krate":0,"index":6758},{"krate":0,"index":6721},{"krate":0,"index":6733},{"krate":0,"index":6760},{"krate":0,"index":6764},{"krate":0,"index":6768},{"krate":0,"index":6772},{"krate":0,"index":6776}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":247103,"byte_end":247125,"line_start":142,"line_end":142,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6780},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":253012,"byte_end":253015,"line_start":332,"line_end":332,"column_start":28,"column_end":31},"name":"i32","qualname":"::num::i32","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","parent":null,"children":[{"krate":0,"index":6781},{"krate":0,"index":6784},{"krate":0,"index":6785},{"krate":0,"index":6810},{"krate":0,"index":6813},{"krate":0,"index":6815},{"krate":0,"index":6816},{"krate":0,"index":6805},{"krate":0,"index":6806},{"krate":0,"index":6818},{"krate":0,"index":6822},{"krate":0,"index":6824},{"krate":0,"index":6825},{"krate":0,"index":6788},{"krate":0,"index":6800},{"krate":0,"index":6827},{"krate":0,"index":6831},{"krate":0,"index":6835},{"krate":0,"index":6839},{"krate":0,"index":6843}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":247103,"byte_end":247125,"line_start":142,"line_end":142,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6847},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":253045,"byte_end":253048,"line_start":333,"line_end":333,"column_start":28,"column_end":31},"name":"i64","qualname":"::num::i64","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","parent":null,"children":[{"krate":0,"index":6848},{"krate":0,"index":6851},{"krate":0,"index":6852},{"krate":0,"index":6877},{"krate":0,"index":6880},{"krate":0,"index":6882},{"krate":0,"index":6883},{"krate":0,"index":6872},{"krate":0,"index":6873},{"krate":0,"index":6885},{"krate":0,"index":6889},{"krate":0,"index":6891},{"krate":0,"index":6892},{"krate":0,"index":6855},{"krate":0,"index":6867},{"krate":0,"index":6894},{"krate":0,"index":6898},{"krate":0,"index":6902},{"krate":0,"index":6906},{"krate":0,"index":6910}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":247103,"byte_end":247125,"line_start":142,"line_end":142,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6914},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":253114,"byte_end":253118,"line_start":335,"line_end":335,"column_start":28,"column_end":32},"name":"i128","qualname":"::num::i128","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","parent":null,"children":[{"krate":0,"index":6915},{"krate":0,"index":6918},{"krate":0,"index":6919},{"krate":0,"index":6944},{"krate":0,"index":6947},{"krate":0,"index":6949},{"krate":0,"index":6950},{"krate":0,"index":6939},{"krate":0,"index":6940},{"krate":0,"index":6952},{"krate":0,"index":6956},{"krate":0,"index":6958},{"krate":0,"index":6959},{"krate":0,"index":6922},{"krate":0,"index":6934},{"krate":0,"index":6961},{"krate":0,"index":6965},{"krate":0,"index":6969},{"krate":0,"index":6973},{"krate":0,"index":6977}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":247103,"byte_end":247125,"line_start":142,"line_end":142,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":6981},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":253148,"byte_end":253153,"line_start":336,"line_end":336,"column_start":28,"column_end":33},"name":"isize","qualname":"::num::isize","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","parent":null,"children":[{"krate":0,"index":6982},{"krate":0,"index":6985},{"krate":0,"index":6986},{"krate":0,"index":7011},{"krate":0,"index":7014},{"krate":0,"index":7016},{"krate":0,"index":7017},{"krate":0,"index":7006},{"krate":0,"index":7007},{"krate":0,"index":7019},{"krate":0,"index":7023},{"krate":0,"index":7025},{"krate":0,"index":7026},{"krate":0,"index":6989},{"krate":0,"index":7001},{"krate":0,"index":7028},{"krate":0,"index":7032},{"krate":0,"index":7036},{"krate":0,"index":7040},{"krate":0,"index":7044}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":247103,"byte_end":247125,"line_start":142,"line_end":142,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":7048},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":253185,"byte_end":253187,"line_start":337,"line_end":337,"column_start":30,"column_end":32},"name":"u8","qualname":"::num::u8","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","parent":null,"children":[{"krate":0,"index":7049},{"krate":0,"index":7052},{"krate":0,"index":7053},{"krate":0,"index":7071},{"krate":0,"index":7074},{"krate":0,"index":7076},{"krate":0,"index":7077},{"krate":0,"index":7066},{"krate":0,"index":7067},{"krate":0,"index":7079},{"krate":0,"index":7083},{"krate":0,"index":7085},{"krate":0,"index":7086},{"krate":0,"index":7056},{"krate":0,"index":7061},{"krate":0,"index":7088},{"krate":0,"index":7092},{"krate":0,"index":7096},{"krate":0,"index":7100},{"krate":0,"index":7104}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":250316,"byte_end":250338,"line_start":244,"line_end":244,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":7108},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":253219,"byte_end":253222,"line_start":338,"line_end":338,"column_start":30,"column_end":33},"name":"u16","qualname":"::num::u16","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","parent":null,"children":[{"krate":0,"index":7109},{"krate":0,"index":7112},{"krate":0,"index":7113},{"krate":0,"index":7131},{"krate":0,"index":7134},{"krate":0,"index":7136},{"krate":0,"index":7137},{"krate":0,"index":7126},{"krate":0,"index":7127},{"krate":0,"index":7139},{"krate":0,"index":7143},{"krate":0,"index":7145},{"krate":0,"index":7146},{"krate":0,"index":7116},{"krate":0,"index":7121},{"krate":0,"index":7148},{"krate":0,"index":7152},{"krate":0,"index":7156},{"krate":0,"index":7160},{"krate":0,"index":7164}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":250316,"byte_end":250338,"line_start":244,"line_end":244,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":7168},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":253254,"byte_end":253257,"line_start":339,"line_end":339,"column_start":30,"column_end":33},"name":"u32","qualname":"::num::u32","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","parent":null,"children":[{"krate":0,"index":7169},{"krate":0,"index":7172},{"krate":0,"index":7173},{"krate":0,"index":7191},{"krate":0,"index":7194},{"krate":0,"index":7196},{"krate":0,"index":7197},{"krate":0,"index":7186},{"krate":0,"index":7187},{"krate":0,"index":7199},{"krate":0,"index":7203},{"krate":0,"index":7205},{"krate":0,"index":7206},{"krate":0,"index":7176},{"krate":0,"index":7181},{"krate":0,"index":7208},{"krate":0,"index":7212},{"krate":0,"index":7216},{"krate":0,"index":7220},{"krate":0,"index":7224}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":250316,"byte_end":250338,"line_start":244,"line_end":244,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":7228},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":253289,"byte_end":253292,"line_start":340,"line_end":340,"column_start":30,"column_end":33},"name":"u64","qualname":"::num::u64","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","parent":null,"children":[{"krate":0,"index":7229},{"krate":0,"index":7232},{"krate":0,"index":7233},{"krate":0,"index":7251},{"krate":0,"index":7254},{"krate":0,"index":7256},{"krate":0,"index":7257},{"krate":0,"index":7246},{"krate":0,"index":7247},{"krate":0,"index":7259},{"krate":0,"index":7263},{"krate":0,"index":7265},{"krate":0,"index":7266},{"krate":0,"index":7236},{"krate":0,"index":7241},{"krate":0,"index":7268},{"krate":0,"index":7272},{"krate":0,"index":7276},{"krate":0,"index":7280},{"krate":0,"index":7284}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":250316,"byte_end":250338,"line_start":244,"line_end":244,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":7288},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":253360,"byte_end":253364,"line_start":342,"line_end":342,"column_start":30,"column_end":34},"name":"u128","qualname":"::num::u128","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","parent":null,"children":[{"krate":0,"index":7289},{"krate":0,"index":7292},{"krate":0,"index":7293},{"krate":0,"index":7311},{"krate":0,"index":7314},{"krate":0,"index":7316},{"krate":0,"index":7317},{"krate":0,"index":7306},{"krate":0,"index":7307},{"krate":0,"index":7319},{"krate":0,"index":7323},{"krate":0,"index":7325},{"krate":0,"index":7326},{"krate":0,"index":7296},{"krate":0,"index":7301},{"krate":0,"index":7328},{"krate":0,"index":7332},{"krate":0,"index":7336},{"krate":0,"index":7340},{"krate":0,"index":7344}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":250316,"byte_end":250338,"line_start":244,"line_end":244,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":7348},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":253396,"byte_end":253401,"line_start":343,"line_end":343,"column_start":30,"column_end":35},"name":"usize","qualname":"::num::usize","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","parent":null,"children":[{"krate":0,"index":7349},{"krate":0,"index":7352},{"krate":0,"index":7353},{"krate":0,"index":7371},{"krate":0,"index":7374},{"krate":0,"index":7376},{"krate":0,"index":7377},{"krate":0,"index":7366},{"krate":0,"index":7367},{"krate":0,"index":7379},{"krate":0,"index":7383},{"krate":0,"index":7385},{"krate":0,"index":7386},{"krate":0,"index":7356},{"krate":0,"index":7361},{"krate":0,"index":7388},{"krate":0,"index":7392},{"krate":0,"index":7396},{"krate":0,"index":7400},{"krate":0,"index":7404}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":250316,"byte_end":250338,"line_start":244,"line_end":244,"column_start":9,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":1200},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":254696,"byte_end":254700,"line_start":390,"line_end":390,"column_start":10,"column_end":14},"name":"Bits","qualname":"::num::FloatLayout::Bits","value":"type Bits: Copy;","parent":{"krate":0,"index":1199},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":7535},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":273240,"byte_end":273243,"line_start":850,"line_end":850,"column_start":19,"column_end":22},"name":"f32","qualname":"::num::f32","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","parent":null,"children":[{"krate":0,"index":7536},{"krate":0,"index":7539},{"krate":0,"index":7542},{"krate":0,"index":7543},{"krate":0,"index":7546},{"krate":0,"index":7549},{"krate":0,"index":7550},{"krate":0,"index":7587},{"krate":0,"index":7590},{"krate":0,"index":7592},{"krate":0,"index":7593},{"krate":0,"index":7568},{"krate":0,"index":7571},{"krate":0,"index":7573},{"krate":0,"index":7574},{"krate":0,"index":7575},{"krate":0,"index":7576},{"krate":0,"index":7577},{"krate":0,"index":7578},{"krate":0,"index":7579},{"krate":0,"index":7580},{"krate":0,"index":7581},{"krate":0,"index":7582},{"krate":0,"index":7595},{"krate":0,"index":7600},{"krate":0,"index":7602},{"krate":0,"index":7603},{"krate":0,"index":7553},{"krate":0,"index":7563},{"krate":0,"index":7605},{"krate":0,"index":7609},{"krate":0,"index":7613},{"krate":0,"index":7617},{"krate":0,"index":7621}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":266820,"byte_end":266842,"line_start":668,"line_end":668,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":7625},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":273264,"byte_end":273267,"line_start":851,"line_end":851,"column_start":19,"column_end":22},"name":"f64","qualname":"::num::f64","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","parent":null,"children":[{"krate":0,"index":7626},{"krate":0,"index":7629},{"krate":0,"index":7632},{"krate":0,"index":7633},{"krate":0,"index":7636},{"krate":0,"index":7639},{"krate":0,"index":7640},{"krate":0,"index":7677},{"krate":0,"index":7680},{"krate":0,"index":7682},{"krate":0,"index":7683},{"krate":0,"index":7658},{"krate":0,"index":7661},{"krate":0,"index":7663},{"krate":0,"index":7664},{"krate":0,"index":7665},{"krate":0,"index":7666},{"krate":0,"index":7667},{"krate":0,"index":7668},{"krate":0,"index":7669},{"krate":0,"index":7670},{"krate":0,"index":7671},{"krate":0,"index":7672},{"krate":0,"index":7685},{"krate":0,"index":7690},{"krate":0,"index":7692},{"krate":0,"index":7693},{"krate":0,"index":7643},{"krate":0,"index":7653},{"krate":0,"index":7695},{"krate":0,"index":7699},{"krate":0,"index":7703},{"krate":0,"index":7707},{"krate":0,"index":7711}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":266820,"byte_end":266842,"line_start":668,"line_end":668,"column_start":9,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":1219},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strategy","qualname":"::strategy","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/mod.rs","parent":null,"children":[{"krate":0,"index":1220},{"krate":0,"index":1265},{"krate":0,"index":1335},{"krate":0,"index":1406},{"krate":0,"index":1430},{"krate":0,"index":1498},{"krate":0,"index":1546},{"krate":0,"index":1660},{"krate":0,"index":1708},{"krate":0,"index":1747},{"krate":0,"index":1858},{"krate":0,"index":1940},{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1944},{"krate":0,"index":1945},{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1948},{"krate":0,"index":1949},{"krate":0,"index":1950},{"krate":0,"index":1951},{"krate":0,"index":1952}],"decl_id":null,"docs":" Defines the core traits used by Proptest.\n","sig":null,"attributes":[{"value":"/ Defines the core traits used by Proptest.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/mod.rs","byte_start":291164,"byte_end":291209,"line_start":10,"line_end":10,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1230},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter.rs","byte_start":292243,"byte_end":292249,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"Filter","qualname":"::strategy::filter::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1235}],"decl_id":null,"docs":" `Strategy` and `ValueTree` filter adaptor.","sig":null,"attributes":[{"value":"/ `Strategy` and `ValueTree` filter adaptor.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter.rs","byte_start":292096,"byte_end":292142,"line_start":15,"line_end":15,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter.rs","byte_start":292143,"byte_end":292146,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_filter()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter.rs","byte_start":292147,"byte_end":292181,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter.rs","byte_start":292182,"byte_end":292231,"line_start":18,"line_end":18,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1278},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":296168,"byte_end":296177,"line_start":19,"line_end":19,"column_start":12,"column_end":21},"name":"FilterMap","qualname":"::strategy::filter_map::FilterMap","value":"FilterMap {  }","parent":null,"children":[{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1283}],"decl_id":null,"docs":" `Strategy` and `ValueTree` filter_map adaptor.","sig":null,"attributes":[{"value":"/ `Strategy` and `ValueTree` filter_map adaptor.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":296013,"byte_end":296063,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":296064,"byte_end":296067,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_filter_map()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":296068,"byte_end":296106,"line_start":17,"line_end":17,"column_start":1,"column_end":39}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":296107,"byte_end":296156,"line_start":18,"line_end":18,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1303},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":297632,"byte_end":297650,"line_start":74,"line_end":74,"column_start":12,"column_end":30},"name":"FilterMapValueTree","qualname":"::strategy::filter_map::FilterMapValueTree","value":"FilterMapValueTree {  }","parent":null,"children":[{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309}],"decl_id":null,"docs":" `ValueTree` corresponding to `FilterMap`.\n","sig":null,"attributes":[{"value":"/ `ValueTree` corresponding to `FilterMap`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":297575,"byte_end":297620,"line_start":73,"line_end":73,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":7715},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":301995,"byte_end":302002,"line_start":22,"line_end":22,"column_start":12,"column_end":19},"name":"Flatten","qualname":"::strategy::flatten::Flatten","value":"Flatten {  }","parent":null,"children":[{"krate":0,"index":7717}],"decl_id":null,"docs":" Adaptor that flattens a `Strategy` which produces other `Strategy`s into a\n `Strategy` that picks one of those strategies and then picks values from\n it.\n","sig":null,"attributes":[{"value":"/ Adaptor that flattens a `Strategy` which produces other `Strategy`s into a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":301740,"byte_end":301818,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/ `Strategy` that picks one of those strategies and then picks values from","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":301819,"byte_end":301895,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/ it.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":301896,"byte_end":301903,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":301934,"byte_end":301983,"line_start":21,"line_end":21,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":302105,"byte_end":302108,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<Flatten<S>>::new","value":"pub fn new(S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wrap `source` to flatten it.\n","sig":null,"attributes":[{"value":"/ Wrap `source` to flatten it.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":302061,"byte_end":302093,"line_start":27,"line_end":27,"column_start":5,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1359},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":302556,"byte_end":302572,"line_start":47,"line_end":47,"column_start":12,"column_end":28},"name":"FlattenValueTree","qualname":"::strategy::flatten::FlattenValueTree","value":"FlattenValueTree {  }","parent":null,"children":[{"krate":0,"index":1361},{"krate":0,"index":1362},{"krate":0,"index":1363},{"krate":0,"index":1364},{"krate":0,"index":1365}],"decl_id":null,"docs":" The `ValueTree` produced by `Flatten`.\n","sig":null,"attributes":[{"value":"/ The `ValueTree` produced by `Flatten`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":302502,"byte_end":302544,"line_start":46,"line_end":46,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":7726},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":307881,"byte_end":307891,"line_start":203,"line_end":203,"column_start":12,"column_end":22},"name":"IndFlatten","qualname":"::strategy::flatten::IndFlatten","value":"","parent":null,"children":[],"decl_id":null,"docs":" Similar to `Flatten`, but does not shrink the input strategy.","sig":null,"attributes":[{"value":"/ Similar to `Flatten`, but does not shrink the input strategy.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":307711,"byte_end":307776,"line_start":199,"line_end":199,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":307777,"byte_end":307780,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_ind_flat_map()` fore more details.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":307781,"byte_end":307839,"line_start":201,"line_end":201,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":1386},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":308439,"byte_end":308452,"line_start":222,"line_end":222,"column_start":12,"column_end":25},"name":"IndFlattenMap","qualname":"::strategy::flatten::IndFlattenMap","value":"IndFlattenMap {  }","parent":null,"children":[{"krate":0,"index":1389},{"krate":0,"index":1390}],"decl_id":null,"docs":" Similar to `Map` plus `Flatten`, but does not shrink the input strategy and\n passes the original input through.","sig":null,"attributes":[{"value":"/ Similar to `Map` plus `Flatten`, but does not shrink the input strategy and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":308246,"byte_end":308325,"line_start":218,"line_end":218,"column_start":1,"column_end":80}},{"value":"/ passes the original input through.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":308326,"byte_end":308364,"line_start":219,"line_end":219,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":308365,"byte_end":308368,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_ind_flat_map2()` for more details.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":308369,"byte_end":308427,"line_start":221,"line_end":221,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":7738},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":314236,"byte_end":314240,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"Fuse","qualname":"::strategy::fuse::Fuse","value":"Fuse {  }","parent":null,"children":[{"krate":0,"index":7740},{"krate":0,"index":7741},{"krate":0,"index":7742}],"decl_id":null,"docs":" Adaptor for `Strategy` and `ValueTree` which guards `simplify()` and\n `complicate()` to avoid contract violations.","sig":null,"attributes":[{"value":"/ Adaptor for `Strategy` and `ValueTree` which guards `simplify()` and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":312927,"byte_end":312999,"line_start":13,"line_end":13,"column_start":1,"column_end":73}},{"value":"/ `complicate()` to avoid contract violations.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313000,"byte_end":313048,"line_start":14,"line_end":14,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313049,"byte_end":313052,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This can be used as an intermediate when the caller would otherwise need","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313053,"byte_end":313129,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ its own separate state tracking, or as a workaround for a broken","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313130,"byte_end":313198,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ `ValueTree` implementation.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313199,"byte_end":313230,"line_start":18,"line_end":18,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313231,"byte_end":313234,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ This wrapper specifically has the following effects:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313235,"byte_end":313291,"line_start":20,"line_end":20,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313292,"byte_end":313295,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ - Calling `complicate()` before `simplify()` was ever called does nothing","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313296,"byte_end":313373,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/   and returns `false`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313374,"byte_end":313400,"line_start":23,"line_end":23,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313401,"byte_end":313404,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ - Calling `simplify()` after it has returned `false` and no calls to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313405,"byte_end":313477,"line_start":25,"line_end":25,"column_start":1,"column_end":73}},{"value":"/   `complicate()` returned `true` does nothing and returns `false`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313478,"byte_end":313548,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313549,"byte_end":313552,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ - Calling `complicate()` after it has returned `false` and no calls to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313553,"byte_end":313627,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/   `simplify()` returned `true` does nothing and returns `false`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313628,"byte_end":313696,"line_start":29,"line_end":29,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313697,"byte_end":313700,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ There is also limited functionality to alter the internal state to assist","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313701,"byte_end":313778,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ in its usage as a state tracker.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313779,"byte_end":313815,"line_start":32,"line_end":32,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313816,"byte_end":313819,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Wrapping a `Strategy` in `Fuse` simply causes its `ValueTree` to also be","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313820,"byte_end":313896,"line_start":34,"line_end":34,"column_start":1,"column_end":77}},{"value":"/ wrapped in `Fuse`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313897,"byte_end":313919,"line_start":35,"line_end":35,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313920,"byte_end":313923,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ While this is similar to `std::iter::Fuse`, it is not exposed as a method","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":313924,"byte_end":314001,"line_start":37,"line_end":37,"column_start":1,"column_end":78}},{"value":"/ on `Strategy` since the vast majority of proptest should never need this","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":314002,"byte_end":314078,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ functionality; it mainly concerns implementors of strategies.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":314079,"byte_end":314144,"line_start":39,"line_end":39,"column_start":1,"column_end":66}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":314175,"byte_end":314224,"line_start":41,"line_end":41,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1411},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":314380,"byte_end":314383,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<Fuse<T>>::new","value":"pub fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wrap the given `T` in `Fuse`.\n","sig":null,"attributes":[{"value":"/ Wrap the given `T` in `Fuse`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":314335,"byte_end":314368,"line_start":49,"line_end":49,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1419},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":315162,"byte_end":315174,"line_start":77,"line_end":77,"column_start":12,"column_end":24},"name":"may_simplify","qualname":"<Fuse<T>>::may_simplify","value":"pub fn may_simplify(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether a call to `simplify()` may be productive.","sig":null,"attributes":[{"value":"/ Return whether a call to `simplify()` may be productive.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":314784,"byte_end":314844,"line_start":69,"line_end":69,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":314849,"byte_end":314852,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Formally, this is true if one of the following holds:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":314857,"byte_end":314914,"line_start":71,"line_end":71,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":314919,"byte_end":314922,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ - `simplify()` has never been called.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":314927,"byte_end":314968,"line_start":73,"line_end":73,"column_start":5,"column_end":46}},{"value":"/ - The most recent call to `simplify()` returned `true`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":314973,"byte_end":315032,"line_start":74,"line_end":74,"column_start":5,"column_end":64}},{"value":"/ - `complicate()` has been called more recently than `simplify()` and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":315037,"byte_end":315109,"line_start":75,"line_end":75,"column_start":5,"column_end":77}},{"value":"/   the last call returned `true`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":315114,"byte_end":315150,"line_start":76,"line_end":76,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1420},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":315342,"byte_end":315359,"line_start":83,"line_end":83,"column_start":12,"column_end":29},"name":"disallow_simplify","qualname":"<Fuse<T>>::disallow_simplify","value":"pub fn disallow_simplify(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Disallow any further calls to `simplify()` until a call to\n `complicate()` returns `true`.\n","sig":null,"attributes":[{"value":"/ Disallow any further calls to `simplify()` until a call to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":315229,"byte_end":315291,"line_start":81,"line_end":81,"column_start":5,"column_end":67}},{"value":"/ `complicate()` returns `true`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":315296,"byte_end":315330,"line_start":82,"line_end":82,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1421},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":315755,"byte_end":315769,"line_start":94,"line_end":94,"column_start":12,"column_end":26},"name":"may_complicate","qualname":"<Fuse<T>>::may_complicate","value":"pub fn may_complicate(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether a call to `complicate()` may be productive.","sig":null,"attributes":[{"value":"/ Return whether a call to `complicate()` may be productive.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":315419,"byte_end":315481,"line_start":87,"line_end":87,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":315486,"byte_end":315489,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Formally, this is true if one of the following holds:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":315494,"byte_end":315551,"line_start":89,"line_end":89,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":315556,"byte_end":315559,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ - The most recent call to `complicate()` returned `true`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":315564,"byte_end":315625,"line_start":91,"line_end":91,"column_start":5,"column_end":66}},{"value":"/ - `simplify()` has been called more recently than `complicate()` and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":315630,"byte_end":315702,"line_start":92,"line_end":92,"column_start":5,"column_end":77}},{"value":"/   the last call returned `true`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":315707,"byte_end":315743,"line_start":93,"line_end":93,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1422},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":315939,"byte_end":315958,"line_start":100,"line_end":100,"column_start":12,"column_end":31},"name":"disallow_complicate","qualname":"<Fuse<T>>::disallow_complicate","value":"pub fn disallow_complicate(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Disallow any further calls to `complicate()` until a call to\n `simplify()` returns `true`.\n","sig":null,"attributes":[{"value":"/ Disallow any further calls to `complicate()` until a call to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":315826,"byte_end":315890,"line_start":98,"line_end":98,"column_start":5,"column_end":69}},{"value":"/ `simplify()` returns `true`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":315895,"byte_end":315927,"line_start":99,"line_end":99,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1423},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":316092,"byte_end":316098,"line_start":105,"line_end":105,"column_start":12,"column_end":18},"name":"freeze","qualname":"<Fuse<T>>::freeze","value":"pub fn freeze(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Prevent any further shrinking operations from occurring.\n","sig":null,"attributes":[{"value":"/ Prevent any further shrinking operations from occurring.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":316020,"byte_end":316080,"line_start":104,"line_end":104,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":7751},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":320067,"byte_end":320071,"line_start":34,"line_end":34,"column_start":12,"column_end":16},"name":"Just","qualname":"::strategy::just::Just","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `Strategy` which always produces a single value value and never\n simplifies.\n","sig":null,"attributes":[{"value":"/ A `Strategy` which always produces a single value value and never","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":319890,"byte_end":319959,"line_start":30,"line_end":30,"column_start":1,"column_end":70}},{"value":"/ simplifies.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":319960,"byte_end":319975,"line_start":31,"line_end":31,"column_start":1,"column_end":16}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":320006,"byte_end":320055,"line_start":33,"line_end":33,"column_start":1,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":7754},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":320145,"byte_end":320150,"line_start":36,"line_end":36,"column_start":5,"column_end":10},"name":"0","qualname":"::strategy::just::Just::0","value":"T","parent":{"krate":0,"index":7751},"children":[],"decl_id":null,"docs":" The value produced by this strategy.\n","sig":null,"attributes":[{"value":"/ The value produced by this strategy.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":320100,"byte_end":320140,"line_start":35,"line_end":35,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":1457},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321240,"byte_end":321248,"line_start":71,"line_end":71,"column_start":12,"column_end":20},"name":"LazyJust","qualname":"::strategy::just::LazyJust","value":"LazyJust {  }","parent":null,"children":[{"krate":0,"index":1460}],"decl_id":null,"docs":" A `Strategy` which always produces a single value value and never\n simplifies. If `T` is `Clone`, you should use `Just` instead.","sig":null,"attributes":[{"value":"/ A `Strategy` which always produces a single value value and never","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":320671,"byte_end":320740,"line_start":60,"line_end":60,"column_start":1,"column_end":70}},{"value":"/ simplifies. If `T` is `Clone`, you should use `Just` instead.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":320741,"byte_end":320806,"line_start":61,"line_end":61,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":320807,"byte_end":320810,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ This is a generalization of `Just` and works by calling","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":320811,"byte_end":320870,"line_start":63,"line_end":63,"column_start":1,"column_end":60}},{"value":"/ the provided `Fn () -> T` in `.current()` every time. This is not a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":320871,"byte_end":320942,"line_start":64,"line_end":64,"column_start":1,"column_end":72}},{"value":"/ very interesting strategy, but is required in cases where `T` is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":320943,"byte_end":321011,"line_start":65,"line_end":65,"column_start":1,"column_end":69}},{"value":"/ not `Clone`. It is also used in `proptest_derive` where we can't","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321012,"byte_end":321080,"line_start":66,"line_end":66,"column_start":1,"column_end":69}},{"value":"/ assume that your type is `Clone`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321081,"byte_end":321118,"line_start":67,"line_end":67,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321119,"byte_end":321122,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ **It is important that the function used be pure.**","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321123,"byte_end":321178,"line_start":69,"line_end":69,"column_start":1,"column_end":56}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321179,"byte_end":321228,"line_start":70,"line_end":70,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":1461},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321389,"byte_end":321399,"line_start":77,"line_end":77,"column_start":10,"column_end":20},"name":"LazyJustFn","qualname":"::strategy::just::LazyJustFn","value":"LazyJust<V, fn() -> V>","parent":null,"children":[],"decl_id":null,"docs":" Shorthand for `LazyJust<T, fn () -> T>`.\n","sig":null,"attributes":[{"value":"/ Shorthand for `LazyJust<T, fn () -> T>`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321335,"byte_end":321379,"line_start":76,"line_end":76,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1466},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321649,"byte_end":321652,"line_start":84,"line_end":84,"column_start":12,"column_end":15},"name":"new","qualname":"<LazyJust<T, F>>::new","value":"pub fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `LazyJust` strategy given the function/closure\n that produces the value.","sig":null,"attributes":[{"value":"/ Constructs a `LazyJust` strategy given the function/closure","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321473,"byte_end":321536,"line_start":80,"line_end":80,"column_start":5,"column_end":68}},{"value":"/ that produces the value.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321541,"byte_end":321569,"line_start":81,"line_end":81,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321574,"byte_end":321577,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ **It is important that the function used be pure.**","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321582,"byte_end":321637,"line_start":83,"line_end":83,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1511},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/lazy.rs","byte_start":323854,"byte_end":323867,"line_start":21,"line_end":21,"column_start":12,"column_end":25},"name":"LazyValueTree","qualname":"::strategy::lazy::LazyValueTree","value":"LazyValueTree {  }","parent":null,"children":[{"krate":0,"index":1513}],"decl_id":null,"docs":" Represents a value tree that is initialized on the first call to any\n methods.","sig":null,"attributes":[{"value":"/ Represents a value tree that is initialized on the first call to any","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/lazy.rs","byte_start":323600,"byte_end":323672,"line_start":16,"line_end":16,"column_start":1,"column_end":73}},{"value":"/ methods.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/lazy.rs","byte_start":323673,"byte_end":323685,"line_start":17,"line_end":17,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/lazy.rs","byte_start":323686,"byte_end":323689,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This is used to defer potentially expensive generation to shrinking time. It","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/lazy.rs","byte_start":323690,"byte_end":323770,"line_start":19,"line_end":19,"column_start":1,"column_end":81}},{"value":"/ is public only to allow APIs to expose it as an intermediate value.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/lazy.rs","byte_start":323771,"byte_end":323842,"line_start":20,"line_end":20,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1558},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":329272,"byte_end":329275,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"Map","qualname":"::strategy::map::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":1561},{"krate":0,"index":1562}],"decl_id":null,"docs":" `Strategy` and `ValueTree` map adaptor.","sig":null,"attributes":[{"value":"/ `Strategy` and `ValueTree` map adaptor.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":329131,"byte_end":329174,"line_start":21,"line_end":21,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":329175,"byte_end":329178,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_map()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":329179,"byte_end":329210,"line_start":23,"line_end":23,"column_start":1,"column_end":32}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":329211,"byte_end":329260,"line_start":24,"line_end":24,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1587},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":330870,"byte_end":330877,"line_start":89,"line_end":89,"column_start":12,"column_end":19},"name":"MapInto","qualname":"::strategy::map::MapInto","value":"MapInto {  }","parent":null,"children":[{"krate":0,"index":1590},{"krate":0,"index":1591}],"decl_id":null,"docs":" `Strategy` and `ValueTree` map into adaptor.","sig":null,"attributes":[{"value":"/ `Strategy` and `ValueTree` map into adaptor.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":330719,"byte_end":330767,"line_start":85,"line_end":85,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":330768,"byte_end":330771,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_map_into()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":330772,"byte_end":330808,"line_start":87,"line_end":87,"column_start":1,"column_end":37}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":330809,"byte_end":330858,"line_start":88,"line_end":88,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1617},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":332487,"byte_end":332494,"line_start":158,"line_end":158,"column_start":12,"column_end":19},"name":"Perturb","qualname":"::strategy::map::Perturb","value":"Perturb {  }","parent":null,"children":[{"krate":0,"index":1620},{"krate":0,"index":1621}],"decl_id":null,"docs":" `Strategy` perturbation adaptor.","sig":null,"attributes":[{"value":"/ `Strategy` perturbation adaptor.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":332349,"byte_end":332385,"line_start":154,"line_end":154,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":332386,"byte_end":332389,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_perturb()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":332390,"byte_end":332425,"line_start":156,"line_end":156,"column_start":1,"column_end":36}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":332426,"byte_end":332475,"line_start":157,"line_end":157,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1638},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":333537,"byte_end":333553,"line_start":201,"line_end":201,"column_start":12,"column_end":28},"name":"PerturbValueTree","qualname":"::strategy::map::PerturbValueTree","value":"PerturbValueTree {  }","parent":null,"children":[{"krate":0,"index":1641},{"krate":0,"index":1642},{"krate":0,"index":1643}],"decl_id":null,"docs":" `ValueTree` perturbation adaptor.","sig":null,"attributes":[{"value":"/ `ValueTree` perturbation adaptor.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":333448,"byte_end":333485,"line_start":198,"line_end":198,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":333486,"byte_end":333489,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_perturb()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":333490,"byte_end":333525,"line_start":200,"line_end":200,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1679},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/recursive.rs","byte_start":336637,"byte_end":336646,"line_start":18,"line_end":18,"column_start":12,"column_end":21},"name":"Recursive","qualname":"::strategy::recursive::Recursive","value":"Recursive {  }","parent":null,"children":[{"krate":0,"index":1682},{"krate":0,"index":1683},{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1686}],"decl_id":null,"docs":" Return type from `Strategy::prop_recursive()`.\n","sig":null,"attributes":[{"value":"/ Return type from `Strategy::prop_recursive()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/recursive.rs","byte_start":336525,"byte_end":336575,"line_start":16,"line_end":16,"column_start":1,"column_end":51}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/recursive.rs","byte_start":336576,"byte_end":336625,"line_start":17,"line_end":17,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":7769},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":343882,"byte_end":343889,"line_start":23,"line_end":23,"column_start":12,"column_end":19},"name":"Shuffle","qualname":"::strategy::shuffle::Shuffle","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Strategy` shuffle adaptor.","sig":null,"attributes":[{"value":"/ `Strategy` shuffle adaptor.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":343725,"byte_end":343756,"line_start":18,"line_end":18,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":343757,"byte_end":343760,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_shuffle()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":343761,"byte_end":343796,"line_start":20,"line_end":20,"column_start":1,"column_end":36}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":343821,"byte_end":343870,"line_start":22,"line_end":22,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":1727},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":344157,"byte_end":344168,"line_start":30,"line_end":30,"column_start":11,"column_end":22},"name":"Shuffleable","qualname":"::strategy::shuffle::Shuffleable","value":"Shuffleable","parent":null,"children":[{"krate":0,"index":1728},{"krate":0,"index":1729}],"decl_id":null,"docs":" A value which can be used with the `prop_shuffle` combinator.","sig":null,"attributes":[{"value":"/ A value which can be used with the `prop_shuffle` combinator.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":343909,"byte_end":343974,"line_start":25,"line_end":25,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":343975,"byte_end":343978,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ This is not a general-purpose trait. Its methods are prefixed with","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":343979,"byte_end":344049,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ `shuffle_` to avoid the compiler suggesting them or this trait as","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":344050,"byte_end":344119,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/ corrections in errors.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":344120,"byte_end":344146,"line_start":29,"line_end":29,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1728},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":344224,"byte_end":344235,"line_start":32,"line_end":32,"column_start":8,"column_end":19},"name":"shuffle_len","qualname":"::strategy::shuffle::Shuffleable::shuffle_len","value":"pub fn shuffle_len(&Self) -> usize","parent":{"krate":0,"index":1727},"children":[],"decl_id":null,"docs":" Return the length of this collection.\n","sig":null,"attributes":[{"value":"/ Return the length of this collection.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":344175,"byte_end":344216,"line_start":31,"line_end":31,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1729},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":344308,"byte_end":344320,"line_start":34,"line_end":34,"column_start":8,"column_end":20},"name":"shuffle_swap","qualname":"::strategy::shuffle::Shuffleable::shuffle_swap","value":"pub fn shuffle_swap(&mut Self, usize, usize)","parent":{"krate":0,"index":1727},"children":[],"decl_id":null,"docs":" Swap the elements at the given indices.\n","sig":null,"attributes":[{"value":"/ Swap the elements at the given indices.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":344257,"byte_end":344300,"line_start":33,"line_end":33,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":7956},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":346170,"byte_end":346186,"line_start":113,"line_end":113,"column_start":12,"column_end":28},"name":"ShuffleValueTree","qualname":"::strategy::shuffle::ShuffleValueTree","value":"ShuffleValueTree {  }","parent":null,"children":[{"krate":0,"index":7958},{"krate":0,"index":7959},{"krate":0,"index":7960},{"krate":0,"index":7961}],"decl_id":null,"docs":" `ValueTree` shuffling adaptor.","sig":null,"attributes":[{"value":"/ `ValueTree` shuffling adaptor.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":346060,"byte_end":346094,"line_start":109,"line_end":109,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":346095,"byte_end":346098,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_shuffle()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":346099,"byte_end":346134,"line_start":111,"line_end":111,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":1766},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352585,"byte_end":352592,"line_start":29,"line_end":29,"column_start":10,"column_end":17},"name":"NewTree","qualname":"::strategy::traits::NewTree","value":"Result<<S as Strategy>::Tree, Reason>","parent":null,"children":[],"decl_id":null,"docs":" A new [`ValueTree`] from a [`Strategy`] when [`Ok`] or otherwise [`Err`]\n when a new value-tree can not be produced for some reason such as\n in the case of filtering with a predicate which always returns false.\n You should pass in your strategy as the type parameter.","sig":null,"attributes":[{"value":"/ A new [`ValueTree`] from a [`Strategy`] when [`Ok`] or otherwise [`Err`]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352041,"byte_end":352117,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"/ when a new value-tree can not be produced for some reason such as","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352118,"byte_end":352187,"line_start":21,"line_end":21,"column_start":1,"column_end":70}},{"value":"/ in the case of filtering with a predicate which always returns false.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352188,"byte_end":352261,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ You should pass in your strategy as the type parameter.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352262,"byte_end":352321,"line_start":23,"line_end":23,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352322,"byte_end":352325,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ [`Strategy`]: trait.Strategy.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352326,"byte_end":352363,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"/ [`ValueTree`]: trait.ValueTree.html","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352364,"byte_end":352403,"line_start":26,"line_end":26,"column_start":1,"column_end":40}},{"value":"/ [`Ok`]: https://doc.rust-lang.org/nightly/std/result/enum.Result.html#variant.Ok","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352404,"byte_end":352488,"line_start":27,"line_end":27,"column_start":1,"column_end":85}},{"value":"/ [`Err`]: https://doc.rust-lang.org/nightly/std/result/enum.Result.html#variant.Err","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352489,"byte_end":352575,"line_start":28,"line_end":28,"column_start":1,"column_end":87}}]},{"kind":"Trait","id":{"krate":0,"index":1768},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352935,"byte_end":352943,"line_start":37,"line_end":37,"column_start":11,"column_end":19},"name":"Strategy","qualname":"::strategy::traits::Strategy","value":"Strategy: fmt::Debug","parent":null,"children":[{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1771},{"krate":0,"index":1772},{"krate":0,"index":1775},{"krate":0,"index":1777},{"krate":0,"index":1780},{"krate":0,"index":1783},{"krate":0,"index":1786},{"krate":0,"index":1789},{"krate":0,"index":1792},{"krate":0,"index":1796},{"krate":0,"index":1797},{"krate":0,"index":1800},{"krate":0,"index":1801},{"krate":0,"index":1802},{"krate":0,"index":1803}],"decl_id":null,"docs":" A strategy for producing arbitrary values of a given type.","sig":null,"attributes":[{"value":"/ A strategy for producing arbitrary values of a given type.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352638,"byte_end":352700,"line_start":31,"line_end":31,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352701,"byte_end":352704,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ `fmt::Debug` is a hard requirement for all strategies currently due to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352705,"byte_end":352779,"line_start":33,"line_end":33,"column_start":1,"column_end":75}},{"value":"/ `prop_flat_map()`. This constraint will be removed when specialisation","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352780,"byte_end":352854,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ becomes stable.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352855,"byte_end":352874,"line_start":35,"line_end":35,"column_start":1,"column_end":20}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352875,"byte_end":352924,"line_start":36,"line_end":36,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":1769},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":353020,"byte_end":353024,"line_start":39,"line_end":39,"column_start":10,"column_end":14},"name":"Tree","qualname":"::strategy::traits::Strategy::Tree","value":"type Tree: ValueTree<Value = Self::Value>;","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" The value tree generated by this `Strategy`.\n","sig":null,"attributes":[{"value":"/ The value tree generated by this `Strategy`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352962,"byte_end":353010,"line_start":38,"line_end":38,"column_start":5,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":1770},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":353372,"byte_end":353377,"line_start":46,"line_end":46,"column_start":10,"column_end":15},"name":"Value","qualname":"::strategy::traits::Strategy::Value","value":"type Value: fmt::Debug;","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" The type of value used by functions under test generated by this Strategy.","sig":null,"attributes":[{"value":"/ The type of value used by functions under test generated by this Strategy.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":353063,"byte_end":353141,"line_start":41,"line_end":41,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":353146,"byte_end":353149,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ This corresponds to the same type as the associated type `Value`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":353154,"byte_end":353222,"line_start":43,"line_end":43,"column_start":5,"column_end":73}},{"value":"/ in `Self::Tree`. It is provided here to simplify usage particularly","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":353227,"byte_end":353298,"line_start":44,"line_end":44,"column_start":5,"column_end":76}},{"value":"/ in conjunction with `-> impl Strategy<Value = MyType>`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":353303,"byte_end":353362,"line_start":45,"line_end":45,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1771},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":354095,"byte_end":354103,"line_start":60,"line_end":60,"column_start":8,"column_end":16},"name":"new_tree","qualname":"::strategy::traits::Strategy::new_tree","value":"pub fn new_tree(&Self, &mut TestRunner) -> NewTree<Self>","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Generate a new value tree from the given runner.","sig":null,"attributes":[{"value":"/ Generate a new value tree from the given runner.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":353396,"byte_end":353448,"line_start":48,"line_end":48,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":353453,"byte_end":353456,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ This may fail if there are constraints on the generated value and the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":353461,"byte_end":353534,"line_start":50,"line_end":50,"column_start":5,"column_end":78}},{"value":"/ generator is unable to produce anything that satisfies them. Any","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":353539,"byte_end":353607,"line_start":51,"line_end":51,"column_start":5,"column_end":73}},{"value":"/ failure is wrapped in `TestError::Abort`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":353612,"byte_end":353657,"line_start":52,"line_end":52,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":353662,"byte_end":353665,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ This method is generally expected to be deterministic. That is, given a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":353670,"byte_end":353745,"line_start":54,"line_end":54,"column_start":5,"column_end":80}},{"value":"/ `TestRunner` with its RNG in a particular state, this should produce an","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":353750,"byte_end":353825,"line_start":55,"line_end":55,"column_start":5,"column_end":80}},{"value":"/ identical `ValueTree` every time. Non-deterministic strategies do not","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":353830,"byte_end":353903,"line_start":56,"line_end":56,"column_start":5,"column_end":78}},{"value":"/ cause problems during normal operation, but they do break failure","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":353908,"byte_end":353977,"line_start":57,"line_end":57,"column_start":5,"column_end":74}},{"value":"/ persistence since it is implemented by simply saving the seed used to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":353982,"byte_end":354055,"line_start":58,"line_end":58,"column_start":5,"column_end":78}},{"value":"/ generate the test case.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":354060,"byte_end":354087,"line_start":59,"line_end":59,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1772},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":354798,"byte_end":354806,"line_start":74,"line_end":74,"column_start":8,"column_end":16},"name":"prop_map","qualname":"::strategy::traits::Strategy::prop_map","value":"pub fn prop_map<O: fmt::Debug, F: Fn(Self::Value) -> O>(Self, F)\n-> Map<Self, F> where Self: Sized","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Returns a strategy which produces values transformed by the function\n `fun`.","sig":null,"attributes":[{"value":"/ Returns a strategy which produces values transformed by the function","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":354159,"byte_end":354231,"line_start":62,"line_end":62,"column_start":5,"column_end":77}},{"value":"/ `fun`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":354236,"byte_end":354246,"line_start":63,"line_end":63,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":354251,"byte_end":354254,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ There is no need (or possibility, for that matter) to define how the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":354259,"byte_end":354331,"line_start":65,"line_end":65,"column_start":5,"column_end":77}},{"value":"/ output is to be shrunken. Shrinking continues to take place in terms of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":354336,"byte_end":354411,"line_start":66,"line_end":66,"column_start":5,"column_end":80}},{"value":"/ the source value.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":354416,"byte_end":354437,"line_start":67,"line_end":67,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":354442,"byte_end":354445,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ `fun` should be a deterministic function. That is, for a given input","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":354450,"byte_end":354522,"line_start":69,"line_end":69,"column_start":5,"column_end":77}},{"value":"/ value, it should produce an equivalent output value on every call.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":354527,"byte_end":354597,"line_start":70,"line_end":70,"column_start":5,"column_end":75}},{"value":"/ Proptest assumes that it can call the function as many times as needed","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":354602,"byte_end":354676,"line_start":71,"line_end":71,"column_start":5,"column_end":79}},{"value":"/ to generate as many identical values as needed. For this reason, `F` is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":354681,"byte_end":354756,"line_start":72,"line_end":72,"column_start":5,"column_end":80}},{"value":"/ `Fn` rather than `FnMut`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":354761,"byte_end":354790,"line_start":73,"line_end":73,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1775},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":355488,"byte_end":355501,"line_start":96,"line_end":96,"column_start":8,"column_end":21},"name":"prop_map_into","qualname":"::strategy::traits::Strategy::prop_map_into","value":"pub fn prop_map_into<O: fmt::Debug>(Self) -> MapInto<Self, O> where\nSelf: Sized, Self::Value: Into<O>","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Returns a strategy which produces values of type `O` by transforming\n `Self` with `Into<O>`.","sig":null,"attributes":[{"value":"/ Returns a strategy which produces values of type `O` by transforming","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":355030,"byte_end":355102,"line_start":87,"line_end":87,"column_start":5,"column_end":77}},{"value":"/ `Self` with `Into<O>`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":355107,"byte_end":355133,"line_start":88,"line_end":88,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":355138,"byte_end":355141,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ You should always prefer this operation instead of `prop_map` when","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":355146,"byte_end":355216,"line_start":90,"line_end":90,"column_start":5,"column_end":75}},{"value":"/ you can as it is both clearer and also currently more efficient.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":355221,"byte_end":355289,"line_start":91,"line_end":91,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":355294,"byte_end":355297,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ There is no need (or possibility, for that matter) to define how the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":355302,"byte_end":355374,"line_start":93,"line_end":93,"column_start":5,"column_end":77}},{"value":"/ output is to be shrunken. Shrinking continues to take place in terms of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":355379,"byte_end":355454,"line_start":94,"line_end":94,"column_start":5,"column_end":80}},{"value":"/ the source value.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":355459,"byte_end":355480,"line_start":95,"line_end":95,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1777},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":357017,"byte_end":357029,"line_start":137,"line_end":137,"column_start":8,"column_end":20},"name":"prop_perturb","qualname":"::strategy::traits::Strategy::prop_perturb","value":"pub fn prop_perturb<O: fmt::Debug, F: Fn(Self::Value, TestRng) -> O>(Self, F)\n-> Perturb<Self, F> where Self: Sized","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Returns a strategy which produces values transformed by the function\n `fun`, which is additionally given a random number generator.","sig":null,"attributes":[{"value":"/ Returns a strategy which produces values transformed by the function","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":355648,"byte_end":355720,"line_start":104,"line_end":104,"column_start":5,"column_end":77}},{"value":"/ `fun`, which is additionally given a random number generator.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":355725,"byte_end":355790,"line_start":105,"line_end":105,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":355795,"byte_end":355798,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ This is exactly like `prop_map()` except for the addition of the second","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":355803,"byte_end":355878,"line_start":107,"line_end":107,"column_start":5,"column_end":80}},{"value":"/ argument to the function. This allows introducing chaotic variations to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":355883,"byte_end":355958,"line_start":108,"line_end":108,"column_start":5,"column_end":80}},{"value":"/ generated values that are not easily expressed otherwise while allowing","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":355963,"byte_end":356038,"line_start":109,"line_end":109,"column_start":5,"column_end":80}},{"value":"/ shrinking to proceed reasonably.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356043,"byte_end":356079,"line_start":110,"line_end":110,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356084,"byte_end":356087,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ During shrinking, `fun` is always called with an identical random","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356092,"byte_end":356161,"line_start":112,"line_end":112,"column_start":5,"column_end":74}},{"value":"/ number generator, so if it is a pure function it will always perform","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356166,"byte_end":356238,"line_start":113,"line_end":113,"column_start":5,"column_end":77}},{"value":"/ the same perturbation.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356243,"byte_end":356269,"line_start":114,"line_end":114,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356274,"byte_end":356277,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356282,"byte_end":356296,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356301,"byte_end":356304,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356309,"byte_end":356316,"line_start":118,"line_end":118,"column_start":5,"column_end":12}},{"value":"/ // The prelude also gets us the `Rng` trait.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356321,"byte_end":356369,"line_start":119,"line_end":119,"column_start":5,"column_end":53}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356374,"byte_end":356403,"line_start":120,"line_end":120,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356408,"byte_end":356411,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ proptest! {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356416,"byte_end":356431,"line_start":122,"line_end":122,"column_start":5,"column_end":20}},{"value":"/   #[test]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356436,"byte_end":356449,"line_start":123,"line_end":123,"column_start":5,"column_end":18}},{"value":"/   fn test_something(a in (0i32..10).prop_perturb(","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356454,"byte_end":356507,"line_start":124,"line_end":124,"column_start":5,"column_end":58}},{"value":"/       // Perturb the integer `a` (range 0..10) to a pair of that","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356512,"byte_end":356580,"line_start":125,"line_end":125,"column_start":5,"column_end":73}},{"value":"/       // integer and another that's ± 10 of it.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356585,"byte_end":356637,"line_start":126,"line_end":126,"column_start":5,"column_end":56}},{"value":"/       // Note that this particular case would be better implemented as","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356642,"byte_end":356716,"line_start":127,"line_end":127,"column_start":5,"column_end":79}},{"value":"/       // `(0i32..10, -10i32..10).prop_map(|(a, b)| (a, a + b))`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356721,"byte_end":356788,"line_start":128,"line_end":128,"column_start":5,"column_end":72}},{"value":"/       // but is shown here for simplicity.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356793,"byte_end":356839,"line_start":129,"line_end":129,"column_start":5,"column_end":51}},{"value":"/       |centre, rng| (centre, centre + rng.gen_range(-10, 10))))","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356844,"byte_end":356911,"line_start":130,"line_end":130,"column_start":5,"column_end":72}},{"value":"/   {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356916,"byte_end":356923,"line_start":131,"line_end":131,"column_start":5,"column_end":12}},{"value":"/       // Test stuff","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356928,"byte_end":356951,"line_start":132,"line_end":132,"column_start":5,"column_end":28}},{"value":"/   }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356956,"byte_end":356963,"line_start":133,"line_end":133,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356968,"byte_end":356973,"line_start":134,"line_end":134,"column_start":5,"column_end":10}},{"value":"/ # fn main() { }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":356978,"byte_end":356997,"line_start":135,"line_end":135,"column_start":5,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":357002,"byte_end":357009,"line_start":136,"line_end":136,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1780},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":361340,"byte_end":361353,"line_start":238,"line_end":238,"column_start":8,"column_end":21},"name":"prop_flat_map","qualname":"::strategy::traits::Strategy::prop_flat_map","value":"pub fn prop_flat_map<S: Strategy, F: Fn(Self::Value) -> S>(Self, F)\n-> Flatten<Map<Self, F>> where Self: Sized","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Maps values produced by this strategy into new strategies and picks\n values from those strategies.","sig":null,"attributes":[{"value":"/ Maps values produced by this strategy into new strategies and picks","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":357270,"byte_end":357341,"line_start":150,"line_end":150,"column_start":5,"column_end":76}},{"value":"/ values from those strategies.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":357346,"byte_end":357379,"line_start":151,"line_end":151,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":357384,"byte_end":357387,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ `fun` is used to transform the values produced by this strategy into","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":357392,"byte_end":357464,"line_start":153,"line_end":153,"column_start":5,"column_end":77}},{"value":"/ other strategies. Values are then chosen from the derived strategies.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":357469,"byte_end":357542,"line_start":154,"line_end":154,"column_start":5,"column_end":78}},{"value":"/ Shrinking proceeds by shrinking individual values as well as shrinking","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":357547,"byte_end":357621,"line_start":155,"line_end":155,"column_start":5,"column_end":79}},{"value":"/ the input used to generate the internal strategies.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":357626,"byte_end":357681,"line_start":156,"line_end":156,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":357686,"byte_end":357689,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ ## Shrinking","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":357694,"byte_end":357710,"line_start":158,"line_end":158,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":357715,"byte_end":357718,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ In the case of test failure, shrinking will not only shrink the output","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":357723,"byte_end":357797,"line_start":160,"line_end":160,"column_start":5,"column_end":79}},{"value":"/ from the combinator itself, but also the input, i.e., the strategy used","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":357802,"byte_end":357877,"line_start":161,"line_end":161,"column_start":5,"column_end":80}},{"value":"/ to generate the output itself. Doing this requires searching the new","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":357882,"byte_end":357954,"line_start":162,"line_end":162,"column_start":5,"column_end":77}},{"value":"/ derived strategy for a new failing input. The combinator will generate","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":357959,"byte_end":358033,"line_start":163,"line_end":163,"column_start":5,"column_end":79}},{"value":"/ up to `Config::cases` values for this search.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358038,"byte_end":358087,"line_start":164,"line_end":164,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358092,"byte_end":358095,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ As a result, nested `prop_flat_map`/`Flatten` combinators risk","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358100,"byte_end":358166,"line_start":166,"line_end":166,"column_start":5,"column_end":71}},{"value":"/ exponential run time on this search for new failing values. To ensure","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358171,"byte_end":358244,"line_start":167,"line_end":167,"column_start":5,"column_end":78}},{"value":"/ that test failures occur within a reasonable amount of time, all of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358249,"byte_end":358320,"line_start":168,"line_end":168,"column_start":5,"column_end":76}},{"value":"/ these combinators share a single \"flat map regen\" counter, and will","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358325,"byte_end":358396,"line_start":169,"line_end":169,"column_start":5,"column_end":76}},{"value":"/ stop generating new values if it exceeds `Config::max_flat_map_regens`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358401,"byte_end":358476,"line_start":170,"line_end":170,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358481,"byte_end":358484,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358489,"byte_end":358503,"line_start":172,"line_end":172,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358508,"byte_end":358511,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ Generate two integers, where the second is always less than the first,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358516,"byte_end":358590,"line_start":174,"line_end":174,"column_start":5,"column_end":79}},{"value":"/ without using filtering:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358595,"byte_end":358623,"line_start":175,"line_end":175,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358628,"byte_end":358631,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358636,"byte_end":358643,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358648,"byte_end":358677,"line_start":178,"line_end":178,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358682,"byte_end":358685,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ proptest! {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358690,"byte_end":358705,"line_start":180,"line_end":180,"column_start":5,"column_end":20}},{"value":"/   # /*","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358710,"byte_end":358720,"line_start":181,"line_end":181,"column_start":5,"column_end":15}},{"value":"/   #[test]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358725,"byte_end":358738,"line_start":182,"line_end":182,"column_start":5,"column_end":18}},{"value":"/   # */","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358743,"byte_end":358753,"line_start":183,"line_end":183,"column_start":5,"column_end":15}},{"value":"/   fn test_two(","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358758,"byte_end":358776,"line_start":184,"line_end":184,"column_start":5,"column_end":23}},{"value":"/     // Pick integers in the 1..65536 range, and derive a strategy","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358781,"byte_end":358850,"line_start":185,"line_end":185,"column_start":5,"column_end":74}},{"value":"/     // which emits a tuple of that integer and another one which is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358855,"byte_end":358926,"line_start":186,"line_end":186,"column_start":5,"column_end":76}},{"value":"/     // some value less than it.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358931,"byte_end":358966,"line_start":187,"line_end":187,"column_start":5,"column_end":40}},{"value":"/     (a, b) in (1..65536).prop_flat_map(|a| (Just(a), 0..a))","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":358971,"byte_end":359034,"line_start":188,"line_end":188,"column_start":5,"column_end":68}},{"value":"/   ) {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359039,"byte_end":359048,"line_start":189,"line_end":189,"column_start":5,"column_end":14}},{"value":"/     prop_assert!(b < a);","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359053,"byte_end":359081,"line_start":190,"line_end":190,"column_start":5,"column_end":33}},{"value":"/   }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359086,"byte_end":359093,"line_start":191,"line_end":191,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359098,"byte_end":359103,"line_start":192,"line_end":192,"column_start":5,"column_end":10}},{"value":"/ #","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359108,"byte_end":359113,"line_start":193,"line_end":193,"column_start":5,"column_end":10}},{"value":"/ # fn main() { test_two(); }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359118,"byte_end":359149,"line_start":194,"line_end":194,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359154,"byte_end":359161,"line_start":195,"line_end":195,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359166,"byte_end":359169,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ ## Choosing the right flat-map","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359174,"byte_end":359208,"line_start":197,"line_end":197,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359213,"byte_end":359216,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ `Strategy` has three \"flat-map\" combinators. They look very similar at","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359221,"byte_end":359295,"line_start":199,"line_end":199,"column_start":5,"column_end":79}},{"value":"/ first, and can be used to produce superficially identical test results.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359300,"byte_end":359375,"line_start":200,"line_end":200,"column_start":5,"column_end":80}},{"value":"/ For example, the following three expressions all produce inputs which","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359380,"byte_end":359453,"line_start":201,"line_end":201,"column_start":5,"column_end":78}},{"value":"/ are 2-tuples `(a,b)` where the `b` component is less than `a`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359458,"byte_end":359524,"line_start":202,"line_end":202,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359529,"byte_end":359532,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359537,"byte_end":359550,"line_start":204,"line_end":204,"column_start":5,"column_end":18}},{"value":"/ # #![allow(unused_variables)]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359555,"byte_end":359588,"line_start":205,"line_end":205,"column_start":5,"column_end":38}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359593,"byte_end":359622,"line_start":206,"line_end":206,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359627,"byte_end":359630,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ let flat_map = (1..10).prop_flat_map(|a| (Just(a), 0..a));","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359635,"byte_end":359697,"line_start":208,"line_end":208,"column_start":5,"column_end":67}},{"value":"/ let ind_flat_map = (1..10).prop_ind_flat_map(|a| (Just(a), 0..a));","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359702,"byte_end":359772,"line_start":209,"line_end":209,"column_start":5,"column_end":75}},{"value":"/ let ind_flat_map2 = (1..10).prop_ind_flat_map2(|a| 0..a);","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359777,"byte_end":359838,"line_start":210,"line_end":210,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359843,"byte_end":359850,"line_start":211,"line_end":211,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359855,"byte_end":359858,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ The three do differ however in terms of how they shrink.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359863,"byte_end":359923,"line_start":213,"line_end":213,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359928,"byte_end":359931,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ For `flat_map`, both `a` and `b` will shrink, and the invariant that","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":359936,"byte_end":360008,"line_start":215,"line_end":215,"column_start":5,"column_end":77}},{"value":"/ `b < a` is maintained. This is a \"dependent\" or \"higher-order\" strategy","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":360013,"byte_end":360088,"line_start":216,"line_end":216,"column_start":5,"column_end":80}},{"value":"/ in that it remembers that the strategy for choosing `b` is dependent on","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":360093,"byte_end":360168,"line_start":217,"line_end":217,"column_start":5,"column_end":80}},{"value":"/ the value chosen for `a`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":360173,"byte_end":360202,"line_start":218,"line_end":218,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":360207,"byte_end":360210,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ For `ind_flat_map`, the invariant `b < a` is maintained, but only","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":360215,"byte_end":360284,"line_start":220,"line_end":220,"column_start":5,"column_end":74}},{"value":"/ because `a` does not shrink. This is due to the fact that the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":360289,"byte_end":360354,"line_start":221,"line_end":221,"column_start":5,"column_end":70}},{"value":"/ dependency between the strategies is not tracked; `a` is simply seen as","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":360359,"byte_end":360434,"line_start":222,"line_end":222,"column_start":5,"column_end":80}},{"value":"/ a constant.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":360439,"byte_end":360454,"line_start":223,"line_end":223,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":360459,"byte_end":360462,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ Finally, for `ind_flat_map2`, the invariant `b < a` is _not_","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":360467,"byte_end":360531,"line_start":225,"line_end":225,"column_start":5,"column_end":69}},{"value":"/ maintained, because `a` can shrink independently of `b`, again because","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":360536,"byte_end":360610,"line_start":226,"line_end":226,"column_start":5,"column_end":79}},{"value":"/ the dependency between the two variables is not tracked, but in this","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":360615,"byte_end":360687,"line_start":227,"line_end":227,"column_start":5,"column_end":77}},{"value":"/ case the derivation of `a` is still exposed to the shrinking system.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":360692,"byte_end":360764,"line_start":228,"line_end":228,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":360769,"byte_end":360772,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ The use-cases for the independent flat-map variants is pretty narrow.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":360777,"byte_end":360850,"line_start":230,"line_end":230,"column_start":5,"column_end":78}},{"value":"/ For the majority of cases where invariants need to be maintained and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":360855,"byte_end":360927,"line_start":231,"line_end":231,"column_start":5,"column_end":77}},{"value":"/ you want all components to shrink, `prop_flat_map` is the way to go.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":360932,"byte_end":361004,"line_start":232,"line_end":232,"column_start":5,"column_end":77}},{"value":"/ `prop_ind_flat_map` makes the most sense when the input to the map","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":361009,"byte_end":361079,"line_start":233,"line_end":233,"column_start":5,"column_end":75}},{"value":"/ function is not exposed in the output and shrinking across strategies","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":361084,"byte_end":361157,"line_start":234,"line_end":234,"column_start":5,"column_end":78}},{"value":"/ is not expected to be useful. `prop_ind_flat_map2` is useful for using","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":361162,"byte_end":361236,"line_start":235,"line_end":235,"column_start":5,"column_end":79}},{"value":"/ related values as starting points while not constraining them to that","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":361241,"byte_end":361314,"line_start":236,"line_end":236,"column_start":5,"column_end":78}},{"value":"/ relation.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":361319,"byte_end":361332,"line_start":237,"line_end":237,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1783},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":362228,"byte_end":362245,"line_start":264,"line_end":264,"column_start":8,"column_end":25},"name":"prop_ind_flat_map","qualname":"::strategy::traits::Strategy::prop_ind_flat_map","value":"pub fn prop_ind_flat_map<S: Strategy, F: Fn(Self::Value) -> S>(Self, F)\n-> IndFlatten<Map<Self, F>> where Self: Sized","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Maps values produced by this strategy into new strategies and picks\n values from those strategies while considering the new strategies to be\n independent.","sig":null,"attributes":[{"value":"/ Maps values produced by this strategy into new strategies and picks","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":361598,"byte_end":361669,"line_start":251,"line_end":251,"column_start":5,"column_end":76}},{"value":"/ values from those strategies while considering the new strategies to be","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":361674,"byte_end":361749,"line_start":252,"line_end":252,"column_start":5,"column_end":80}},{"value":"/ independent.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":361754,"byte_end":361770,"line_start":253,"line_end":253,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":361775,"byte_end":361778,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This is very similar to `prop_flat_map()`, but shrinking will *not*","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":361783,"byte_end":361854,"line_start":255,"line_end":255,"column_start":5,"column_end":76}},{"value":"/ attempt to shrink the input that produces the derived strategies. This","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":361859,"byte_end":361933,"line_start":256,"line_end":256,"column_start":5,"column_end":79}},{"value":"/ is appropriate for when the derived strategies already fully shrink in","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":361938,"byte_end":362012,"line_start":257,"line_end":257,"column_start":5,"column_end":79}},{"value":"/ the desired way.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":362017,"byte_end":362037,"line_start":258,"line_end":258,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":362042,"byte_end":362045,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ In most cases, you want `prop_flat_map()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":362050,"byte_end":362096,"line_start":260,"line_end":260,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":362101,"byte_end":362104,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ See `prop_flat_map()` for a more detailed explanation on how the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":362109,"byte_end":362177,"line_start":262,"line_end":262,"column_start":5,"column_end":73}},{"value":"/ three flat-map combinators differ.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":362182,"byte_end":362220,"line_start":263,"line_end":263,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1786},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":362780,"byte_end":362798,"line_start":282,"line_end":282,"column_start":8,"column_end":26},"name":"prop_ind_flat_map2","qualname":"::strategy::traits::Strategy::prop_ind_flat_map2","value":"pub fn prop_ind_flat_map2<S: Strategy, F: Fn(Self::Value) -> S>(Self, F)\n-> IndFlattenMap<Self, F> where Self: Sized","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Similar to `prop_ind_flat_map()`, but produces 2-tuples with the input\n generated from `self` in slot 0 and the derived strategy in slot 1.","sig":null,"attributes":[{"value":"/ Similar to `prop_ind_flat_map()`, but produces 2-tuples with the input","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":362491,"byte_end":362565,"line_start":277,"line_end":277,"column_start":5,"column_end":79}},{"value":"/ generated from `self` in slot 0 and the derived strategy in slot 1.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":362570,"byte_end":362641,"line_start":278,"line_end":278,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":362646,"byte_end":362649,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ See `prop_flat_map()` for a more detailed explanation on how the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":362654,"byte_end":362722,"line_start":280,"line_end":280,"column_start":5,"column_end":73}},{"value":"/ three flat-map combinators differ differ.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":362727,"byte_end":362772,"line_start":281,"line_end":281,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1789},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":364171,"byte_end":364182,"line_start":315,"line_end":315,"column_start":8,"column_end":19},"name":"prop_filter","qualname":"::strategy::traits::Strategy::prop_filter","value":"pub fn prop_filter<R: Into<Reason>, F: Fn(&Self::Value) -> bool>(Self, R, F)\n-> Filter<Self, F> where Self: Sized","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Returns a strategy which only produces values accepted by `fun`.","sig":null,"attributes":[{"value":"/ Returns a strategy which only produces values accepted by `fun`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":363040,"byte_end":363108,"line_start":295,"line_end":295,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":363113,"byte_end":363116,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ This results in a very naïve form of rejection sampling and should only","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":363121,"byte_end":363197,"line_start":297,"line_end":297,"column_start":5,"column_end":80}},{"value":"/ be used if (a) relatively few values will actually be rejected; (b) it","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":363202,"byte_end":363276,"line_start":298,"line_end":298,"column_start":5,"column_end":79}},{"value":"/ isn't easy to express what you want by using another strategy and/or","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":363281,"byte_end":363353,"line_start":299,"line_end":299,"column_start":5,"column_end":77}},{"value":"/ `map()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":363358,"byte_end":363370,"line_start":300,"line_end":300,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":363375,"byte_end":363378,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ There are a lot of downsides to this form of filtering. It slows","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":363383,"byte_end":363451,"line_start":302,"line_end":302,"column_start":5,"column_end":73}},{"value":"/ testing down, since values must be generated but then discarded.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":363456,"byte_end":363524,"line_start":303,"line_end":303,"column_start":5,"column_end":73}},{"value":"/ Proptest only allows a limited number of rejects this way (across the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":363529,"byte_end":363602,"line_start":304,"line_end":304,"column_start":5,"column_end":78}},{"value":"/ entire `TestRunner`). Rejection can interfere with shrinking;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":363607,"byte_end":363672,"line_start":305,"line_end":305,"column_start":5,"column_end":70}},{"value":"/ particularly, complex filters may largely or entirely prevent shrinking","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":363677,"byte_end":363752,"line_start":306,"line_end":306,"column_start":5,"column_end":80}},{"value":"/ from substantially altering the original value.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":363757,"byte_end":363808,"line_start":307,"line_end":307,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":363813,"byte_end":363816,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ Local rejection sampling is still preferable to rejecting the entire","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":363821,"byte_end":363893,"line_start":309,"line_end":309,"column_start":5,"column_end":77}},{"value":"/ input to a test (via `TestCaseError::Reject`), however, and the default","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":363898,"byte_end":363973,"line_start":310,"line_end":310,"column_start":5,"column_end":80}},{"value":"/ number of local rejections allowed is much higher than the number of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":363978,"byte_end":364050,"line_start":311,"line_end":311,"column_start":5,"column_end":77}},{"value":"/ whole-input rejections.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":364055,"byte_end":364082,"line_start":312,"line_end":312,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":364087,"byte_end":364090,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ `whence` is used to record where and why the rejection occurred.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":364095,"byte_end":364163,"line_start":314,"line_end":314,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1792},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":365700,"byte_end":365715,"line_start":349,"line_end":349,"column_start":8,"column_end":23},"name":"prop_filter_map","qualname":"::strategy::traits::Strategy::prop_filter_map","value":"pub fn prop_filter_map<F: Fn(Self::Value) -> Option<O>, O: fmt::Debug,\n                       impl Into<Reason>: Into<Reason>>(Self,\n                                                        impl Into<Reason>, F)\n-> FilterMap<Self, F> where Self: Sized","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Returns a strategy which only produces transformed values where `fun`\n returns `Some(value)` and rejects those where `fun` returns `None`.","sig":null,"attributes":[{"value":"/ Returns a strategy which only produces transformed values where `fun`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":364398,"byte_end":364471,"line_start":326,"line_end":326,"column_start":5,"column_end":78}},{"value":"/ returns `Some(value)` and rejects those where `fun` returns `None`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":364476,"byte_end":364547,"line_start":327,"line_end":327,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":364552,"byte_end":364555,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ Using this method is preferable to using `.prop_map(..).prop_filter(..)`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":364560,"byte_end":364637,"line_start":329,"line_end":329,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":364642,"byte_end":364645,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ This results in a very naïve form of rejection sampling and should only","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":364650,"byte_end":364726,"line_start":331,"line_end":331,"column_start":5,"column_end":80}},{"value":"/ be used if (a) relatively few values will actually be rejected; (b) it","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":364731,"byte_end":364805,"line_start":332,"line_end":332,"column_start":5,"column_end":79}},{"value":"/ isn't easy to express what you want by using another strategy and/or","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":364810,"byte_end":364882,"line_start":333,"line_end":333,"column_start":5,"column_end":77}},{"value":"/ `map()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":364887,"byte_end":364899,"line_start":334,"line_end":334,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":364904,"byte_end":364907,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ There are a lot of downsides to this form of filtering. It slows","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":364912,"byte_end":364980,"line_start":336,"line_end":336,"column_start":5,"column_end":73}},{"value":"/ testing down, since values must be generated but then discarded.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":364985,"byte_end":365053,"line_start":337,"line_end":337,"column_start":5,"column_end":73}},{"value":"/ Proptest only allows a limited number of rejects this way (across the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":365058,"byte_end":365131,"line_start":338,"line_end":338,"column_start":5,"column_end":78}},{"value":"/ entire `TestRunner`). Rejection can interfere with shrinking;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":365136,"byte_end":365201,"line_start":339,"line_end":339,"column_start":5,"column_end":70}},{"value":"/ particularly, complex filters may largely or entirely prevent shrinking","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":365206,"byte_end":365281,"line_start":340,"line_end":340,"column_start":5,"column_end":80}},{"value":"/ from substantially altering the original value.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":365286,"byte_end":365337,"line_start":341,"line_end":341,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":365342,"byte_end":365345,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ Local rejection sampling is still preferable to rejecting the entire","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":365350,"byte_end":365422,"line_start":343,"line_end":343,"column_start":5,"column_end":77}},{"value":"/ input to a test (via `TestCaseError::Reject`), however, and the default","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":365427,"byte_end":365502,"line_start":344,"line_end":344,"column_start":5,"column_end":80}},{"value":"/ number of local rejections allowed is much higher than the number of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":365507,"byte_end":365579,"line_start":345,"line_end":345,"column_start":5,"column_end":77}},{"value":"/ whole-input rejections.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":365584,"byte_end":365611,"line_start":346,"line_end":346,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":365616,"byte_end":365619,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ `whence` is used to record where and why the rejection occurred.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":365624,"byte_end":365692,"line_start":348,"line_end":348,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1796},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":366743,"byte_end":366753,"line_start":374,"line_end":374,"column_start":8,"column_end":18},"name":"prop_union","qualname":"::strategy::traits::Strategy::prop_union","value":"pub fn prop_union(Self, Self) -> Union<Self> where Self: Sized","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Returns a strategy which picks uniformly from `self` and `other`.","sig":null,"attributes":[{"value":"/ Returns a strategy which picks uniformly from `self` and `other`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":365955,"byte_end":366024,"line_start":360,"line_end":360,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":366029,"byte_end":366032,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ When shrinking, if a value from `other` was originally chosen but that","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":366037,"byte_end":366111,"line_start":362,"line_end":362,"column_start":5,"column_end":79}},{"value":"/ value can be shrunken no further, it switches to a value from `self`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":366116,"byte_end":366188,"line_start":363,"line_end":363,"column_start":5,"column_end":77}},{"value":"/ and starts shrinking that.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":366193,"byte_end":366223,"line_start":364,"line_end":364,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":366228,"byte_end":366231,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ Be aware that chaining `prop_union` calls will result in a very","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":366236,"byte_end":366303,"line_start":366,"line_end":366,"column_start":5,"column_end":72}},{"value":"/ right-skewed distribution. If this is not what you want, you can call","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":366308,"byte_end":366381,"line_start":367,"line_end":367,"column_start":5,"column_end":78}},{"value":"/ the `.or()` method on the `Union` to add more values to the same union,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":366386,"byte_end":366461,"line_start":368,"line_end":368,"column_start":5,"column_end":80}},{"value":"/ or directly call `Union::new()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":366466,"byte_end":366502,"line_start":369,"line_end":369,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":366507,"byte_end":366510,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ Both `self` and `other` must be of the same type. To combine","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":366515,"byte_end":366579,"line_start":371,"line_end":371,"column_start":5,"column_end":69}},{"value":"/ heterogeneous strategies, call the `boxed()` method on both `self` and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":366584,"byte_end":366658,"line_start":372,"line_end":372,"column_start":5,"column_end":79}},{"value":"/ `other` to erase the type differences before calling `prop_union()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":366663,"byte_end":366735,"line_start":373,"line_end":373,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1797},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":369622,"byte_end":369636,"line_start":448,"line_end":448,"column_start":8,"column_end":22},"name":"prop_recursive","qualname":"::strategy::traits::Strategy::prop_recursive","value":"pub fn prop_recursive<R: Strategy<Value = Self::Value> + 'static,\n                      F: Fn(BoxedStrategy<Self::Value>) ->\n                      R>(Self, u32, u32, u32, F) -> Recursive<Self::Value, F>\nwhere Self: Sized + 'static","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Generate a recursive structure with `self` items as leaves.","sig":null,"attributes":[{"value":"/ Generate a recursive structure with `self` items as leaves.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":366874,"byte_end":366937,"line_start":381,"line_end":381,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":366942,"byte_end":366945,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ `recurse` is applied to various strategies that produce the same type","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":366950,"byte_end":367023,"line_start":383,"line_end":383,"column_start":5,"column_end":78}},{"value":"/ as `self` with nesting depth _n_ to create a strategy that produces the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":367028,"byte_end":367103,"line_start":384,"line_end":384,"column_start":5,"column_end":80}},{"value":"/ same type with nesting depth _n+1_. Generated structures will have a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":367108,"byte_end":367180,"line_start":385,"line_end":385,"column_start":5,"column_end":77}},{"value":"/ depth between 0 and `depth` and will usually have up to `desired_size`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":367185,"byte_end":367259,"line_start":386,"line_end":386,"column_start":5,"column_end":79}},{"value":"/ total elements, though they may have more. `expected_branch_size` gives","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":367264,"byte_end":367339,"line_start":387,"line_end":387,"column_start":5,"column_end":80}},{"value":"/ the expected maximum size for any collection which may contain","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":367344,"byte_end":367410,"line_start":388,"line_end":388,"column_start":5,"column_end":71}},{"value":"/ recursive elements and is used to control branch probability to achieve","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":367415,"byte_end":367490,"line_start":389,"line_end":389,"column_start":5,"column_end":80}},{"value":"/ the desired size. Passing a too small value can result in trees vastly","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":367495,"byte_end":367569,"line_start":390,"line_end":390,"column_start":5,"column_end":79}},{"value":"/ larger than desired.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":367574,"byte_end":367598,"line_start":391,"line_end":391,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":367603,"byte_end":367606,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ Note that `depth` only counts branches; i.e., `depth = 0` is a single","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":367611,"byte_end":367684,"line_start":393,"line_end":393,"column_start":5,"column_end":78}},{"value":"/ leaf, and `depth = 1` is a leaf or a branch containing only leaves.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":367689,"byte_end":367760,"line_start":394,"line_end":394,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":367765,"byte_end":367768,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ In practise, generated values usually have a lower depth than `depth`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":367773,"byte_end":367846,"line_start":396,"line_end":396,"column_start":5,"column_end":78}},{"value":"/ (but `depth` is a hard limit) and almost always under","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":367851,"byte_end":367908,"line_start":397,"line_end":397,"column_start":5,"column_end":62}},{"value":"/ `expected_branch_size` (though it is not a hard limit) since the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":367913,"byte_end":367981,"line_start":398,"line_end":398,"column_start":5,"column_end":73}},{"value":"/ underlying code underestimates probabilities.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":367986,"byte_end":368035,"line_start":399,"line_end":399,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368040,"byte_end":368043,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ Shrinking shrinks both the inner values and attempts switching from","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368048,"byte_end":368119,"line_start":401,"line_end":401,"column_start":5,"column_end":76}},{"value":"/ recursive to non-recursive cases.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368124,"byte_end":368161,"line_start":402,"line_end":402,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368166,"byte_end":368169,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368174,"byte_end":368188,"line_start":404,"line_end":404,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368193,"byte_end":368196,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368201,"byte_end":368219,"line_start":406,"line_end":406,"column_start":5,"column_end":23}},{"value":"/ # #![allow(unused_variables)]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368224,"byte_end":368257,"line_start":407,"line_end":407,"column_start":5,"column_end":38}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368262,"byte_end":368296,"line_start":408,"line_end":408,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368301,"byte_end":368304,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368309,"byte_end":368338,"line_start":410,"line_end":410,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368343,"byte_end":368346,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ /// Define our own JSON AST type","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368351,"byte_end":368387,"line_start":412,"line_end":412,"column_start":5,"column_end":41}},{"value":"/ #[derive(Debug, Clone)]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368392,"byte_end":368419,"line_start":413,"line_end":413,"column_start":5,"column_end":32}},{"value":"/ enum JsonNode {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368424,"byte_end":368443,"line_start":414,"line_end":414,"column_start":5,"column_end":24}},{"value":"/   Null,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368448,"byte_end":368459,"line_start":415,"line_end":415,"column_start":5,"column_end":16}},{"value":"/   Bool(bool),","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368464,"byte_end":368481,"line_start":416,"line_end":416,"column_start":5,"column_end":22}},{"value":"/   Number(f64),","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368486,"byte_end":368504,"line_start":417,"line_end":417,"column_start":5,"column_end":23}},{"value":"/   String(String),","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368509,"byte_end":368530,"line_start":418,"line_end":418,"column_start":5,"column_end":26}},{"value":"/   Array(Vec<JsonNode>),","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368535,"byte_end":368562,"line_start":419,"line_end":419,"column_start":5,"column_end":32}},{"value":"/   Map(HashMap<String, JsonNode>),","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368567,"byte_end":368604,"line_start":420,"line_end":420,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368609,"byte_end":368614,"line_start":421,"line_end":421,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368619,"byte_end":368622,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ # fn main() {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368627,"byte_end":368644,"line_start":423,"line_end":423,"column_start":5,"column_end":22}},{"value":"/ #","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368649,"byte_end":368654,"line_start":424,"line_end":424,"column_start":5,"column_end":10}},{"value":"/ // Define a strategy for generating leaf nodes of the AST","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368659,"byte_end":368720,"line_start":425,"line_end":425,"column_start":5,"column_end":66}},{"value":"/ let json_leaf = prop_oneof![","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368725,"byte_end":368757,"line_start":426,"line_end":426,"column_start":5,"column_end":37}},{"value":"/   Just(JsonNode::Null),","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368762,"byte_end":368789,"line_start":427,"line_end":427,"column_start":5,"column_end":32}},{"value":"/   prop::bool::ANY.prop_map(JsonNode::Bool),","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368794,"byte_end":368841,"line_start":428,"line_end":428,"column_start":5,"column_end":52}},{"value":"/   prop::num::f64::ANY.prop_map(JsonNode::Number),","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368846,"byte_end":368899,"line_start":429,"line_end":429,"column_start":5,"column_end":58}},{"value":"/   \".*\".prop_map(JsonNode::String),","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368904,"byte_end":368942,"line_start":430,"line_end":430,"column_start":5,"column_end":43}},{"value":"/ ];","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368947,"byte_end":368953,"line_start":431,"line_end":431,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368958,"byte_end":368961,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ // Now define a strategy for a whole tree","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":368966,"byte_end":369011,"line_start":433,"line_end":433,"column_start":5,"column_end":50}},{"value":"/ let json_tree = json_leaf.prop_recursive(","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":369016,"byte_end":369061,"line_start":434,"line_end":434,"column_start":5,"column_end":50}},{"value":"/   4, // No more than 4 branch levels deep","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":369066,"byte_end":369111,"line_start":435,"line_end":435,"column_start":5,"column_end":50}},{"value":"/   64, // Target around 64 total elements","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":369116,"byte_end":369160,"line_start":436,"line_end":436,"column_start":5,"column_end":49}},{"value":"/   16, // Each collection is up to 16 elements long","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":369165,"byte_end":369219,"line_start":437,"line_end":437,"column_start":5,"column_end":59}},{"value":"/   |element| prop_oneof![","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":369224,"byte_end":369252,"line_start":438,"line_end":438,"column_start":5,"column_end":33}},{"value":"/     // NB `element` is an `Arc` and we'll need to reference it twice,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":369257,"byte_end":369330,"line_start":439,"line_end":439,"column_start":5,"column_end":78}},{"value":"/     // so we clone it the first time.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":369335,"byte_end":369376,"line_start":440,"line_end":440,"column_start":5,"column_end":46}},{"value":"/     prop::collection::vec(element.clone(), 0..16)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":369381,"byte_end":369434,"line_start":441,"line_end":441,"column_start":5,"column_end":58}},{"value":"/       .prop_map(JsonNode::Array),","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":369439,"byte_end":369476,"line_start":442,"line_end":442,"column_start":5,"column_end":42}},{"value":"/     prop::collection::hash_map(\".*\", element, 0..16)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":369481,"byte_end":369537,"line_start":443,"line_end":443,"column_start":5,"column_end":61}},{"value":"/       .prop_map(JsonNode::Map)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":369542,"byte_end":369576,"line_start":444,"line_end":444,"column_start":5,"column_end":39}},{"value":"/   ]);","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":369581,"byte_end":369590,"line_start":445,"line_end":445,"column_start":5,"column_end":14}},{"value":"/ # }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":369595,"byte_end":369602,"line_start":446,"line_end":446,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":369607,"byte_end":369614,"line_start":447,"line_end":447,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1800},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371250,"byte_end":371262,"line_start":500,"line_end":500,"column_start":8,"column_end":20},"name":"prop_shuffle","qualname":"::strategy::traits::Strategy::prop_shuffle","value":"pub fn prop_shuffle(Self) -> Shuffle<Self> where Self: Sized,\nSelf::Value: Shuffleable","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Shuffle the contents of the values produced by this strategy.","sig":null,"attributes":[{"value":"/ Shuffle the contents of the values produced by this strategy.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370035,"byte_end":370100,"line_start":464,"line_end":464,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370105,"byte_end":370108,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ That is, this modifies a strategy producing a `Vec`, slice, etc, to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370113,"byte_end":370184,"line_start":466,"line_end":466,"column_start":5,"column_end":76}},{"value":"/ shuffle the contents of that `Vec`/slice/etc.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370189,"byte_end":370238,"line_start":467,"line_end":467,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370243,"byte_end":370246,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ Initially, the value is fully shuffled. During shrinking, the input","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370251,"byte_end":370322,"line_start":469,"line_end":469,"column_start":5,"column_end":76}},{"value":"/ value will initially be unchanged while the result will gradually be","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370327,"byte_end":370399,"line_start":470,"line_end":470,"column_start":5,"column_end":77}},{"value":"/ restored to its original order. Once de-shuffling either completes or","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370404,"byte_end":370477,"line_start":471,"line_end":471,"column_start":5,"column_end":78}},{"value":"/ is cancelled by calls to `complicate()` pinning it to a particular","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370482,"byte_end":370552,"line_start":472,"line_end":472,"column_start":5,"column_end":75}},{"value":"/ permutation, the inner value will be simplified.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370557,"byte_end":370609,"line_start":473,"line_end":473,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370614,"byte_end":370617,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ ## Example","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370622,"byte_end":370636,"line_start":475,"line_end":475,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370641,"byte_end":370644,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370649,"byte_end":370656,"line_start":477,"line_end":477,"column_start":5,"column_end":12}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370661,"byte_end":370690,"line_start":478,"line_end":478,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370695,"byte_end":370698,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ static VALUES: &'static [u32] = &[0, 1, 2, 3, 4];","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370703,"byte_end":370756,"line_start":480,"line_end":480,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370761,"byte_end":370764,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ fn is_permutation(orig: &[u32], mut actual: Vec<u32>) -> bool {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370769,"byte_end":370836,"line_start":482,"line_end":482,"column_start":5,"column_end":72}},{"value":"/   actual.sort();","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370841,"byte_end":370861,"line_start":483,"line_end":483,"column_start":5,"column_end":25}},{"value":"/   orig == &actual[..]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370866,"byte_end":370891,"line_start":484,"line_end":484,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370896,"byte_end":370901,"line_start":485,"line_end":485,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370906,"byte_end":370909,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ proptest! {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370914,"byte_end":370929,"line_start":487,"line_end":487,"column_start":5,"column_end":20}},{"value":"/   # /*","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370934,"byte_end":370944,"line_start":488,"line_end":488,"column_start":5,"column_end":15}},{"value":"/   #[test]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370949,"byte_end":370962,"line_start":489,"line_end":489,"column_start":5,"column_end":18}},{"value":"/   # */","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370967,"byte_end":370977,"line_start":490,"line_end":490,"column_start":5,"column_end":15}},{"value":"/   fn test_is_permutation(","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":370982,"byte_end":371011,"line_start":491,"line_end":491,"column_start":5,"column_end":34}},{"value":"/       ref perm in Just(VALUES.to_owned()).prop_shuffle()","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371016,"byte_end":371076,"line_start":492,"line_end":492,"column_start":5,"column_end":65}},{"value":"/   ) {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371081,"byte_end":371090,"line_start":493,"line_end":493,"column_start":5,"column_end":14}},{"value":"/       assert!(is_permutation(VALUES, perm.clone()));","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371095,"byte_end":371151,"line_start":494,"line_end":494,"column_start":5,"column_end":61}},{"value":"/   }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371156,"byte_end":371163,"line_start":495,"line_end":495,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371168,"byte_end":371173,"line_start":496,"line_end":496,"column_start":5,"column_end":10}},{"value":"/ #","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371178,"byte_end":371183,"line_start":497,"line_end":497,"column_start":5,"column_end":10}},{"value":"/ # fn main() { test_is_permutation(); }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371188,"byte_end":371230,"line_start":498,"line_end":498,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371235,"byte_end":371242,"line_start":499,"line_end":499,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1801},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371754,"byte_end":371759,"line_start":516,"line_end":516,"column_start":8,"column_end":13},"name":"boxed","qualname":"::strategy::traits::Strategy::boxed","value":"pub fn boxed(Self) -> BoxedStrategy<Self::Value> where Self: Sized + 'static","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Erases the type of this `Strategy` so it can be passed around as a\n simple trait object.","sig":null,"attributes":[{"value":"/ Erases the type of this `Strategy` so it can be passed around as a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371390,"byte_end":371460,"line_start":508,"line_end":508,"column_start":5,"column_end":75}},{"value":"/ simple trait object.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371465,"byte_end":371489,"line_start":509,"line_end":509,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371494,"byte_end":371497,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ See also `sboxed()` if this `Strategy` is `Send` and `Sync` and you","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371502,"byte_end":371573,"line_start":511,"line_end":511,"column_start":5,"column_end":76}},{"value":"/ want to preserve that information.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371578,"byte_end":371616,"line_start":512,"line_end":512,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371621,"byte_end":371624,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ Strategies of this type afford cheap shallow cloning via reference","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371629,"byte_end":371699,"line_start":514,"line_end":514,"column_start":5,"column_end":75}},{"value":"/ counting by using an `Arc` internally.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371704,"byte_end":371746,"line_start":515,"line_end":515,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1802},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":372261,"byte_end":372267,"line_start":531,"line_end":531,"column_start":8,"column_end":14},"name":"sboxed","qualname":"::strategy::traits::Strategy::sboxed","value":"pub fn sboxed(Self) -> SBoxedStrategy<Self::Value> where Self: Sized + Send +\nSync + 'static","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Erases the type of this `Strategy` so it can be passed around as a\n simple trait object.","sig":null,"attributes":[{"value":"/ Erases the type of this `Strategy` so it can be passed around as a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371914,"byte_end":371984,"line_start":523,"line_end":523,"column_start":5,"column_end":75}},{"value":"/ simple trait object.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":371989,"byte_end":372013,"line_start":524,"line_end":524,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":372018,"byte_end":372021,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ Unlike `boxed()`, this conversion retains the `Send` and `Sync` traits","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":372026,"byte_end":372100,"line_start":526,"line_end":526,"column_start":5,"column_end":79}},{"value":"/ on the output.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":372105,"byte_end":372123,"line_start":527,"line_end":527,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":372128,"byte_end":372131,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ Strategies of this type afford cheap shallow cloning via reference","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":372136,"byte_end":372206,"line_start":529,"line_end":529,"column_start":5,"column_end":75}},{"value":"/ counting by using an `Arc` internally.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":372211,"byte_end":372253,"line_start":530,"line_end":530,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1803},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":373030,"byte_end":373039,"line_start":547,"line_end":547,"column_start":8,"column_end":17},"name":"no_shrink","qualname":"::strategy::traits::Strategy::no_shrink","value":"pub fn no_shrink(Self) -> NoShrink<Self> where Self: Sized","parent":{"krate":0,"index":1768},"children":[],"decl_id":null,"docs":" Wraps this strategy to prevent values from being subject to shrinking.","sig":null,"attributes":[{"value":"/ Wraps this strategy to prevent values from being subject to shrinking.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":372438,"byte_end":372512,"line_start":538,"line_end":538,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":372517,"byte_end":372520,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ Suppressing shrinking is useful when testing things like linear","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":372525,"byte_end":372592,"line_start":540,"line_end":540,"column_start":5,"column_end":72}},{"value":"/ approximation functions. Ordinarily, proptest will tend to shrink the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":372597,"byte_end":372670,"line_start":541,"line_end":541,"column_start":5,"column_end":78}},{"value":"/ input to the function until the result is just barely outside the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":372675,"byte_end":372744,"line_start":542,"line_end":542,"column_start":5,"column_end":74}},{"value":"/ acceptable range whereas the original input may have produced a result","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":372749,"byte_end":372823,"line_start":543,"line_end":543,"column_start":5,"column_end":79}},{"value":"/ far outside of it. Since this makes it harder to see what the actual","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":372828,"byte_end":372900,"line_start":544,"line_end":544,"column_start":5,"column_end":77}},{"value":"/ problem is, making the input `NoShrink` allows learning about inputs","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":372905,"byte_end":372977,"line_start":545,"line_end":545,"column_start":5,"column_end":77}},{"value":"/ that produce more incorrect results.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":372982,"byte_end":373022,"line_start":546,"line_end":546,"column_start":5,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":1804},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374593,"byte_end":374602,"line_start":580,"line_end":580,"column_start":11,"column_end":20},"name":"ValueTree","qualname":"::strategy::traits::ValueTree","value":"ValueTree","parent":null,"children":[{"krate":0,"index":1805},{"krate":0,"index":1806},{"krate":0,"index":1807},{"krate":0,"index":1808}],"decl_id":null,"docs":" A generated value and its associated shrinker.","sig":null,"attributes":[{"value":"/ A generated value and its associated shrinker.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":373133,"byte_end":373183,"line_start":555,"line_end":555,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":373184,"byte_end":373187,"line_start":556,"line_end":556,"column_start":1,"column_end":4}},{"value":"/ Conceptually, a `ValueTree` represents a spectrum between a \"minimally","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":373188,"byte_end":373262,"line_start":557,"line_end":557,"column_start":1,"column_end":75}},{"value":"/ complex\" value and a starting, randomly-chosen value. For values such as","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":373263,"byte_end":373339,"line_start":558,"line_end":558,"column_start":1,"column_end":77}},{"value":"/ numbers, this can be thought of as a simple binary search, and this is how","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":373340,"byte_end":373418,"line_start":559,"line_end":559,"column_start":1,"column_end":79}},{"value":"/ the `ValueTree` state machine is defined.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":373419,"byte_end":373464,"line_start":560,"line_end":560,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":373465,"byte_end":373468,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ The `ValueTree` state machine notionally has three fields: low, current,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":373469,"byte_end":373545,"line_start":562,"line_end":562,"column_start":1,"column_end":77}},{"value":"/ and high. Initially, low is the \"minimally complex\" value for the type, and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":373546,"byte_end":373625,"line_start":563,"line_end":563,"column_start":1,"column_end":80}},{"value":"/ high and current are both the initially chosen value. It can be queried for","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":373626,"byte_end":373705,"line_start":564,"line_end":564,"column_start":1,"column_end":80}},{"value":"/ its current state. When shrinking, the controlling code tries simplifying","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":373706,"byte_end":373783,"line_start":565,"line_end":565,"column_start":1,"column_end":78}},{"value":"/ the value one step. If the test failure still happens with the simplified","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":373784,"byte_end":373861,"line_start":566,"line_end":566,"column_start":1,"column_end":78}},{"value":"/ value, further simplification occurs. Otherwise, the code steps back up","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":373862,"byte_end":373937,"line_start":567,"line_end":567,"column_start":1,"column_end":76}},{"value":"/ towards the prior complexity.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":373938,"byte_end":373971,"line_start":568,"line_end":568,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":373972,"byte_end":373975,"line_start":569,"line_end":569,"column_start":1,"column_end":4}},{"value":"/ The main invariants here are that the \"high\" value always corresponds to a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":373976,"byte_end":374054,"line_start":570,"line_end":570,"column_start":1,"column_end":79}},{"value":"/ failing test case, and that repeated calls to `complicate()` will return","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374055,"byte_end":374131,"line_start":571,"line_end":571,"column_start":1,"column_end":77}},{"value":"/ `false` only once the \"current\" value has returned to what it was before","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374132,"byte_end":374208,"line_start":572,"line_end":572,"column_start":1,"column_end":77}},{"value":"/ the last call to `simplify()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374209,"byte_end":374243,"line_start":573,"line_end":573,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374244,"byte_end":374247,"line_start":574,"line_end":574,"column_start":1,"column_end":4}},{"value":"/ While it would be possible for default do-nothing implementations of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374248,"byte_end":374320,"line_start":575,"line_end":575,"column_start":1,"column_end":73}},{"value":"/ `simplify()` and `complicate()` to be provided, this was not done","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374321,"byte_end":374390,"line_start":576,"line_end":576,"column_start":1,"column_end":70}},{"value":"/ deliberately since the majority of strategies will want to define their own","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374391,"byte_end":374470,"line_start":577,"line_end":577,"column_start":1,"column_end":80}},{"value":"/ shrinking anyway, and the minority that do not must call it out explicitly","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374471,"byte_end":374549,"line_start":578,"line_end":578,"column_start":1,"column_end":79}},{"value":"/ by their own implementation.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374550,"byte_end":374582,"line_start":579,"line_end":579,"column_start":1,"column_end":33}}]},{"kind":"Type","id":{"krate":0,"index":1805},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374674,"byte_end":374679,"line_start":582,"line_end":582,"column_start":10,"column_end":15},"name":"Value","qualname":"::strategy::traits::ValueTree::Value","value":"type Value: fmt::Debug;","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":" The type of the value produced by this `ValueTree`.\n","sig":null,"attributes":[{"value":"/ The type of the value produced by this `ValueTree`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374609,"byte_end":374664,"line_start":581,"line_end":581,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1806},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374736,"byte_end":374743,"line_start":585,"line_end":585,"column_start":8,"column_end":15},"name":"current","qualname":"::strategy::traits::ValueTree::current","value":"pub fn current(&Self) -> Self::Value","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":" Returns the current value.\n","sig":null,"attributes":[{"value":"/ Returns the current value.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374698,"byte_end":374728,"line_start":584,"line_end":584,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1807},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":375401,"byte_end":375409,"line_start":597,"line_end":597,"column_start":8,"column_end":16},"name":"simplify","qualname":"::strategy::traits::ValueTree::simplify","value":"pub fn simplify(&mut Self) -> bool","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":" Attempts to simplify the current value. Notionally, this sets the\n \"high\" value to the current value, and the current value to a \"halfway\n point\" between high and low, rounding towards low.","sig":null,"attributes":[{"value":"/ Attempts to simplify the current value. Notionally, this sets the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374771,"byte_end":374840,"line_start":586,"line_end":586,"column_start":5,"column_end":74}},{"value":"/ \"high\" value to the current value, and the current value to a \"halfway","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374845,"byte_end":374919,"line_start":587,"line_end":587,"column_start":5,"column_end":79}},{"value":"/ point\" between high and low, rounding towards low.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374924,"byte_end":374978,"line_start":588,"line_end":588,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374983,"byte_end":374986,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ Returns whether any state changed as a result of this call. This does","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":374991,"byte_end":375064,"line_start":590,"line_end":590,"column_start":5,"column_end":78}},{"value":"/ not necessarily imply that the value of `current()` has changed, since","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":375069,"byte_end":375143,"line_start":591,"line_end":591,"column_start":5,"column_end":79}},{"value":"/ in the most general case, it is not possible for an implementation to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":375148,"byte_end":375221,"line_start":592,"line_end":592,"column_start":5,"column_end":78}},{"value":"/ determine this.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":375226,"byte_end":375245,"line_start":593,"line_end":593,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":375250,"byte_end":375253,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ This call needs to correctly handle being called even immediately after","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":375258,"byte_end":375333,"line_start":595,"line_end":595,"column_start":5,"column_end":80}},{"value":"/ it had been called previously and returned `false`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":375338,"byte_end":375393,"line_start":596,"line_end":596,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1808},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":376707,"byte_end":376717,"line_start":620,"line_end":620,"column_start":8,"column_end":18},"name":"complicate","qualname":"::strategy::traits::ValueTree::complicate","value":"pub fn complicate(&mut Self) -> bool","parent":{"krate":0,"index":1804},"children":[],"decl_id":null,"docs":" Attempts to partially undo the last simplification. Notionally, this\n sets the \"low\" value to one plus the current value, and the current\n value to a \"halfway point\" between high and the new low, rounding\n towards low.","sig":null,"attributes":[{"value":"/ Attempts to partially undo the last simplification. Notionally, this","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":375434,"byte_end":375506,"line_start":598,"line_end":598,"column_start":5,"column_end":77}},{"value":"/ sets the \"low\" value to one plus the current value, and the current","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":375511,"byte_end":375582,"line_start":599,"line_end":599,"column_start":5,"column_end":76}},{"value":"/ value to a \"halfway point\" between high and the new low, rounding","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":375587,"byte_end":375656,"line_start":600,"line_end":600,"column_start":5,"column_end":74}},{"value":"/ towards low.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":375661,"byte_end":375677,"line_start":601,"line_end":601,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":375682,"byte_end":375685,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ Returns whether any state changed as a result of this call. This does","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":375690,"byte_end":375763,"line_start":603,"line_end":603,"column_start":5,"column_end":78}},{"value":"/ not necessarily imply that the value of `current()` has changed, since","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":375768,"byte_end":375842,"line_start":604,"line_end":604,"column_start":5,"column_end":79}},{"value":"/ in the most general case, it is not possible for an implementation to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":375847,"byte_end":375920,"line_start":605,"line_end":605,"column_start":5,"column_end":78}},{"value":"/ determine this.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":375925,"byte_end":375944,"line_start":606,"line_end":606,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":375949,"byte_end":375952,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ It is usually expected that, immediately after a call to `simplify()`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":375957,"byte_end":376030,"line_start":608,"line_end":608,"column_start":5,"column_end":78}},{"value":"/ which returns true, this call will itself return true. However, this is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":376035,"byte_end":376110,"line_start":609,"line_end":609,"column_start":5,"column_end":80}},{"value":"/ not always the case; in some strategies, particularly those that use","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":376115,"byte_end":376187,"line_start":610,"line_end":610,"column_start":5,"column_end":77}},{"value":"/ some form of rejection sampling, the act of trying to simplify may","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":376192,"byte_end":376262,"line_start":611,"line_end":611,"column_start":5,"column_end":75}},{"value":"/ change the state such that `simplify()` returns true, yet ultimately","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":376267,"byte_end":376339,"line_start":612,"line_end":612,"column_start":5,"column_end":77}},{"value":"/ left the resulting value unchanged, in which case there is nothing left","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":376344,"byte_end":376419,"line_start":613,"line_end":613,"column_start":5,"column_end":80}},{"value":"/ to complicate.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":376424,"byte_end":376442,"line_start":614,"line_end":614,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":376447,"byte_end":376450,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ This call does not need to gracefully handle being called before","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":376455,"byte_end":376523,"line_start":616,"line_end":616,"column_start":5,"column_end":73}},{"value":"/ `simplify()` was ever called, but does need to correctly handle being","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":376528,"byte_end":376601,"line_start":617,"line_end":617,"column_start":5,"column_end":78}},{"value":"/ called even immediately after it had been called previously and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":376606,"byte_end":376673,"line_start":618,"line_end":618,"column_start":5,"column_end":72}},{"value":"/ returned `false`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":376678,"byte_end":376699,"line_start":619,"line_end":619,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":7968},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":377146,"byte_end":377154,"line_start":633,"line_end":633,"column_start":12,"column_end":20},"name":"NoShrink","qualname":"::strategy::traits::NoShrink","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wraps a `Strategy` or `ValueTree` to suppress shrinking of generated\n values.","sig":null,"attributes":[{"value":"/ Wraps a `Strategy` or `ValueTree` to suppress shrinking of generated","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":376916,"byte_end":376988,"line_start":627,"line_end":627,"column_start":1,"column_end":73}},{"value":"/ values.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":376989,"byte_end":377000,"line_start":628,"line_end":628,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":377001,"byte_end":377004,"line_start":629,"line_end":629,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::no_shrink()` for more details.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":377005,"byte_end":377054,"line_start":630,"line_end":630,"column_start":1,"column_end":50}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":377085,"byte_end":377134,"line_start":632,"line_end":632,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":8007},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":378958,"byte_end":378971,"line_start":703,"line_end":703,"column_start":12,"column_end":25},"name":"BoxedStrategy","qualname":"::strategy::traits::BoxedStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" A boxed `Strategy` trait object as produced by `Strategy::boxed()`.","sig":null,"attributes":[{"value":"/ A boxed `Strategy` trait object as produced by `Strategy::boxed()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":378690,"byte_end":378761,"line_start":697,"line_end":697,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":378762,"byte_end":378765,"line_start":698,"line_end":698,"column_start":1,"column_end":4}},{"value":"/ Strategies of this type afford cheap shallow cloning via reference","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":378766,"byte_end":378836,"line_start":699,"line_end":699,"column_start":1,"column_end":71}},{"value":"/ counting by using an `Arc` internally.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":378837,"byte_end":378879,"line_start":700,"line_end":700,"column_start":1,"column_end":43}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":378897,"byte_end":378946,"line_start":702,"line_end":702,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":8014},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":379332,"byte_end":379346,"line_start":712,"line_end":712,"column_start":12,"column_end":26},"name":"SBoxedStrategy","qualname":"::strategy::traits::SBoxedStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" A boxed `Strategy` trait object which is also `Sync` and\n `Send`, as produced by `Strategy::sboxed()`.","sig":null,"attributes":[{"value":"/ A boxed `Strategy` trait object which is also `Sync` and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":379026,"byte_end":379086,"line_start":705,"line_end":705,"column_start":1,"column_end":61}},{"value":"/ `Send`, as produced by `Strategy::sboxed()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":379087,"byte_end":379135,"line_start":706,"line_end":706,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":379136,"byte_end":379139,"line_start":707,"line_end":707,"column_start":1,"column_end":4}},{"value":"/ Strategies of this type afford cheap shallow cloning via reference","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":379140,"byte_end":379210,"line_start":708,"line_end":708,"column_start":1,"column_end":71}},{"value":"/ counting by using an `Arc` internally.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":379211,"byte_end":379253,"line_start":709,"line_end":709,"column_start":1,"column_end":43}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":379271,"byte_end":379320,"line_start":711,"line_end":711,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":8028},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":381172,"byte_end":381198,"line_start":791,"line_end":791,"column_start":12,"column_end":38},"name":"CheckStrategySanityOptions","qualname":"::strategy::traits::CheckStrategySanityOptions","value":"CheckStrategySanityOptions { strict_complicate_after_simplify, error_on_local_rejects, _non_exhaustive }","parent":null,"children":[{"krate":0,"index":8029},{"krate":0,"index":8030},{"krate":0,"index":8031}],"decl_id":null,"docs":" Options passed to `check_strategy_sanity()`.\n","sig":null,"attributes":[{"value":"/ Options passed to `check_strategy_sanity()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":381082,"byte_end":381130,"line_start":789,"line_end":789,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":8029},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":381502,"byte_end":381534,"line_start":797,"line_end":797,"column_start":9,"column_end":41},"name":"strict_complicate_after_simplify","qualname":"::strategy::traits::CheckStrategySanityOptions::strict_complicate_after_simplify","value":"bool","parent":{"krate":0,"index":8028},"children":[],"decl_id":null,"docs":" If true (the default), require that `complicate()` return `true` at\n least once after any call to `simplify()` which itself returns once.","sig":null,"attributes":[{"value":"/ If true (the default), require that `complicate()` return `true` at","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":381205,"byte_end":381276,"line_start":792,"line_end":792,"column_start":5,"column_end":76}},{"value":"/ least once after any call to `simplify()` which itself returns once.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":381281,"byte_end":381353,"line_start":793,"line_end":793,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":381358,"byte_end":381361,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ This property is not required by contract, but many strategies are","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":381366,"byte_end":381436,"line_start":795,"line_end":795,"column_start":5,"column_end":75}},{"value":"/ designed in a way that this is expected to hold.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":381441,"byte_end":381493,"line_start":796,"line_end":796,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":8030},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":381707,"byte_end":381729,"line_start":801,"line_end":801,"column_start":9,"column_end":31},"name":"error_on_local_rejects","qualname":"::strategy::traits::CheckStrategySanityOptions::error_on_local_rejects","value":"bool","parent":{"krate":0,"index":8028},"children":[],"decl_id":null,"docs":" If true, cause local rejects to return an error instead of retrying.\n Defaults to false. Useful for testing behaviors around error handling.\n","sig":null,"attributes":[{"value":"/ If true, cause local rejects to return an error instead of retrying.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":381547,"byte_end":381619,"line_start":799,"line_end":799,"column_start":5,"column_end":77}},{"value":"/ Defaults to false. Useful for testing behaviors around error handling.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":381624,"byte_end":381698,"line_start":800,"line_end":800,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":8031},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":381834,"byte_end":381849,"line_start":806,"line_end":806,"column_start":9,"column_end":24},"name":"_non_exhaustive","qualname":"::strategy::traits::CheckStrategySanityOptions::_non_exhaustive","value":"()","parent":{"krate":0,"index":8028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":381784,"byte_end":381806,"line_start":804,"line_end":804,"column_start":5,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":1855},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":382815,"byte_end":382836,"line_start":833,"line_end":833,"column_start":8,"column_end":29},"name":"check_strategy_sanity","qualname":"::strategy::traits::check_strategy_sanity","value":"pub fn check_strategy_sanity<S: Strategy>(S,\n                                          Option<CheckStrategySanityOptions>)\nwhere S::Tree: Clone + fmt::Debug, S::Value: cmp::PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Run some tests on the given `Strategy` to ensure that it upholds the\n simplify/complicate contracts.","sig":null,"attributes":[{"value":"/ Run some tests on the given `Strategy` to ensure that it upholds the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":382115,"byte_end":382187,"line_start":819,"line_end":819,"column_start":1,"column_end":73}},{"value":"/ simplify/complicate contracts.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":382188,"byte_end":382222,"line_start":820,"line_end":820,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":382223,"byte_end":382226,"line_start":821,"line_end":821,"column_start":1,"column_end":4}},{"value":"/ This is used to internally test proptest, but is made generally available","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":382227,"byte_end":382304,"line_start":822,"line_end":822,"column_start":1,"column_end":78}},{"value":"/ for external implementations to use as well.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":382305,"byte_end":382353,"line_start":823,"line_end":823,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":382354,"byte_end":382357,"line_start":824,"line_end":824,"column_start":1,"column_end":4}},{"value":"/ `options` can be passed to configure the test; if `None`, the defaults are","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":382358,"byte_end":382436,"line_start":825,"line_end":825,"column_start":1,"column_end":79}},{"value":"/ used. Note that the defaults check for certain properties which are **not**","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":382437,"byte_end":382516,"line_start":826,"line_end":826,"column_start":1,"column_end":80}},{"value":"/ actually required by the `Strategy` and `ValueTree` contracts; if you think","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":382517,"byte_end":382596,"line_start":827,"line_end":827,"column_start":1,"column_end":80}},{"value":"/ your code is right but it fails the test, consider whether a non-default","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":382597,"byte_end":382673,"line_start":828,"line_end":828,"column_start":1,"column_end":77}},{"value":"/ configuration is necessary.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":382674,"byte_end":382705,"line_start":829,"line_end":829,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":382706,"byte_end":382709,"line_start":830,"line_end":830,"column_start":1,"column_end":4}},{"value":"/ This can work with fallible strategies, but limits how many times it will","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":382710,"byte_end":382787,"line_start":831,"line_end":831,"column_start":1,"column_end":78}},{"value":"/ retry failures.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":382788,"byte_end":382807,"line_start":832,"line_end":832,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":1888},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":391179,"byte_end":391180,"line_start":23,"line_end":23,"column_start":10,"column_end":11},"name":"W","qualname":"::strategy::unions::W","value":"(u32, T)","parent":null,"children":[],"decl_id":null,"docs":" A **relative** `weight` of a particular `Strategy` corresponding to `T`\n coupled with `T` itself. The weight is currently given in `u32`.\n","sig":null,"attributes":[{"value":"/ A **relative** `weight` of a particular `Strategy` corresponding to `T`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":391025,"byte_end":391100,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/ coupled with `T` itself. The weight is currently given in `u32`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":391101,"byte_end":391169,"line_start":22,"line_end":22,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":1890},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":391349,"byte_end":391351,"line_start":27,"line_end":27,"column_start":10,"column_end":12},"name":"WA","qualname":"::strategy::unions::WA","value":"(u32, Arc<T>)","parent":null,"children":[],"decl_id":null,"docs":" A **relative** `weight` of a particular `Strategy` corresponding to `T`\n coupled with `Arc<T>`. The weight is currently given in `u32`.\n","sig":null,"attributes":[{"value":"/ A **relative** `weight` of a particular `Strategy` corresponding to `T`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":391197,"byte_end":391272,"line_start":25,"line_end":25,"column_start":1,"column_end":76}},{"value":"/ coupled with `Arc<T>`. The weight is currently given in `u32`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":391273,"byte_end":391339,"line_start":26,"line_end":26,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":8037},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":391567,"byte_end":391572,"line_start":34,"line_end":34,"column_start":12,"column_end":17},"name":"Union","qualname":"::strategy::unions::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":8039}],"decl_id":null,"docs":" A `Strategy` which picks from one of several delegate `Stragegy`s.","sig":null,"attributes":[{"value":"/ A `Strategy` which picks from one of several delegate `Stragegy`s.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":391373,"byte_end":391443,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":391444,"byte_end":391447,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ See `Strategy::prop_union()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":391448,"byte_end":391481,"line_start":31,"line_end":31,"column_start":1,"column_end":34}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":391506,"byte_end":391555,"line_start":33,"line_end":33,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1894},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":392126,"byte_end":392129,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"new","qualname":"<Union<T>>::new","value":"pub fn new<impl IntoIterator<Item = T>: IntoIterator<Item =\n           T>>(impl IntoIterator<Item = T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy which selects uniformly from the given delegate\n strategies.","sig":null,"attributes":[{"value":"/ Create a strategy which selects uniformly from the given delegate","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":391771,"byte_end":391840,"line_start":41,"line_end":41,"column_start":5,"column_end":74}},{"value":"/ strategies.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":391845,"byte_end":391860,"line_start":42,"line_end":42,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":391865,"byte_end":391868,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ When shrinking, after maximal simplification of the chosen element, the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":391873,"byte_end":391948,"line_start":44,"line_end":44,"column_start":5,"column_end":80}},{"value":"/ strategy will move to earlier options and continue simplification with","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":391953,"byte_end":392027,"line_start":45,"line_end":45,"column_start":5,"column_end":79}},{"value":"/ those.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":392032,"byte_end":392042,"line_start":46,"line_end":46,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":392047,"byte_end":392050,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":392055,"byte_end":392068,"line_start":48,"line_end":48,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":392073,"byte_end":392076,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ Panics if `options` is empty.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":392081,"byte_end":392114,"line_start":50,"line_end":50,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1902},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":393166,"byte_end":393178,"line_start":81,"line_end":81,"column_start":12,"column_end":24},"name":"new_weighted","qualname":"<Union<T>>::new_weighted","value":"pub fn new_weighted(Vec<W<T>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy which selects from the given delegate strategies.","sig":null,"attributes":[{"value":"/ Create a strategy which selects from the given delegate strategies.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":392663,"byte_end":392734,"line_start":69,"line_end":69,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":392739,"byte_end":392742,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Each strategy is assigned a non-zero weight which determines how","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":392747,"byte_end":392815,"line_start":71,"line_end":71,"column_start":5,"column_end":73}},{"value":"/ frequently that strategy is chosen. For example, a strategy with a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":392820,"byte_end":392890,"line_start":72,"line_end":72,"column_start":5,"column_end":75}},{"value":"/ weight of 2 will be chosen twice as frequently as one with a weight of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":392895,"byte_end":392969,"line_start":73,"line_end":73,"column_start":5,"column_end":79}},{"value":"/ 1\\.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":392974,"byte_end":392981,"line_start":74,"line_end":74,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":392986,"byte_end":392989,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":392994,"byte_end":393007,"line_start":76,"line_end":76,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":393012,"byte_end":393015,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ Panics if `options` is empty or any element has a weight of 0.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":393020,"byte_end":393086,"line_start":78,"line_end":78,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":393091,"byte_end":393094,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Panics if the sum of the weights overflows a `u32`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":393099,"byte_end":393154,"line_start":80,"line_end":80,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1904},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":393758,"byte_end":393760,"line_start":98,"line_end":98,"column_start":12,"column_end":14},"name":"or","qualname":"<Union<T>>::or","value":"pub fn or(Self, T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Add `other` as an additional alternate strategy with weight 1.\n","sig":null,"attributes":[{"value":"/ Add `other` as an additional alternate strategy with weight 1.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":393680,"byte_end":393746,"line_start":97,"line_end":97,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":1917},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":395646,"byte_end":395660,"line_start":166,"line_end":166,"column_start":12,"column_end":26},"name":"UnionValueTree","qualname":"::strategy::unions::UnionValueTree","value":"UnionValueTree {  }","parent":null,"children":[{"krate":0,"index":1919},{"krate":0,"index":1920},{"krate":0,"index":1921},{"krate":0,"index":1922}],"decl_id":null,"docs":" `ValueTree` corresponding to `Union`.\n","sig":null,"attributes":[{"value":"/ `ValueTree` corresponding to `Union`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":395593,"byte_end":395634,"line_start":165,"line_end":165,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":8064},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401355,"byte_end":401365,"line_start":340,"line_end":340,"column_start":12,"column_end":22},"name":"TupleUnion","qualname":"::strategy::unions::TupleUnion","value":"","parent":null,"children":[],"decl_id":null,"docs":" Similar to `Union`, but internally uses a tuple to hold the strategies.","sig":null,"attributes":[{"value":"/ Similar to `Union`, but internally uses a tuple to hold the strategies.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":400868,"byte_end":400943,"line_start":330,"line_end":330,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":400944,"byte_end":400947,"line_start":331,"line_end":331,"column_start":1,"column_end":4}},{"value":"/ This allows better performance than vanilla `Union` since one does not need","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":400948,"byte_end":401027,"line_start":332,"line_end":332,"column_start":1,"column_end":80}},{"value":"/ to resort to boxing and dynamic dispatch to handle heterogeneous","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401028,"byte_end":401096,"line_start":333,"line_end":333,"column_start":1,"column_end":69}},{"value":"/ strategies.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401097,"byte_end":401112,"line_start":334,"line_end":334,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401113,"byte_end":401116,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ The difference between this and `TupleUnion` is that with this, value trees","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401117,"byte_end":401196,"line_start":336,"line_end":336,"column_start":1,"column_end":80}},{"value":"/ for variants that aren't picked at first are generated lazily.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401197,"byte_end":401263,"line_start":337,"line_end":337,"column_start":1,"column_end":67}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401264,"byte_end":401313,"line_start":338,"line_end":338,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1935},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401942,"byte_end":401945,"line_start":353,"line_end":353,"column_start":12,"column_end":15},"name":"new","qualname":"<TupleUnion<T>>::new","value":"pub fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wrap `tuple` in a `TupleUnion`.","sig":null,"attributes":[{"value":"/ Wrap `tuple` in a `TupleUnion`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401402,"byte_end":401437,"line_start":343,"line_end":343,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401442,"byte_end":401445,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ The struct definition allows any `T` for `tuple`, but to be useful, it","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401450,"byte_end":401524,"line_start":345,"line_end":345,"column_start":5,"column_end":79}},{"value":"/ must be a 2- to 10-tuple of `(u32, Arc<impl Strategy>)` pairs where all","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401529,"byte_end":401604,"line_start":346,"line_end":346,"column_start":5,"column_end":80}},{"value":"/ strategies ultimately produce the same value. Each `u32` indicates the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401609,"byte_end":401683,"line_start":347,"line_end":347,"column_start":5,"column_end":79}},{"value":"/ relative weight of its corresponding strategy.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401688,"byte_end":401738,"line_start":348,"line_end":348,"column_start":5,"column_end":55}},{"value":"/ You may use `WA<S>` as an alias for `(u32, Arc<S>)`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401743,"byte_end":401799,"line_start":349,"line_end":349,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401804,"byte_end":401807,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ Using this constructor directly is discouraged; prefer to use","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401812,"byte_end":401877,"line_start":351,"line_end":351,"column_start":5,"column_end":70}},{"value":"/ `prop_oneof!` since it is generally clearer.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401882,"byte_end":401930,"line_start":352,"line_end":352,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":8166},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":404073,"byte_end":404092,"line_start":411,"line_end":411,"column_start":12,"column_end":31},"name":"TupleUnionValueTree","qualname":"::strategy::unions::TupleUnionValueTree","value":"TupleUnionValueTree {  }","parent":null,"children":[{"krate":0,"index":8168},{"krate":0,"index":8169},{"krate":0,"index":8170},{"krate":0,"index":8171}],"decl_id":null,"docs":" `ValueTree` type produced by `TupleUnion`.\n","sig":null,"attributes":[{"value":"/ `ValueTree` type produced by `TupleUnion`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":403985,"byte_end":404031,"line_start":409,"line_end":409,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":1939},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":405602,"byte_end":405617,"line_start":455,"line_end":455,"column_start":8,"column_end":23},"name":"float_to_weight","qualname":"::strategy::unions::float_to_weight","value":"pub fn float_to_weight(f64) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Convert a floating-point weight in the range (0.0,1.0) to a pair of weights\n that can be used with `Union` and similar.","sig":null,"attributes":[{"value":"/ Convert a floating-point weight in the range (0.0,1.0) to a pair of weights","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":404968,"byte_end":405047,"line_start":441,"line_end":441,"column_start":1,"column_end":80}},{"value":"/ that can be used with `Union` and similar.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":405048,"byte_end":405094,"line_start":442,"line_end":442,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":405095,"byte_end":405098,"line_start":443,"line_end":443,"column_start":1,"column_end":4}},{"value":"/ The first return value is the weight corresponding to `f`; the second","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":405099,"byte_end":405172,"line_start":444,"line_end":444,"column_start":1,"column_end":74}},{"value":"/ return value is the weight corresponding to `1.0 - f`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":405173,"byte_end":405231,"line_start":445,"line_end":445,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":405232,"byte_end":405235,"line_start":446,"line_end":446,"column_start":1,"column_end":4}},{"value":"/ This call does not make any guarantees as to what range of weights it may","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":405236,"byte_end":405313,"line_start":447,"line_end":447,"column_start":1,"column_end":78}},{"value":"/ produce, except that adding the two return values will never overflow a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":405314,"byte_end":405389,"line_start":448,"line_end":448,"column_start":1,"column_end":76}},{"value":"/ `u32`. As such, it is generally not meaningful to combine any other weights","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":405390,"byte_end":405469,"line_start":449,"line_end":449,"column_start":1,"column_end":80}},{"value":"/ with the two returned.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":405470,"byte_end":405496,"line_start":450,"line_end":450,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":405497,"byte_end":405500,"line_start":451,"line_end":451,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":405501,"byte_end":405514,"line_start":452,"line_end":452,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":405515,"byte_end":405518,"line_start":453,"line_end":453,"column_start":1,"column_end":4}},{"value":"/ Panics if `f` is not a real number between 0.0 and 1.0, both exclusive.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":405519,"byte_end":405594,"line_start":454,"line_end":454,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":1952},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"statics","qualname":"::strategy::statics","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","parent":null,"children":[{"krate":0,"index":1953},{"krate":0,"index":1956},{"krate":0,"index":1957},{"krate":0,"index":1958},{"krate":0,"index":8441},{"krate":0,"index":8447},{"krate":0,"index":1961},{"krate":0,"index":1965},{"krate":0,"index":1969},{"krate":0,"index":1975},{"krate":0,"index":1979},{"krate":0,"index":1986},{"krate":0,"index":8451},{"krate":0,"index":8456},{"krate":0,"index":1990},{"krate":0,"index":1994},{"krate":0,"index":1998},{"krate":0,"index":2005},{"krate":0,"index":2012},{"krate":0,"index":2017}],"decl_id":null,"docs":" Modified versions of the normal strategy combinators which take specialised\n traits instead of normal functions.","sig":null,"attributes":[{"value":"/ Modified versions of the normal strategy combinators which take specialised","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":413813,"byte_end":413892,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ traits instead of normal functions.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":413893,"byte_end":413932,"line_start":11,"line_end":11,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":413933,"byte_end":413936,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This entire module is strictly a workaround until","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":413937,"byte_end":413990,"line_start":13,"line_end":13,"column_start":1,"column_end":54}},{"value":"/ <https://github.com/rust-lang/rfcs/pull/1522> and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":413991,"byte_end":414044,"line_start":14,"line_end":14,"column_start":1,"column_end":54}},{"value":"/ <https://github.com/rust-lang/rfcs/pull/2071> are available in stable. It","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":414045,"byte_end":414122,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ allows naming types built on the combinators without resorting to dynamic","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":414123,"byte_end":414200,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ dispatch or causing `Arc` to allocate space for a function pointer.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":414201,"byte_end":414272,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":414273,"byte_end":414276,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ External code is discouraged from using this module directly. It is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":414277,"byte_end":414348,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/ deliberately not exposed in a convenient way (i.e., via the `Strategy`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":414349,"byte_end":414423,"line_start":20,"line_end":20,"column_start":1,"column_end":75}},{"value":"/ trait itself), but is nonetheless exposed since external trait implementors","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":414424,"byte_end":414503,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ may face the same issues.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":414504,"byte_end":414533,"line_start":22,"line_end":22,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":414534,"byte_end":414537,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ **This module is subject to removal at some point after the language","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":414538,"byte_end":414610,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/ features linked above become stable.**","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":414611,"byte_end":414653,"line_start":25,"line_end":25,"column_start":1,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":1958},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":414962,"byte_end":414970,"line_start":37,"line_end":37,"column_start":11,"column_end":19},"name":"FilterFn","qualname":"::strategy::statics::FilterFn","value":"FilterFn<T>","parent":null,"children":[{"krate":0,"index":1960}],"decl_id":null,"docs":" Essentially `Fn (&T) -> bool`.\n","sig":null,"attributes":[{"value":"/ Essentially `Fn (&T) -> bool`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":414917,"byte_end":414951,"line_start":36,"line_end":36,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1960},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":415027,"byte_end":415032,"line_start":39,"line_end":39,"column_start":8,"column_end":13},"name":"apply","qualname":"::strategy::statics::FilterFn::apply","value":"pub fn apply(&Self, &T) -> bool","parent":{"krate":0,"index":1958},"children":[],"decl_id":null,"docs":" Test whether `t` passes the filter.\n","sig":null,"attributes":[{"value":"/ Test whether `t` passes the filter.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":414980,"byte_end":415019,"line_start":38,"line_end":38,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":8441},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":415179,"byte_end":415185,"line_start":45,"line_end":45,"column_start":12,"column_end":18},"name":"Filter","qualname":"::strategy::statics::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":8444},{"krate":0,"index":8445},{"krate":0,"index":8446}],"decl_id":null,"docs":" Static version of `strategy::Filter`.\n","sig":null,"attributes":[{"value":"/ Static version of `strategy::Filter`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":415059,"byte_end":415100,"line_start":42,"line_end":42,"column_start":1,"column_end":42}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":415118,"byte_end":415167,"line_start":44,"line_end":44,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1964},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":415414,"byte_end":415417,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<Filter<S, F>>::new","value":"pub fn new(S, Reason, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adapt strategy `source` to reject values which do not pass `filter`,\n using `whence` as the reported reason/location.\n","sig":null,"attributes":[{"value":"/ Adapt strategy `source` to reject values which do not pass `filter`,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":415274,"byte_end":415346,"line_start":52,"line_end":52,"column_start":5,"column_end":77}},{"value":"/ using `whence` as the reported reason/location.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":415351,"byte_end":415402,"line_start":53,"line_end":53,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":1986},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":417747,"byte_end":417752,"line_start":139,"line_end":139,"column_start":11,"column_end":16},"name":"MapFn","qualname":"::strategy::statics::MapFn","value":"MapFn<T>","parent":null,"children":[{"krate":0,"index":1988},{"krate":0,"index":1989}],"decl_id":null,"docs":" Essentially `Fn (T) -> Output`.\n","sig":null,"attributes":[{"value":"/ Essentially `Fn (T) -> Output`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":417701,"byte_end":417736,"line_start":138,"line_end":138,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":1988},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":417794,"byte_end":417800,"line_start":141,"line_end":141,"column_start":10,"column_end":16},"name":"Output","qualname":"::strategy::statics::MapFn::Output","value":"type Output: fmt::Debug;","parent":{"krate":0,"index":1986},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":417762,"byte_end":417784,"line_start":140,"line_end":140,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1989},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":417851,"byte_end":417856,"line_start":144,"line_end":144,"column_start":8,"column_end":13},"name":"apply","qualname":"::strategy::statics::MapFn::apply","value":"pub fn apply(&Self, T) -> Self::Output","parent":{"krate":0,"index":1986},"children":[],"decl_id":null,"docs":" Map `T` to `Output`.\n","sig":null,"attributes":[{"value":"/ Map `T` to `Output`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":417819,"byte_end":417843,"line_start":143,"line_end":143,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":8451},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":418007,"byte_end":418010,"line_start":150,"line_end":150,"column_start":12,"column_end":15},"name":"Map","qualname":"::strategy::statics::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":8454},{"krate":0,"index":8455}],"decl_id":null,"docs":" Static version of `strategy::Map`.\n","sig":null,"attributes":[{"value":"/ Static version of `strategy::Map`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":417890,"byte_end":417928,"line_start":147,"line_end":147,"column_start":1,"column_end":39}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":417946,"byte_end":417995,"line_start":149,"line_end":149,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1993},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":418156,"byte_end":418159,"line_start":157,"line_end":157,"column_start":12,"column_end":15},"name":"new","qualname":"<Map<S, F>>::new","value":"pub fn new(S, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Adapt strategy `source` by applying `fun` to values it produces.\n","sig":null,"attributes":[{"value":"/ Adapt strategy `source` by applying `fun` to values it produces.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":418076,"byte_end":418144,"line_start":156,"line_end":156,"column_start":5,"column_end":73}}]},{"kind":"Mod","id":{"krate":0,"index":2020},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"test_runner","qualname":"::test_runner","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/mod.rs","parent":null,"children":[{"krate":0,"index":2021},{"krate":0,"index":2083},{"krate":0,"index":2110},{"krate":0,"index":2310},{"krate":0,"index":2334},{"krate":0,"index":2392},{"krate":0,"index":2444},{"krate":0,"index":2545},{"krate":0,"index":2717},{"krate":0,"index":2718},{"krate":0,"index":2719},{"krate":0,"index":2720},{"krate":0,"index":2721},{"krate":0,"index":2722},{"krate":0,"index":2723}],"decl_id":null,"docs":" State and functions for running proptest tests.","sig":null,"attributes":[{"value":"/ State and functions for running proptest tests.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/mod.rs","byte_start":421153,"byte_end":421204,"line_start":10,"line_end":10,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/mod.rs","byte_start":421205,"byte_end":421208,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ You do not normally need to access things in this module directly except","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/mod.rs","byte_start":421209,"byte_end":421285,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ when implementing new low-level strategies.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/mod.rs","byte_start":421286,"byte_end":421333,"line_start":13,"line_end":13,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":8471},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427118,"byte_end":427124,"line_start":178,"line_end":178,"column_start":12,"column_end":18},"name":"Config","qualname":"::test_runner::config::Config","value":"Config { cases, max_local_rejects, max_global_rejects, max_flat_map_regens, failure_persistence, source_file, test_name, fork, timeout, max_shrink_time, max_shrink_iters, result_cache, verbose, rng_algorithm, _non_exhaustive }","parent":null,"children":[{"krate":0,"index":8472},{"krate":0,"index":8473},{"krate":0,"index":8474},{"krate":0,"index":8475},{"krate":0,"index":8476},{"krate":0,"index":8477},{"krate":0,"index":8478},{"krate":0,"index":8479},{"krate":0,"index":8480},{"krate":0,"index":8481},{"krate":0,"index":8482},{"krate":0,"index":8483},{"krate":0,"index":8484},{"krate":0,"index":8485},{"krate":0,"index":8486}],"decl_id":null,"docs":" Configuration for how a proptest test should be run.\n","sig":null,"attributes":[{"value":"/ Configuration for how a proptest test should be run.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427015,"byte_end":427071,"line_start":176,"line_end":176,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":8472},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427443,"byte_end":427448,"line_start":186,"line_end":186,"column_start":9,"column_end":14},"name":"cases","qualname":"::test_runner::config::Config::cases","value":"u32","parent":{"krate":0,"index":8471},"children":[],"decl_id":null,"docs":" The number of successful test cases that must execute for the test as a\n whole to pass.","sig":null,"attributes":[{"value":"/ The number of successful test cases that must execute for the test as a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427131,"byte_end":427206,"line_start":179,"line_end":179,"column_start":5,"column_end":80}},{"value":"/ whole to pass.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427211,"byte_end":427229,"line_start":180,"line_end":180,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427234,"byte_end":427237,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ This does not include implicitly-replayed persisted failing cases.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427242,"byte_end":427312,"line_start":182,"line_end":182,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427317,"byte_end":427320,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ The default is 256, which can be overridden by setting the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427325,"byte_end":427387,"line_start":184,"line_end":184,"column_start":5,"column_end":67}},{"value":"/ `PROPTEST_CASES` environment variable.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427392,"byte_end":427434,"line_start":185,"line_end":185,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":8473},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427712,"byte_end":427729,"line_start":193,"line_end":193,"column_start":9,"column_end":26},"name":"max_local_rejects","qualname":"::test_runner::config::Config::max_local_rejects","value":"u32","parent":{"krate":0,"index":8471},"children":[],"decl_id":null,"docs":" The maximum number of individual inputs that may be rejected before the\n test as a whole aborts.","sig":null,"attributes":[{"value":"/ The maximum number of individual inputs that may be rejected before the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427460,"byte_end":427535,"line_start":188,"line_end":188,"column_start":5,"column_end":80}},{"value":"/ test as a whole aborts.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427540,"byte_end":427567,"line_start":189,"line_end":189,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427572,"byte_end":427575,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ The default is 65536, which can be overridden by setting the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427580,"byte_end":427644,"line_start":191,"line_end":191,"column_start":5,"column_end":69}},{"value":"/ `PROPTEST_MAX_LOCAL_REJECTS` environment variable.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427649,"byte_end":427703,"line_start":192,"line_end":192,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":8474},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427991,"byte_end":428009,"line_start":200,"line_end":200,"column_start":9,"column_end":27},"name":"max_global_rejects","qualname":"::test_runner::config::Config::max_global_rejects","value":"u32","parent":{"krate":0,"index":8471},"children":[],"decl_id":null,"docs":" The maximum number of combined inputs that may be rejected before the\n test as a whole aborts.","sig":null,"attributes":[{"value":"/ The maximum number of combined inputs that may be rejected before the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427741,"byte_end":427814,"line_start":195,"line_end":195,"column_start":5,"column_end":78}},{"value":"/ test as a whole aborts.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427819,"byte_end":427846,"line_start":196,"line_end":196,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427851,"byte_end":427854,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ The default is 1024, which can be overridden by setting the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427859,"byte_end":427922,"line_start":198,"line_end":198,"column_start":5,"column_end":68}},{"value":"/ `PROPTEST_MAX_GLOBAL_REJECTS` environment variable.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":427927,"byte_end":427982,"line_start":199,"line_end":199,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":8475},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":428378,"byte_end":428397,"line_start":208,"line_end":208,"column_start":9,"column_end":28},"name":"max_flat_map_regens","qualname":"::test_runner::config::Config::max_flat_map_regens","value":"u32","parent":{"krate":0,"index":8471},"children":[],"decl_id":null,"docs":" The maximum number of times all `Flatten` combinators will attempt to\n regenerate values. This puts a limit on the worst-case exponential\n explosion that can happen with nested `Flatten`s.","sig":null,"attributes":[{"value":"/ The maximum number of times all `Flatten` combinators will attempt to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":428021,"byte_end":428094,"line_start":202,"line_end":202,"column_start":5,"column_end":78}},{"value":"/ regenerate values. This puts a limit on the worst-case exponential","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":428099,"byte_end":428169,"line_start":203,"line_end":203,"column_start":5,"column_end":75}},{"value":"/ explosion that can happen with nested `Flatten`s.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":428174,"byte_end":428227,"line_start":204,"line_end":204,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":428232,"byte_end":428235,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ The default is 1_000_000, which can be overridden by setting the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":428240,"byte_end":428308,"line_start":206,"line_end":206,"column_start":5,"column_end":73}},{"value":"/ `PROPTEST_MAX_FLAT_MAP_REGENS` environment variable.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":428313,"byte_end":428369,"line_start":207,"line_end":207,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":8476},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429047,"byte_end":429066,"line_start":221,"line_end":221,"column_start":9,"column_end":28},"name":"failure_persistence","qualname":"::test_runner::config::Config::failure_persistence","value":"core::option::Option<std::boxed::Box<(dyn test_runner::failure_persistence::FailurePersistence + 'static)>>","parent":{"krate":0,"index":8471},"children":[],"decl_id":null,"docs":" Indicates whether and how to persist failed test results.","sig":null,"attributes":[{"value":"/ Indicates whether and how to persist failed test results.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":428409,"byte_end":428470,"line_start":210,"line_end":210,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":428475,"byte_end":428478,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ When compiling with \"std\" feature (i.e. the standard library is available), the default","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":428483,"byte_end":428574,"line_start":212,"line_end":212,"column_start":5,"column_end":96}},{"value":"/ is `Some(Box::new(FileFailurePersistence::SourceParallel(\"proptest-regressions\")))`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":428579,"byte_end":428667,"line_start":213,"line_end":213,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":428672,"byte_end":428675,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ Without the standard library, the default is `None`, and no persistence occurs.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":428680,"byte_end":428763,"line_start":215,"line_end":215,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":428768,"byte_end":428771,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ See the docs of [`FileFailurePersistence`](enum.FileFailurePersistence.html)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":428776,"byte_end":428856,"line_start":217,"line_end":217,"column_start":5,"column_end":85}},{"value":"/ and [`MapFailurePersistence`](struct.MapFailurePersistence.html) for more information.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":428861,"byte_end":428951,"line_start":218,"line_end":218,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":428956,"byte_end":428959,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ The default cannot currently be overridden by an environment variable.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":428964,"byte_end":429038,"line_start":220,"line_end":220,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":8477},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429506,"byte_end":429517,"line_start":231,"line_end":231,"column_start":9,"column_end":20},"name":"source_file","qualname":"::test_runner::config::Config::source_file","value":"core::option::Option<&'static str>","parent":{"krate":0,"index":8471},"children":[],"decl_id":null,"docs":" File location of the current test, relevant for persistence\n and debugging.","sig":null,"attributes":[{"value":"/ File location of the current test, relevant for persistence","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429110,"byte_end":429173,"line_start":223,"line_end":223,"column_start":5,"column_end":68}},{"value":"/ and debugging.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429178,"byte_end":429196,"line_start":224,"line_end":224,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429201,"byte_end":429204,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Note the use of `&str` rather than `Path` to be compatible with","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429209,"byte_end":429276,"line_start":226,"line_end":226,"column_start":5,"column_end":72}},{"value":"/ `#![no_std]` use cases where `Path` is unavailable.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429281,"byte_end":429336,"line_start":227,"line_end":227,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429341,"byte_end":429344,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ See the docs of [`FileFailurePersistence`](enum.FileFailurePersistence.html)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429349,"byte_end":429429,"line_start":229,"line_end":229,"column_start":5,"column_end":85}},{"value":"/ for more information on how it may be used for persistence.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429434,"byte_end":429497,"line_start":230,"line_end":230,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":8478},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429914,"byte_end":429923,"line_start":241,"line_end":241,"column_start":9,"column_end":18},"name":"test_name","qualname":"::test_runner::config::Config::test_name","value":"core::option::Option<&'static str>","parent":{"krate":0,"index":8471},"children":[],"decl_id":null,"docs":" The fully-qualified name of the test being run, as would be passed to\n the test executable to run just that test.","sig":null,"attributes":[{"value":"/ The fully-qualified name of the test being run, as would be passed to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429546,"byte_end":429619,"line_start":233,"line_end":233,"column_start":5,"column_end":78}},{"value":"/ the test executable to run just that test.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429624,"byte_end":429670,"line_start":234,"line_end":234,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429675,"byte_end":429678,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ This must be set if `fork` is `true`. Otherwise, it is unused. It is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429683,"byte_end":429755,"line_start":236,"line_end":236,"column_start":5,"column_end":77}},{"value":"/ automatically set by `proptest!`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429760,"byte_end":429797,"line_start":237,"line_end":237,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429802,"byte_end":429805,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ This must include the crate name at the beginning, as produced by","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429810,"byte_end":429879,"line_start":239,"line_end":239,"column_start":5,"column_end":74}},{"value":"/ `module_path!()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429884,"byte_end":429905,"line_start":240,"line_end":240,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":8479},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430610,"byte_end":430614,"line_start":257,"line_end":257,"column_start":9,"column_end":13},"name":"fork","qualname":"::test_runner::config::Config::fork","value":"bool","parent":{"krate":0,"index":8471},"children":[],"decl_id":null,"docs":" If true, tests are run in a subprocess.","sig":null,"attributes":[{"value":"/ If true, tests are run in a subprocess.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":429952,"byte_end":429995,"line_start":243,"line_end":243,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430000,"byte_end":430003,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Forking allows proptest to work with tests which may fail by aborting","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430008,"byte_end":430081,"line_start":245,"line_end":245,"column_start":5,"column_end":78}},{"value":"/ the process, causing a segmentation fault, etc, but can be a lot slower","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430086,"byte_end":430161,"line_start":246,"line_end":246,"column_start":5,"column_end":80}},{"value":"/ in certain environments or when running a very large number of tests.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430166,"byte_end":430239,"line_start":247,"line_end":247,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430244,"byte_end":430247,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ For forking to work correctly, both the `Strategy` and the content of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430252,"byte_end":430325,"line_start":249,"line_end":249,"column_start":5,"column_end":78}},{"value":"/ the test case itself must be deterministic.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430330,"byte_end":430377,"line_start":250,"line_end":250,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430382,"byte_end":430385,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ This requires the \"fork\" feature, enabled by default.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430390,"byte_end":430447,"line_start":252,"line_end":252,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430452,"byte_end":430455,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ The default is `false`, which can be overridden by setting the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430460,"byte_end":430526,"line_start":254,"line_end":254,"column_start":5,"column_end":71}},{"value":"/ `PROPTEST_FORK` environment variable.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430531,"byte_end":430572,"line_start":255,"line_end":255,"column_start":5,"column_end":46}},{"value":"cfg(feature = \"fork\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430577,"byte_end":430601,"line_start":256,"line_end":256,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":8480},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431413,"byte_end":431420,"line_start":276,"line_end":276,"column_start":9,"column_end":16},"name":"timeout","qualname":"::test_runner::config::Config::timeout","value":"u32","parent":{"krate":0,"index":8471},"children":[],"decl_id":null,"docs":" If non-zero, tests are run in a subprocess and each generated case\n fails if it takes longer than this number of milliseconds.","sig":null,"attributes":[{"value":"/ If non-zero, tests are run in a subprocess and each generated case","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430627,"byte_end":430697,"line_start":259,"line_end":259,"column_start":5,"column_end":75}},{"value":"/ fails if it takes longer than this number of milliseconds.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430702,"byte_end":430764,"line_start":260,"line_end":260,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430769,"byte_end":430772,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ This implicitly enables forking, even if the `fork` field is `false`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430777,"byte_end":430850,"line_start":262,"line_end":262,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430855,"byte_end":430858,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ The type here is plain `u32` (rather than","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430863,"byte_end":430908,"line_start":264,"line_end":264,"column_start":5,"column_end":50}},{"value":"/ `Option<std::time::Duration>`) for the sake of ergonomics.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430913,"byte_end":430975,"line_start":265,"line_end":265,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430980,"byte_end":430983,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ This requires the \"timeout\" feature, enabled by default.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":430988,"byte_end":431048,"line_start":267,"line_end":267,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431053,"byte_end":431056,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ Setting a timeout to less than the time it takes the process to start","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431061,"byte_end":431134,"line_start":269,"line_end":269,"column_start":5,"column_end":78}},{"value":"/ up and initialise the first test case will cause the whole test to be","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431139,"byte_end":431212,"line_start":270,"line_end":270,"column_start":5,"column_end":78}},{"value":"/ aborted.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431217,"byte_end":431229,"line_start":271,"line_end":271,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431234,"byte_end":431237,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ The default is `0` (i.e., no timeout), which can be overridden by","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431242,"byte_end":431311,"line_start":273,"line_end":273,"column_start":5,"column_end":74}},{"value":"/ setting the `PROPTEST_TIMEOUT` environment variable.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431316,"byte_end":431372,"line_start":274,"line_end":274,"column_start":5,"column_end":61}},{"value":"cfg(feature = \"timeout\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431377,"byte_end":431404,"line_start":275,"line_end":275,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":8481},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431961,"byte_end":431976,"line_start":289,"line_end":289,"column_start":9,"column_end":24},"name":"max_shrink_time","qualname":"::test_runner::config::Config::max_shrink_time","value":"u32","parent":{"krate":0,"index":8471},"children":[],"decl_id":null,"docs":" If non-zero, give up the shrinking process after this many milliseconds\n have elapsed since the start of the shrinking process.","sig":null,"attributes":[{"value":"/ If non-zero, give up the shrinking process after this many milliseconds","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431432,"byte_end":431507,"line_start":278,"line_end":278,"column_start":5,"column_end":80}},{"value":"/ have elapsed since the start of the shrinking process.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431512,"byte_end":431570,"line_start":279,"line_end":279,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431575,"byte_end":431578,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ This will not cause currently running test cases to be interrupted.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431583,"byte_end":431654,"line_start":281,"line_end":281,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431659,"byte_end":431662,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This configuration is only available when the `std` feature is enabled","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431667,"byte_end":431741,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/ (which it is by default).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431746,"byte_end":431775,"line_start":284,"line_end":284,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431780,"byte_end":431783,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ The default is `0` (i.e., no limit), which can be overridden by setting","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431788,"byte_end":431863,"line_start":286,"line_end":286,"column_start":5,"column_end":80}},{"value":"/ the `PROPTEST_MAX_SHRINK_TIME` environment variable.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431868,"byte_end":431924,"line_start":287,"line_end":287,"column_start":5,"column_end":61}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431929,"byte_end":431952,"line_start":288,"line_end":288,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":8482},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432578,"byte_end":432594,"line_start":304,"line_end":304,"column_start":9,"column_end":25},"name":"max_shrink_iters","qualname":"::test_runner::config::Config::max_shrink_iters","value":"u32","parent":{"krate":0,"index":8471},"children":[],"decl_id":null,"docs":" Give up on shrinking if more than this number of iterations of the test\n code are run.","sig":null,"attributes":[{"value":"/ Give up on shrinking if more than this number of iterations of the test","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":431988,"byte_end":432063,"line_start":291,"line_end":291,"column_start":5,"column_end":80}},{"value":"/ code are run.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432068,"byte_end":432085,"line_start":292,"line_end":292,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432090,"byte_end":432093,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ Setting this to `std::u32::MAX` causes the actual limit to be four","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432098,"byte_end":432168,"line_start":294,"line_end":294,"column_start":5,"column_end":75}},{"value":"/ times the number of test cases.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432173,"byte_end":432208,"line_start":295,"line_end":295,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432213,"byte_end":432216,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ Setting this value to `0` disables shrinking altogether.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432221,"byte_end":432281,"line_start":297,"line_end":297,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432286,"byte_end":432289,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ Note that the type of this field will change in a future version of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432294,"byte_end":432365,"line_start":299,"line_end":299,"column_start":5,"column_end":76}},{"value":"/ proptest to better accommodate its special values.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432370,"byte_end":432424,"line_start":300,"line_end":300,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432429,"byte_end":432432,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ The default is `std::u32::MAX`, which can be overridden by setting the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432437,"byte_end":432511,"line_start":302,"line_end":302,"column_start":5,"column_end":79}},{"value":"/ `PROPTEST_MAX_SHRINK_ITERS` environment variable.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432516,"byte_end":432569,"line_start":303,"line_end":303,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":8483},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433418,"byte_end":433430,"line_start":322,"line_end":322,"column_start":9,"column_end":21},"name":"result_cache","qualname":"::test_runner::config::Config::result_cache","value":"fn() -> std::boxed::Box<(dyn test_runner::result_cache::ResultCache + 'static)>","parent":{"krate":0,"index":8471},"children":[],"decl_id":null,"docs":" A function to create new result caches.","sig":null,"attributes":[{"value":"/ A function to create new result caches.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432606,"byte_end":432649,"line_start":306,"line_end":306,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432654,"byte_end":432657,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ The default is to do no caching. The easiest way to enable caching is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432662,"byte_end":432735,"line_start":308,"line_end":308,"column_start":5,"column_end":78}},{"value":"/ to set this field to `basic_result_cache` (though that is currently","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432740,"byte_end":432811,"line_start":309,"line_end":309,"column_start":5,"column_end":76}},{"value":"/ only available with the `std` feature).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432816,"byte_end":432859,"line_start":310,"line_end":310,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432864,"byte_end":432867,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ This is useful for strategies which have a tendency to produce","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432872,"byte_end":432938,"line_start":312,"line_end":312,"column_start":5,"column_end":71}},{"value":"/ duplicate values, or for tests where shrinking can take a very long","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":432943,"byte_end":433014,"line_start":313,"line_end":313,"column_start":5,"column_end":76}},{"value":"/ time due to exploring the same output multiple times.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433019,"byte_end":433076,"line_start":314,"line_end":314,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433081,"byte_end":433084,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ When caching is enabled, generated values themselves are not stored, so","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433089,"byte_end":433164,"line_start":316,"line_end":316,"column_start":5,"column_end":80}},{"value":"/ this does not pose a risk of memory exhaustion for large test inputs","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433169,"byte_end":433241,"line_start":317,"line_end":317,"column_start":5,"column_end":77}},{"value":"/ unless using extraordinarily large test case counts.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433246,"byte_end":433302,"line_start":318,"line_end":318,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433307,"byte_end":433310,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ Caching incurs its own overhead, and may very well make your test run","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433315,"byte_end":433388,"line_start":320,"line_end":320,"column_start":5,"column_end":78}},{"value":"/ more slowly.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433393,"byte_end":433409,"line_start":321,"line_end":321,"column_start":5,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":8484},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434150,"byte_end":434157,"line_start":340,"line_end":340,"column_start":9,"column_end":16},"name":"verbose","qualname":"::test_runner::config::Config::verbose","value":"u32","parent":{"krate":0,"index":8471},"children":[],"decl_id":null,"docs":" Set to non-zero values to cause proptest to emit human-targeted\n messages to stderr as it runs.","sig":null,"attributes":[{"value":"/ Set to non-zero values to cause proptest to emit human-targeted","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433467,"byte_end":433534,"line_start":324,"line_end":324,"column_start":5,"column_end":72}},{"value":"/ messages to stderr as it runs.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433539,"byte_end":433573,"line_start":325,"line_end":325,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433578,"byte_end":433581,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ Greater values cause greater amounts of logs to be emitted. The exact","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433586,"byte_end":433659,"line_start":327,"line_end":327,"column_start":5,"column_end":78}},{"value":"/ meaning of certain levels other than 0 is subject to change.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433664,"byte_end":433728,"line_start":328,"line_end":328,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433733,"byte_end":433736,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ - 0: No extra output.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433741,"byte_end":433766,"line_start":330,"line_end":330,"column_start":5,"column_end":30}},{"value":"/ - 1: Log test failure messages.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433771,"byte_end":433806,"line_start":331,"line_end":331,"column_start":5,"column_end":40}},{"value":"/ - 2: Trace low-level details.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433811,"byte_end":433844,"line_start":332,"line_end":332,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433849,"byte_end":433852,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ This is only available with the `std` feature (enabled by default)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433857,"byte_end":433927,"line_start":334,"line_end":334,"column_start":5,"column_end":75}},{"value":"/ since on nostd proptest has no way to produce output.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433932,"byte_end":433989,"line_start":335,"line_end":335,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":433994,"byte_end":433997,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ The default is `0`, which can be overridden by setting the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434002,"byte_end":434064,"line_start":337,"line_end":337,"column_start":5,"column_end":67}},{"value":"/ `PROPTEST_VERBOSE` environment variable.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434069,"byte_end":434113,"line_start":338,"line_end":338,"column_start":5,"column_end":49}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434118,"byte_end":434141,"line_start":339,"line_end":339,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":8485},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434512,"byte_end":434525,"line_start":349,"line_end":349,"column_start":9,"column_end":22},"name":"rng_algorithm","qualname":"::test_runner::config::Config::rng_algorithm","value":"test_runner::rng::RngAlgorithm","parent":{"krate":0,"index":8471},"children":[],"decl_id":null,"docs":" The RNG algorithm to use when not using a user-provided RNG.","sig":null,"attributes":[{"value":"/ The RNG algorithm to use when not using a user-provided RNG.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434169,"byte_end":434233,"line_start":342,"line_end":342,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434238,"byte_end":434241,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ The default is `RngAlgorithm::default()`, which can be overridden by","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434246,"byte_end":434318,"line_start":344,"line_end":344,"column_start":5,"column_end":77}},{"value":"/ setting the `PROPTEST_RNG_ALGORITHM` environment variable to one of the following:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434323,"byte_end":434409,"line_start":345,"line_end":345,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434414,"byte_end":434417,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ - `xs` — `RngAlgorithm::XorShift`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434422,"byte_end":434461,"line_start":347,"line_end":347,"column_start":5,"column_end":42}},{"value":"/ - `cc` — `RngAlgorithm::ChaCha`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434466,"byte_end":434503,"line_start":348,"line_end":348,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":8486},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434622,"byte_end":434637,"line_start":353,"line_end":353,"column_start":9,"column_end":24},"name":"_non_exhaustive","qualname":"::test_runner::config::Config::_non_exhaustive","value":"()","parent":{"krate":0,"index":8471},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2073},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435115,"byte_end":435125,"line_start":370,"line_end":370,"column_start":12,"column_end":22},"name":"with_cases","qualname":"<Config>::with_cases","value":"pub fn with_cases(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `Config` only differing from the `default()` in the\n number of test cases required to pass the test successfully.","sig":null,"attributes":[{"value":"/ Constructs a `Config` only differing from the `default()` in the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434664,"byte_end":434732,"line_start":357,"line_end":357,"column_start":5,"column_end":73}},{"value":"/ number of test cases required to pass the test successfully.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434737,"byte_end":434801,"line_start":358,"line_end":358,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434806,"byte_end":434809,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ This is simply a more concise alternative to using field-record update","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434814,"byte_end":434888,"line_start":360,"line_end":360,"column_start":5,"column_end":79}},{"value":"/ syntax:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434893,"byte_end":434904,"line_start":361,"line_end":361,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434909,"byte_end":434912,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434917,"byte_end":434924,"line_start":363,"line_end":363,"column_start":5,"column_end":12}},{"value":"/ # use proptest::test_runner::Config;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434929,"byte_end":434969,"line_start":364,"line_end":364,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434974,"byte_end":434989,"line_start":365,"line_end":365,"column_start":5,"column_end":20}},{"value":"/     Config::with_cases(42),","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434994,"byte_end":435025,"line_start":366,"line_end":366,"column_start":5,"column_end":36}},{"value":"/     Config { cases: 42, .. Config::default() }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435030,"byte_end":435080,"line_start":367,"line_end":367,"column_start":5,"column_end":55}},{"value":"/ );","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435085,"byte_end":435091,"line_start":368,"line_end":368,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435096,"byte_end":435103,"line_start":369,"line_end":369,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2074},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435710,"byte_end":435726,"line_start":390,"line_end":390,"column_start":12,"column_end":28},"name":"with_source_file","qualname":"<Config>::with_source_file","value":"pub fn with_source_file(&'static str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `Config` only differing from the `default()` in the\n source_file of the present test.","sig":null,"attributes":[{"value":"/ Constructs a `Config` only differing from the `default()` in the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435235,"byte_end":435303,"line_start":377,"line_end":377,"column_start":5,"column_end":73}},{"value":"/ source_file of the present test.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435308,"byte_end":435344,"line_start":378,"line_end":378,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435349,"byte_end":435352,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ This is simply a more concise alternative to using field-record update","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435357,"byte_end":435431,"line_start":380,"line_end":380,"column_start":5,"column_end":79}},{"value":"/ syntax:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435436,"byte_end":435447,"line_start":381,"line_end":381,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435452,"byte_end":435455,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435460,"byte_end":435467,"line_start":383,"line_end":383,"column_start":5,"column_end":12}},{"value":"/ # use proptest::test_runner::Config;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435472,"byte_end":435512,"line_start":384,"line_end":384,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435517,"byte_end":435532,"line_start":385,"line_end":385,"column_start":5,"column_end":20}},{"value":"/     Config::with_source_file(\"computer/question\"),","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435537,"byte_end":435591,"line_start":386,"line_end":386,"column_start":5,"column_end":59}},{"value":"/     Config { source_file: Some(\"computer/question\"), .. Config::default() }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435596,"byte_end":435675,"line_start":387,"line_end":387,"column_start":5,"column_end":84}},{"value":"/ );","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435680,"byte_end":435686,"line_start":388,"line_end":388,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435691,"byte_end":435698,"line_start":389,"line_end":389,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2075},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436569,"byte_end":436591,"line_start":416,"line_end":416,"column_start":12,"column_end":34},"name":"clone_with_source_file","qualname":"<Config>::clone_with_source_file","value":"pub fn clone_with_source_file(&Self, &'static str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `Config` only differing from the provided Config instance, `self`,\n in the source_file of the present test.","sig":null,"attributes":[{"value":"/ Constructs a `Config` only differing from the provided Config instance, `self`,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435876,"byte_end":435959,"line_start":397,"line_end":397,"column_start":5,"column_end":88}},{"value":"/ in the source_file of the present test.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":435964,"byte_end":436007,"line_start":398,"line_end":398,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436012,"byte_end":436015,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ This is simply a more concise alternative to using field-record update","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436020,"byte_end":436094,"line_start":400,"line_end":400,"column_start":5,"column_end":79}},{"value":"/ syntax:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436099,"byte_end":436110,"line_start":401,"line_end":401,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436115,"byte_end":436118,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436123,"byte_end":436130,"line_start":403,"line_end":403,"column_start":5,"column_end":12}},{"value":"/ # use proptest::test_runner::Config;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436135,"byte_end":436175,"line_start":404,"line_end":404,"column_start":5,"column_end":45}},{"value":"/ let a = Config::with_source_file(\"computer/question\");","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436180,"byte_end":436238,"line_start":405,"line_end":405,"column_start":5,"column_end":63}},{"value":"/ let b = a.clone_with_source_file(\"answer/42\");","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436243,"byte_end":436293,"line_start":406,"line_end":406,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436298,"byte_end":436313,"line_start":407,"line_end":407,"column_start":5,"column_end":20}},{"value":"/     a,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436318,"byte_end":436328,"line_start":408,"line_end":408,"column_start":5,"column_end":15}},{"value":"/     Config { source_file: Some(\"computer/question\"), .. Config::default() }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436333,"byte_end":436412,"line_start":409,"line_end":409,"column_start":5,"column_end":84}},{"value":"/ );","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436417,"byte_end":436423,"line_start":410,"line_end":410,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436428,"byte_end":436443,"line_start":411,"line_end":411,"column_start":5,"column_end":20}},{"value":"/     b,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436448,"byte_end":436458,"line_start":412,"line_end":412,"column_start":5,"column_end":15}},{"value":"/     Config { source_file: Some(\"answer/42\"), .. Config::default() }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436463,"byte_end":436534,"line_start":413,"line_end":413,"column_start":5,"column_end":76}},{"value":"/ );","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436539,"byte_end":436545,"line_start":414,"line_end":414,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436550,"byte_end":436557,"line_start":415,"line_end":415,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2076},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436937,"byte_end":436941,"line_start":426,"line_end":426,"column_start":12,"column_end":16},"name":"fork","qualname":"<Config>::fork","value":"pub fn fork(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return whether this configuration implies forking.","sig":null,"attributes":[{"value":"/ Return whether this configuration implies forking.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436749,"byte_end":436803,"line_start":422,"line_end":422,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436808,"byte_end":436811,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ This method exists even if the \"fork\" feature is disabled, in which","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436816,"byte_end":436887,"line_start":424,"line_end":424,"column_start":5,"column_end":76}},{"value":"/ case it simply returns false.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":436892,"byte_end":436925,"line_start":425,"line_end":425,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2078},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":437382,"byte_end":437389,"line_start":445,"line_end":445,"column_start":12,"column_end":19},"name":"timeout","qualname":"<Config>::timeout","value":"pub fn timeout(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the configured timeout.","sig":null,"attributes":[{"value":"/ Returns the configured timeout.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":437182,"byte_end":437217,"line_start":440,"line_end":440,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":437222,"byte_end":437225,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ This method exists even if the \"timeout\" feature is disabled, in which","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":437230,"byte_end":437304,"line_start":442,"line_end":442,"column_start":5,"column_end":79}},{"value":"/ case it simply returns 0.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":437309,"byte_end":437338,"line_start":443,"line_end":443,"column_start":5,"column_end":34}},{"value":"cfg(feature = \"timeout\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":437343,"byte_end":437370,"line_start":444,"line_end":444,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2079},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":437832,"byte_end":437848,"line_start":461,"line_end":461,"column_start":12,"column_end":28},"name":"max_shrink_iters","qualname":"<Config>::max_shrink_iters","value":"pub fn max_shrink_iters(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the configured limit on shrinking iterations.","sig":null,"attributes":[{"value":"/ Returns the configured limit on shrinking iterations.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":437688,"byte_end":437745,"line_start":458,"line_end":458,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":437750,"byte_end":437753,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ This takes into account the special \"automatic\" behaviour.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":437758,"byte_end":437820,"line_start":460,"line_end":460,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":2080},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":438189,"byte_end":438205,"line_start":473,"line_end":473,"column_start":12,"column_end":28},"name":"__sugar_to_owned","qualname":"<Config>::__sugar_to_owned","value":"pub fn __sugar_to_owned(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":438136,"byte_end":438158,"line_start":471,"line_end":471,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8496},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439585,"byte_end":439591,"line_start":31,"line_end":31,"column_start":5,"column_end":11},"name":"Reject","qualname":"::test_runner::errors::TestCaseError::Reject","value":"TestCaseError::Reject(Reason)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" The input was not valid for the test case. This does not count as a\n test failure (nor a success); rather, it simply signals to generate\n a new input and try again.\n","sig":null,"attributes":[{"value":"/ The input was not valid for the test case. This does not count as a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439398,"byte_end":439469,"line_start":28,"line_end":28,"column_start":5,"column_end":76}},{"value":"/ test failure (nor a success); rather, it simply signals to generate","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439474,"byte_end":439545,"line_start":29,"line_end":29,"column_start":5,"column_end":76}},{"value":"/ a new input and try again.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439550,"byte_end":439580,"line_start":30,"line_end":30,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8499},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439650,"byte_end":439654,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Fail","qualname":"::test_runner::errors::TestCaseError::Fail","value":"TestCaseError::Fail(Reason)","parent":{"krate":0,"index":8495},"children":[],"decl_id":null,"docs":" The code under test failed the test.\n","sig":null,"attributes":[{"value":"/ The code under test failed the test.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439605,"byte_end":439645,"line_start":32,"line_end":32,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":8495},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439378,"byte_end":439391,"line_start":27,"line_end":27,"column_start":10,"column_end":23},"name":"TestCaseError","qualname":"::test_runner::errors::TestCaseError","value":"pub enum TestCaseError { Reject(Reason), Fail(Reason), }","parent":null,"children":[{"krate":0,"index":8496},{"krate":0,"index":8499}],"decl_id":null,"docs":" Errors which can be returned from test cases to indicate non-successful\n completion.","sig":null,"attributes":[{"value":"/ Errors which can be returned from test cases to indicate non-successful","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":438964,"byte_end":439039,"line_start":17,"line_end":17,"column_start":1,"column_end":76}},{"value":"/ completion.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439040,"byte_end":439055,"line_start":18,"line_end":18,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439056,"byte_end":439059,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Note that in spite of the name, `TestCaseError` is currently *not* an","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439060,"byte_end":439133,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ instance of `Error`, since otherwise `impl<E : Error> From<E>` could not be","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439134,"byte_end":439213,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ provided.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439214,"byte_end":439227,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439228,"byte_end":439231,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Any `Error` can be converted to a `TestCaseError`, which places","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439232,"byte_end":439299,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/ `Error::display()` into the `Fail` case.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439300,"byte_end":439344,"line_start":25,"line_end":25,"column_start":1,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":2093},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439729,"byte_end":439743,"line_start":37,"line_end":37,"column_start":10,"column_end":24},"name":"TestCaseResult","qualname":"::test_runner::errors::TestCaseResult","value":"Result<(), TestCaseError>","parent":null,"children":[],"decl_id":null,"docs":" Convenience for the type returned by test cases.\n","sig":null,"attributes":[{"value":"/ Convenience for the type returned by test cases.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439667,"byte_end":439719,"line_start":36,"line_end":36,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2095},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":440166,"byte_end":440172,"line_start":46,"line_end":46,"column_start":12,"column_end":18},"name":"reject","qualname":"<TestCaseError>::reject","value":"pub fn reject<impl Into<Reason>: Into<Reason>>(impl Into<Reason>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Rejects the generated test input as invalid for this test case. This\n does not count as a test failure (nor a success); rather, it simply\n signals to generate a new input and try again.","sig":null,"attributes":[{"value":"/ Rejects the generated test input as invalid for this test case. This","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439799,"byte_end":439871,"line_start":40,"line_end":40,"column_start":5,"column_end":77}},{"value":"/ does not count as a test failure (nor a success); rather, it simply","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439876,"byte_end":439947,"line_start":41,"line_end":41,"column_start":5,"column_end":76}},{"value":"/ signals to generate a new input and try again.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439952,"byte_end":440002,"line_start":42,"line_end":42,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":440007,"byte_end":440010,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ The string gives the location and context of the rejection, and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":440015,"byte_end":440082,"line_start":44,"line_end":44,"column_start":5,"column_end":72}},{"value":"/ should be suitable for formatting like `Foo did X at {whence}`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":440087,"byte_end":440154,"line_start":45,"line_end":45,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2097},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":440431,"byte_end":440435,"line_start":54,"line_end":54,"column_start":12,"column_end":16},"name":"fail","qualname":"<TestCaseError>::fail","value":"pub fn fail<impl Into<Reason>: Into<Reason>>(impl Into<Reason>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The code under test failed the test.","sig":null,"attributes":[{"value":"/ The code under test failed the test.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":440266,"byte_end":440306,"line_start":50,"line_end":50,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":440311,"byte_end":440314,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ The string should indicate the location of the failure, but may","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":440319,"byte_end":440386,"line_start":52,"line_end":52,"column_start":5,"column_end":72}},{"value":"/ generally be any string.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":440391,"byte_end":440419,"line_start":53,"line_end":53,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8508},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":441281,"byte_end":441286,"line_start":82,"line_end":82,"column_start":5,"column_end":10},"name":"Abort","qualname":"::test_runner::errors::TestError::Abort","value":"TestError::Abort(Reason)","parent":{"krate":0,"index":8506},"children":[],"decl_id":null,"docs":" The test was aborted for the given reason, for example, due to too many\n inputs having been rejected.\n","sig":null,"attributes":[{"value":"/ The test was aborted for the given reason, for example, due to too many","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":441164,"byte_end":441239,"line_start":80,"line_end":80,"column_start":5,"column_end":80}},{"value":"/ inputs having been rejected.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":441244,"byte_end":441276,"line_start":81,"line_end":81,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8511},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":441471,"byte_end":441475,"line_start":86,"line_end":86,"column_start":5,"column_end":9},"name":"Fail","qualname":"::test_runner::errors::TestError::Fail","value":"TestError::Fail(Reason, T)","parent":{"krate":0,"index":8506},"children":[],"decl_id":null,"docs":" A failing test case was found. The string indicates where and/or why\n the test failed. The `T` is the minimal input found to reproduce the\n failure.\n","sig":null,"attributes":[{"value":"/ A failing test case was found. The string indicates where and/or why","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":441300,"byte_end":441372,"line_start":83,"line_end":83,"column_start":5,"column_end":77}},{"value":"/ the test failed. The `T` is the minimal input found to reproduce the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":441377,"byte_end":441449,"line_start":84,"line_end":84,"column_start":5,"column_end":77}},{"value":"/ failure.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":441454,"byte_end":441466,"line_start":85,"line_end":85,"column_start":5,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":8506},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":441145,"byte_end":441154,"line_start":79,"line_end":79,"column_start":10,"column_end":19},"name":"TestError","qualname":"::test_runner::errors::TestError","value":"pub enum TestError<T> { Abort(Reason), Fail(Reason, T), }","parent":null,"children":[{"krate":0,"index":8508},{"krate":0,"index":8511}],"decl_id":null,"docs":" A failure state from running test cases for a single test.\n","sig":null,"attributes":[{"value":"/ A failure state from running test cases for a single test.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":441034,"byte_end":441096,"line_start":77,"line_end":77,"column_start":1,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8533},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":448611,"byte_end":448614,"line_start":41,"line_end":41,"column_start":5,"column_end":8},"name":"Off","qualname":"::test_runner::failure_persistence::file::FileFailurePersistence::Off","value":"FileFailurePersistence::Off","parent":{"krate":0,"index":8532},"children":[],"decl_id":null,"docs":" Completely disables persistence of failing test cases.","sig":null,"attributes":[{"value":"/ Completely disables persistence of failing test cases.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":448357,"byte_end":448415,"line_start":36,"line_end":36,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":448420,"byte_end":448423,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ This is semantically equivalent to `Direct(\"/dev/null\")` on Unix and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":448428,"byte_end":448500,"line_start":38,"line_end":38,"column_start":5,"column_end":77}},{"value":"/ `Direct(\"NUL\")` on Windows (though it is internally handled by simply","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":448505,"byte_end":448578,"line_start":39,"line_end":39,"column_start":5,"column_end":78}},{"value":"/ not doing any I/O).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":448583,"byte_end":448606,"line_start":40,"line_end":40,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8535},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449657,"byte_end":449671,"line_start":60,"line_end":60,"column_start":5,"column_end":19},"name":"SourceParallel","qualname":"::test_runner::failure_persistence::file::FileFailurePersistence::SourceParallel","value":"FileFailurePersistence::SourceParallel(&'static str)","parent":{"krate":0,"index":8532},"children":[],"decl_id":null,"docs":" The path given to `TestRunner::set_source_file()` is parsed. The path\n is traversed up the directory tree until a directory containing a file\n named `lib.rs` or `main.rs` is found. A sibling to that directory with\n the name given by the string in this configuration is created, and a\n file with the same name and path relative to the source directory, but\n with the extension changed to `.txt`, is used.","sig":null,"attributes":[{"value":"/ The path given to `TestRunner::set_source_file()` is parsed. The path","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":448620,"byte_end":448693,"line_start":42,"line_end":42,"column_start":5,"column_end":78}},{"value":"/ is traversed up the directory tree until a directory containing a file","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":448698,"byte_end":448772,"line_start":43,"line_end":43,"column_start":5,"column_end":79}},{"value":"/ named `lib.rs` or `main.rs` is found. A sibling to that directory with","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":448777,"byte_end":448851,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/ the name given by the string in this configuration is created, and a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":448856,"byte_end":448928,"line_start":45,"line_end":45,"column_start":5,"column_end":77}},{"value":"/ file with the same name and path relative to the source directory, but","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":448933,"byte_end":449007,"line_start":46,"line_end":46,"column_start":5,"column_end":79}},{"value":"/ with the extension changed to `.txt`, is used.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449012,"byte_end":449062,"line_start":47,"line_end":47,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449067,"byte_end":449070,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ For example, given a source path of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449075,"byte_end":449114,"line_start":49,"line_end":49,"column_start":5,"column_end":44}},{"value":"/ `/home/jsmith/code/project/src/foo/bar.rs` and a configuration of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449119,"byte_end":449188,"line_start":50,"line_end":50,"column_start":5,"column_end":74}},{"value":"/ `SourceParallel(\"proptest-regressions\")` (the default), assuming the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449193,"byte_end":449265,"line_start":51,"line_end":51,"column_start":5,"column_end":77}},{"value":"/ `src` directory has a `lib.rs` or `main.rs`, the resulting file would","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449270,"byte_end":449343,"line_start":52,"line_end":52,"column_start":5,"column_end":78}},{"value":"/ be `/home/jsmith/code/project/proptest-regressions/foo/bar.txt`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449348,"byte_end":449416,"line_start":53,"line_end":53,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449421,"byte_end":449424,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ If no `lib.rs` or `main.rs` can be found, a warning is printed and this","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449429,"byte_end":449504,"line_start":55,"line_end":55,"column_start":5,"column_end":80}},{"value":"/ behaves like `WithSource`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449509,"byte_end":449539,"line_start":56,"line_end":56,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449544,"byte_end":449547,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ If no source file has been configured, a warning is printed and this","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449552,"byte_end":449624,"line_start":58,"line_end":58,"column_start":5,"column_end":77}},{"value":"/ behaves like `Off`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449629,"byte_end":449652,"line_start":59,"line_end":59,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8538},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":450135,"byte_end":450145,"line_start":69,"line_end":69,"column_start":5,"column_end":15},"name":"WithSource","qualname":"::test_runner::failure_persistence::file::FileFailurePersistence::WithSource","value":"FileFailurePersistence::WithSource(&'static str)","parent":{"krate":0,"index":8532},"children":[],"decl_id":null,"docs":" The path given to `TestRunner::set_source_file()` is parsed. The\n extension of the path is changed to the string given in this\n configuration, and that filename is used.","sig":null,"attributes":[{"value":"/ The path given to `TestRunner::set_source_file()` is parsed. The","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449691,"byte_end":449759,"line_start":61,"line_end":61,"column_start":5,"column_end":73}},{"value":"/ extension of the path is changed to the string given in this","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449764,"byte_end":449828,"line_start":62,"line_end":62,"column_start":5,"column_end":69}},{"value":"/ configuration, and that filename is used.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449833,"byte_end":449878,"line_start":63,"line_end":63,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449883,"byte_end":449886,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ For example, given a source path of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449891,"byte_end":449930,"line_start":65,"line_end":65,"column_start":5,"column_end":44}},{"value":"/ `/home/jsmith/code/project/src/foo/bar.rs` and a configuration of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":449935,"byte_end":450004,"line_start":66,"line_end":66,"column_start":5,"column_end":74}},{"value":"/ `WithSource(\"regressions\")`, the resulting path would be","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":450009,"byte_end":450069,"line_start":67,"line_end":67,"column_start":5,"column_end":65}},{"value":"/ `/home/jsmith/code/project/src/foo/bar.regressions`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":450074,"byte_end":450130,"line_start":68,"line_end":68,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8541},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":450277,"byte_end":450283,"line_start":72,"line_end":72,"column_start":5,"column_end":11},"name":"Direct","qualname":"::test_runner::failure_persistence::file::FileFailurePersistence::Direct","value":"FileFailurePersistence::Direct(&'static str)","parent":{"krate":0,"index":8532},"children":[],"decl_id":null,"docs":" The string given in this option is directly used as a file path without\n any further processing.\n","sig":null,"attributes":[{"value":"/ The string given in this option is directly used as a file path without","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":450165,"byte_end":450240,"line_start":70,"line_end":70,"column_start":5,"column_end":80}},{"value":"/ any further processing.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":450245,"byte_end":450272,"line_start":71,"line_end":71,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8544},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":450349,"byte_end":450363,"line_start":75,"line_end":75,"column_start":5,"column_end":19},"name":"_NonExhaustive","qualname":"::test_runner::failure_persistence::file::FileFailurePersistence::_NonExhaustive","value":"FileFailurePersistence::_NonExhaustive","parent":{"krate":0,"index":8532},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":450322,"byte_end":450344,"line_start":74,"line_end":74,"column_start":5,"column_end":27}}]},{"kind":"Enum","id":{"krate":0,"index":8532},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":448328,"byte_end":448350,"line_start":35,"line_end":35,"column_start":10,"column_end":32},"name":"FileFailurePersistence","qualname":"::test_runner::failure_persistence::file::FileFailurePersistence","value":"pub enum FileFailurePersistence {\n    Off,\n    SourceParallel(&'static str),\n    WithSource(&'static str),\n    Direct(&'static str),\n    _NonExhaustive,\n}","parent":null,"children":[{"krate":0,"index":8533},{"krate":0,"index":8535},{"krate":0,"index":8538},{"krate":0,"index":8541},{"krate":0,"index":8544}],"decl_id":null,"docs":" Describes how failing test cases are persisted.","sig":null,"attributes":[{"value":"/ Describes how failing test cases are persisted.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":447920,"byte_end":447971,"line_start":27,"line_end":27,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":447972,"byte_end":447975,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Note that file names in this enum are `&str` rather than `&Path` since","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":447976,"byte_end":448050,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"/ constant functions are not yet in Rust stable as of 2017-12-16.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":448051,"byte_end":448118,"line_start":30,"line_end":30,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":448119,"byte_end":448122,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ In all cases, if a derived path references a directory which does not yet","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":448123,"byte_end":448200,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/ exist, proptest will attempt to create all necessary parent directories.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":448201,"byte_end":448277,"line_start":33,"line_end":33,"column_start":1,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":8568},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/map.rs","byte_start":466653,"byte_end":466674,"line_start":21,"line_end":21,"column_start":12,"column_end":33},"name":"MapFailurePersistence","qualname":"::test_runner::failure_persistence::map::MapFailurePersistence","value":"MapFailurePersistence { map }","parent":null,"children":[{"krate":0,"index":8569}],"decl_id":null,"docs":" Failure persistence option that loads and saves seeds in memory\n on the heap. This may be useful when accumulating test failures\n across multiple `TestRunner` instances for external reporting\n or batched persistence.\n","sig":null,"attributes":[{"value":"/ Failure persistence option that loads and saves seeds in memory","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/map.rs","byte_start":466368,"byte_end":466435,"line_start":16,"line_end":16,"column_start":1,"column_end":68}},{"value":"/ on the heap. This may be useful when accumulating test failures","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/map.rs","byte_start":466436,"byte_end":466503,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ across multiple `TestRunner` instances for external reporting","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/map.rs","byte_start":466504,"byte_end":466569,"line_start":18,"line_end":18,"column_start":1,"column_end":66}},{"value":"/ or batched persistence.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/map.rs","byte_start":466570,"byte_end":466597,"line_start":19,"line_end":19,"column_start":1,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":8569},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/map.rs","byte_start":466728,"byte_end":466731,"line_start":23,"line_end":23,"column_start":9,"column_end":12},"name":"map","qualname":"::test_runner::failure_persistence::map::MapFailurePersistence::map","value":"std::collections::BTreeMap<&'static str, std::collections::BTreeSet<test_runner::failure_persistence::PersistedSeed>>","parent":{"krate":0,"index":8568},"children":[],"decl_id":null,"docs":" Backing map, keyed by source_file.\n","sig":null,"attributes":[{"value":"/ Backing map, keyed by source_file.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/map.rs","byte_start":466681,"byte_end":466719,"line_start":22,"line_end":22,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":8589},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":443114,"byte_end":443127,"line_start":33,"line_end":33,"column_start":12,"column_end":25},"name":"PersistedSeed","qualname":"::test_runner::failure_persistence::PersistedSeed","value":"","parent":null,"children":[],"decl_id":null,"docs":" Opaque struct representing a seed which can be persisted.","sig":null,"attributes":[{"value":"/ Opaque struct representing a seed which can be persisted.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":442863,"byte_end":442924,"line_start":28,"line_end":28,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":442925,"byte_end":442928,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ The `Display` and `FromStr` implementations go to and from the format","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":442929,"byte_end":443002,"line_start":30,"line_end":30,"column_start":1,"column_end":74}},{"value":"/ Proptest uses for its persistence file.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":443003,"byte_end":443046,"line_start":31,"line_end":31,"column_start":1,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":2293},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":443809,"byte_end":443827,"line_start":55,"line_end":55,"column_start":11,"column_end":29},"name":"FailurePersistence","qualname":"::test_runner::failure_persistence::FailurePersistence","value":"FailurePersistence: Send + Sync + fmt::Debug","parent":null,"children":[{"krate":0,"index":2294},{"krate":0,"index":2296},{"krate":0,"index":2298},{"krate":0,"index":2299},{"krate":0,"index":2301},{"krate":0,"index":2302},{"krate":0,"index":2303}],"decl_id":null,"docs":" Provides external persistence for historical test failures by storing seeds.","sig":null,"attributes":[{"value":"/ Provides external persistence for historical test failures by storing seeds.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":443469,"byte_end":443549,"line_start":49,"line_end":49,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":443550,"byte_end":443553,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ **Note**: Implementing `load_persisted_failures` and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":443554,"byte_end":443610,"line_start":51,"line_end":51,"column_start":1,"column_end":57}},{"value":"/ `save_persisted_failures` is **deprecated** and these methods will be","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":443611,"byte_end":443684,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/ removed in proptest 0.10.0. Instead, implement `load_persisted_failures2`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":443685,"byte_end":443762,"line_start":53,"line_end":53,"column_start":1,"column_end":78}},{"value":"/ and `save_persisted_failures2`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":443763,"byte_end":443798,"line_start":54,"line_end":54,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2294},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":444291,"byte_end":444315,"line_start":64,"line_end":64,"column_start":8,"column_end":32},"name":"load_persisted_failures2","qualname":"::test_runner::failure_persistence::FailurePersistence::load_persisted_failures2","value":"pub fn load_persisted_failures2(&Self, Option<&'static str>)\n-> Vec<PersistedSeed>","parent":{"krate":0,"index":2293},"children":[],"decl_id":null,"docs":" Supply seeds associated with the given `source_file` that may be used\n by a `TestRunner`'s random number generator in order to consistently\n recreate a previously-failing `Strategy`-provided value.","sig":null,"attributes":[{"value":"/ Supply seeds associated with the given `source_file` that may be used","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":443860,"byte_end":443933,"line_start":56,"line_end":56,"column_start":5,"column_end":78}},{"value":"/ by a `TestRunner`'s random number generator in order to consistently","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":443938,"byte_end":444010,"line_start":57,"line_end":57,"column_start":5,"column_end":77}},{"value":"/ recreate a previously-failing `Strategy`-provided value.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":444015,"byte_end":444075,"line_start":58,"line_end":58,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":444080,"byte_end":444083,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ The default implementation is **for backwards compatibility**. It","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":444088,"byte_end":444157,"line_start":60,"line_end":60,"column_start":5,"column_end":74}},{"value":"/ delegates to `load_persisted_failures` and converts the results into","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":444162,"byte_end":444234,"line_start":61,"line_end":61,"column_start":5,"column_end":77}},{"value":"/ XorShift seeds.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":444239,"byte_end":444258,"line_start":62,"line_end":62,"column_start":5,"column_end":24}},{"value":"allow(deprecated)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":444263,"byte_end":444283,"line_start":63,"line_end":63,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2296},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":444823,"byte_end":444846,"line_start":80,"line_end":80,"column_start":8,"column_end":31},"name":"load_persisted_failures","qualname":"::test_runner::failure_persistence::FailurePersistence::load_persisted_failures","value":"pub fn load_persisted_failures(&Self, Option<&'static str>) -> Vec<[u8; ]>","parent":{"krate":0,"index":2293},"children":[],"decl_id":null,"docs":" Use `load_persisted_failures2` instead.","sig":null,"attributes":[{"value":"/ Use `load_persisted_failures2` instead.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":444575,"byte_end":444618,"line_start":74,"line_end":74,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":444623,"byte_end":444626,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ This function inadvertently exposes the implementation of seeds prior","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":444631,"byte_end":444704,"line_start":76,"line_end":76,"column_start":5,"column_end":78}},{"value":"/ to Proptest 0.9.1 and only works with XorShift seeds.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":444709,"byte_end":444766,"line_start":77,"line_end":77,"column_start":5,"column_end":62}},{"value":"deprecated","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":444771,"byte_end":444784,"line_start":78,"line_end":78,"column_start":5,"column_end":18}},{"value":"allow(unused_variables)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":444789,"byte_end":444815,"line_start":79,"line_end":79,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2298},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":445273,"byte_end":445296,"line_start":92,"line_end":92,"column_start":8,"column_end":31},"name":"save_persisted_failure2","qualname":"::test_runner::failure_persistence::FailurePersistence::save_persisted_failure2","value":"pub fn save_persisted_failure2(&mut Self, Option<&'static str>, PersistedSeed,\n                               &dyn fmt::Debug)","parent":{"krate":0,"index":2293},"children":[],"decl_id":null,"docs":" Store a new failure-generating seed associated with the given `source_file`.","sig":null,"attributes":[{"value":"/ Store a new failure-generating seed associated with the given `source_file`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":445002,"byte_end":445082,"line_start":87,"line_end":87,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":445087,"byte_end":445090,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ The default implementation is **for backwards compatibility**. It","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":445095,"byte_end":445164,"line_start":89,"line_end":89,"column_start":5,"column_end":74}},{"value":"/ delegates to `save_persisted_failure` if `seed` is a XorShift seed.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":445169,"byte_end":445240,"line_start":90,"line_end":90,"column_start":5,"column_end":76}},{"value":"allow(deprecated)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":445245,"byte_end":445265,"line_start":91,"line_end":91,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2299},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":445882,"byte_end":445904,"line_start":112,"line_end":112,"column_start":8,"column_end":30},"name":"save_persisted_failure","qualname":"::test_runner::failure_persistence::FailurePersistence::save_persisted_failure","value":"pub fn save_persisted_failure(&mut Self, Option<&'static str>, [u8; ],\n                              &dyn fmt::Debug)","parent":{"krate":0,"index":2293},"children":[],"decl_id":null,"docs":" Use `save_persisted_failures2` instead.","sig":null,"attributes":[{"value":"/ Use `save_persisted_failures2` instead.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":445634,"byte_end":445677,"line_start":106,"line_end":106,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":445682,"byte_end":445685,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ This function inadvertently exposes the implementation of seeds prior","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":445690,"byte_end":445763,"line_start":108,"line_end":108,"column_start":5,"column_end":78}},{"value":"/ to Proptest 0.9.1 and only works with XorShift seeds.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":445768,"byte_end":445825,"line_start":109,"line_end":109,"column_start":5,"column_end":62}},{"value":"deprecated","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":445830,"byte_end":445843,"line_start":110,"line_end":110,"column_start":5,"column_end":18}},{"value":"allow(unused_variables)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":445848,"byte_end":445874,"line_start":111,"line_end":111,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2301},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":446187,"byte_end":446196,"line_start":122,"line_end":122,"column_start":8,"column_end":17},"name":"box_clone","qualname":"::test_runner::failure_persistence::FailurePersistence::box_clone","value":"pub fn box_clone(&Self) -> Box<dyn FailurePersistence>","parent":{"krate":0,"index":2293},"children":[],"decl_id":null,"docs":" Delegate method for producing a trait object usable with `Clone`\n","sig":null,"attributes":[{"value":"/ Delegate method for producing a trait object usable with `Clone`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":446111,"byte_end":446179,"line_start":121,"line_end":121,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2302},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":446324,"byte_end":446326,"line_start":125,"line_end":125,"column_start":8,"column_end":10},"name":"eq","qualname":"::test_runner::failure_persistence::FailurePersistence::eq","value":"pub fn eq(&Self, &dyn FailurePersistence) -> bool","parent":{"krate":0,"index":2293},"children":[],"decl_id":null,"docs":" Equality testing delegate required due to constraints of trait objects.\n","sig":null,"attributes":[{"value":"/ Equality testing delegate required due to constraints of trait objects.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":446241,"byte_end":446316,"line_start":124,"line_end":124,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":2303},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":446437,"byte_end":446443,"line_start":128,"line_end":128,"column_start":8,"column_end":14},"name":"as_any","qualname":"::test_runner::failure_persistence::FailurePersistence::as_any","value":"pub fn as_any(&Self) -> &dyn Any","parent":{"krate":0,"index":2293},"children":[],"decl_id":null,"docs":" Assistant method for trait object comparison.\n","sig":null,"attributes":[{"value":"/ Assistant method for trait object comparison.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":446380,"byte_end":446429,"line_start":127,"line_end":127,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":8607},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":471781,"byte_end":471787,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"name":"Reason","qualname":"::test_runner::reason::Reason","value":"","parent":null,"children":[],"decl_id":null,"docs":" The reason for why something, such as a generated value, was rejected.","sig":null,"attributes":[{"value":"/ The reason for why something, such as a generated value, was rejected.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":471428,"byte_end":471502,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":471503,"byte_end":471506,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Currently this is merely a wrapper around a message, but more properties","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":471507,"byte_end":471583,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ may be added in the future.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":471584,"byte_end":471615,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":471616,"byte_end":471619,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This is constructed via `.into()` on a `String`, `&'static str`, or","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":471620,"byte_end":471691,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/ `Box<str>`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":471692,"byte_end":471707,"line_start":18,"line_end":18,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2325},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":472007,"byte_end":472014,"line_start":27,"line_end":27,"column_start":12,"column_end":19},"name":"message","qualname":"<Reason>::message","value":"pub fn message(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Return the message for this `Reason`.","sig":null,"attributes":[{"value":"/ Return the message for this `Reason`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":471827,"byte_end":471868,"line_start":23,"line_end":23,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":471873,"byte_end":471876,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ The message is intended for human consumption, and is not guaranteed to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":471881,"byte_end":471956,"line_start":25,"line_end":25,"column_start":5,"column_end":80}},{"value":"/ have any format in particular.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":471961,"byte_end":471995,"line_start":26,"line_end":26,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":8648},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":480011,"byte_end":480025,"line_start":24,"line_end":24,"column_start":12,"column_end":26},"name":"ResultCacheKey","qualname":"::test_runner::result_cache::ResultCacheKey","value":"ResultCacheKey {  }","parent":null,"children":[{"krate":0,"index":8650}],"decl_id":null,"docs":" A key used for the result cache.","sig":null,"attributes":[{"value":"/ A key used for the result cache.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":479687,"byte_end":479723,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":479724,"byte_end":479727,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The capabilities of this structure are currently quite limited; all one can","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":479728,"byte_end":479807,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ do with safe code is get the `&dyn Debug` of the test input value. This may","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":479808,"byte_end":479887,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ improve in the future, particularly at such a time that specialisation","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":479888,"byte_end":479962,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/ becomes stable.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":479963,"byte_end":479982,"line_start":22,"line_end":22,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":2408},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":480252,"byte_end":480263,"line_start":34,"line_end":34,"column_start":12,"column_end":23},"name":"value_debug","qualname":"<ResultCacheKey>::value_debug","value":"pub fn value_debug(&Self) -> &dyn fmt::Debug","parent":null,"children":[],"decl_id":null,"docs":" Return the test input value as an `&dyn Debug`.\n","sig":null,"attributes":[{"value":"/ Return the test input value as an `&dyn Debug`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":480189,"byte_end":480240,"line_start":33,"line_end":33,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":2409},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":480383,"byte_end":480394,"line_start":40,"line_end":40,"column_start":11,"column_end":22},"name":"ResultCache","qualname":"::test_runner::result_cache::ResultCache","value":"ResultCache","parent":null,"children":[{"krate":0,"index":2410},{"krate":0,"index":2411},{"krate":0,"index":2412}],"decl_id":null,"docs":" An object which can cache the outcomes of tests.\n","sig":null,"attributes":[{"value":"/ An object which can cache the outcomes of tests.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":480320,"byte_end":480372,"line_start":39,"line_end":39,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2410},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":480674,"byte_end":480677,"line_start":46,"line_end":46,"column_start":8,"column_end":11},"name":"key","qualname":"::test_runner::result_cache::ResultCache::key","value":"pub fn key(&Self, &ResultCacheKey) -> u64","parent":{"krate":0,"index":2409},"children":[],"decl_id":null,"docs":" Convert the given cache key into a `u64` representing that value. The\n u64 is used as the key below.","sig":null,"attributes":[{"value":"/ Convert the given cache key into a `u64` representing that value. The","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":480401,"byte_end":480474,"line_start":41,"line_end":41,"column_start":5,"column_end":78}},{"value":"/ u64 is used as the key below.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":480479,"byte_end":480512,"line_start":42,"line_end":42,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":480517,"byte_end":480520,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ This is a separate step so that ownership of the key value can be","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":480525,"byte_end":480594,"line_start":44,"line_end":44,"column_start":5,"column_end":74}},{"value":"/ handed off to user code without needing to be able to clone it.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":480599,"byte_end":480666,"line_start":45,"line_end":45,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2411},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":480947,"byte_end":480950,"line_start":51,"line_end":51,"column_start":8,"column_end":11},"name":"put","qualname":"::test_runner::result_cache::ResultCache::put","value":"pub fn put(&mut Self, u64, &TestCaseResult)","parent":{"krate":0,"index":2409},"children":[],"decl_id":null,"docs":" Save `result` as the outcome associated with the test input in `key`.","sig":null,"attributes":[{"value":"/ Save `result` as the outcome associated with the test input in `key`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":480719,"byte_end":480792,"line_start":47,"line_end":47,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":480797,"byte_end":480800,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ `result` is passed as a reference so that the decision to clone depends","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":480805,"byte_end":480880,"line_start":49,"line_end":49,"column_start":5,"column_end":80}},{"value":"/ on whether the cache actually plans on storing it.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":480885,"byte_end":480939,"line_start":50,"line_end":50,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2412},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":481137,"byte_end":481140,"line_start":54,"line_end":54,"column_start":8,"column_end":11},"name":"get","qualname":"::test_runner::result_cache::ResultCache::get","value":"pub fn get(&Self, u64) -> Option<&TestCaseResult>","parent":{"krate":0,"index":2409},"children":[],"decl_id":null,"docs":" If `put()` has been called with a semantically equivalent `key`, return\n the saved result. Otherwise, return `None`.\n","sig":null,"attributes":[{"value":"/ If `put()` has been called with a semantically equivalent `key`, return","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":481002,"byte_end":481077,"line_start":52,"line_end":52,"column_start":5,"column_end":80}},{"value":"/ the saved result. Otherwise, return `None`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":481082,"byte_end":481129,"line_start":53,"line_end":53,"column_start":5,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":2436},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":482386,"byte_end":482404,"line_start":100,"line_end":100,"column_start":8,"column_end":26},"name":"basic_result_cache","qualname":"::test_runner::result_cache::basic_result_cache","value":"pub fn basic_result_cache() -> Box<dyn ResultCache>","parent":null,"children":[],"decl_id":null,"docs":" A basic result cache.","sig":null,"attributes":[{"value":"/ A basic result cache.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":482259,"byte_end":482284,"line_start":96,"line_end":96,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":482285,"byte_end":482288,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ Values are identified by their `Debug` string representation.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":482289,"byte_end":482354,"line_start":98,"line_end":98,"column_start":1,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":482355,"byte_end":482378,"line_start":99,"line_end":99,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":2443},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":482858,"byte_end":482875,"line_start":118,"line_end":118,"column_start":8,"column_end":25},"name":"noop_result_cache","qualname":"::test_runner::result_cache::noop_result_cache","value":"pub fn noop_result_cache() -> Box<dyn ResultCache>","parent":null,"children":[],"decl_id":null,"docs":" A result cache that does nothing.","sig":null,"attributes":[{"value":"/ A result cache that does nothing.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":482745,"byte_end":482782,"line_start":115,"line_end":115,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":482783,"byte_end":482786,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ This is the default value of `ProptestConfig.result_cache`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":482787,"byte_end":482850,"line_start":117,"line_end":117,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8663},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484340,"byte_end":484348,"line_start":34,"line_end":34,"column_start":5,"column_end":13},"name":"XorShift","qualname":"::test_runner::rng::RngAlgorithm::XorShift","value":"RngAlgorithm::XorShift","parent":{"krate":0,"index":8662},"children":[],"decl_id":null,"docs":" The [XorShift](https://rust-random.github.io/rand/rand_xorshift/struct.XorShiftRng.html)\n algorithm. This was the default up through and including Proptest 0.9.0.","sig":null,"attributes":[{"value":"/ The [XorShift](https://rust-random.github.io/rand/rand_xorshift/struct.XorShiftRng.html)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":483903,"byte_end":483995,"line_start":26,"line_end":26,"column_start":5,"column_end":97}},{"value":"/ algorithm. This was the default up through and including Proptest 0.9.0.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484000,"byte_end":484076,"line_start":27,"line_end":27,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484081,"byte_end":484084,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ It is faster than ChaCha but produces lower quality randomness and has","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484089,"byte_end":484163,"line_start":29,"line_end":29,"column_start":5,"column_end":79}},{"value":"/ some pathological cases where it may fail to produce outputs that are","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484168,"byte_end":484241,"line_start":30,"line_end":30,"column_start":5,"column_end":78}},{"value":"/ random even to casual observation.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484246,"byte_end":484284,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484289,"byte_end":484292,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ The seed must be exactly 16 bytes.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484297,"byte_end":484335,"line_start":33,"line_end":33,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8665},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484560,"byte_end":484566,"line_start":39,"line_end":39,"column_start":5,"column_end":11},"name":"ChaCha","qualname":"::test_runner::rng::RngAlgorithm::ChaCha","value":"RngAlgorithm::ChaCha","parent":{"krate":0,"index":8662},"children":[],"decl_id":null,"docs":" The [ChaCha](https://rust-random.github.io/rand/rand_chacha/struct.ChaChaRng.html)\n algorithm. This became the default with Proptest 0.9.1.","sig":null,"attributes":[{"value":"/ The [ChaCha](https://rust-random.github.io/rand/rand_chacha/struct.ChaChaRng.html)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484354,"byte_end":484440,"line_start":35,"line_end":35,"column_start":5,"column_end":91}},{"value":"/ algorithm. This became the default with Proptest 0.9.1.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484445,"byte_end":484504,"line_start":36,"line_end":36,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484509,"byte_end":484512,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ The seed must be exactly 32 bytes.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484517,"byte_end":484555,"line_start":38,"line_end":38,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8667},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":485178,"byte_end":485189,"line_start":52,"line_end":52,"column_start":5,"column_end":16},"name":"PassThrough","qualname":"::test_runner::rng::RngAlgorithm::PassThrough","value":"RngAlgorithm::PassThrough","parent":{"krate":0,"index":8662},"children":[],"decl_id":null,"docs":" This is not an actual RNG algorithm, but instead returns data directly\n from its \"seed\".","sig":null,"attributes":[{"value":"/ This is not an actual RNG algorithm, but instead returns data directly","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484572,"byte_end":484646,"line_start":40,"line_end":40,"column_start":5,"column_end":79}},{"value":"/ from its \"seed\".","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484651,"byte_end":484671,"line_start":41,"line_end":41,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484676,"byte_end":484679,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ This is useful when Proptest is being driven from some other entropy","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484684,"byte_end":484756,"line_start":43,"line_end":43,"column_start":5,"column_end":77}},{"value":"/ source, such as a fuzzer.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484761,"byte_end":484790,"line_start":44,"line_end":44,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484795,"byte_end":484798,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ If the seed is depleted, the RNG will return 0s forever.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484803,"byte_end":484863,"line_start":46,"line_end":46,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484868,"byte_end":484871,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Note that in cases where a new RNG is to be derived from an existing","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484876,"byte_end":484948,"line_start":48,"line_end":48,"column_start":5,"column_end":77}},{"value":"/ one, *the data is split evenly between them*, regardless of how much","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":484953,"byte_end":485025,"line_start":49,"line_end":49,"column_start":5,"column_end":77}},{"value":"/ entropy is actually needed. This means that combinators like","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":485030,"byte_end":485094,"line_start":50,"line_end":50,"column_start":5,"column_end":69}},{"value":"/ `prop_perturb` and `prop_flat_map` can require extremely large inputs.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":485099,"byte_end":485173,"line_start":51,"line_end":51,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8669},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":485653,"byte_end":485661,"line_start":61,"line_end":61,"column_start":5,"column_end":13},"name":"Recorder","qualname":"::test_runner::rng::RngAlgorithm::Recorder","value":"RngAlgorithm::Recorder","parent":{"krate":0,"index":8662},"children":[],"decl_id":null,"docs":" This is equivalent to the `ChaCha` RNG, with the addition that it\n records the bytes used to create a value.","sig":null,"attributes":[{"value":"/ This is equivalent to the `ChaCha` RNG, with the addition that it","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":485195,"byte_end":485264,"line_start":53,"line_end":53,"column_start":5,"column_end":74}},{"value":"/ records the bytes used to create a value.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":485269,"byte_end":485314,"line_start":54,"line_end":54,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":485319,"byte_end":485322,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ This is useful when Proptest is used for fuzzing, and a corpus of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":485327,"byte_end":485396,"line_start":56,"line_end":56,"column_start":5,"column_end":74}},{"value":"/ initial inputs need to be created. Note that in these cases, you need","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":485401,"byte_end":485474,"line_start":57,"line_end":57,"column_start":5,"column_end":78}},{"value":"/ to use the `TestRunner` API directly yourself instead of using the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":485479,"byte_end":485549,"line_start":58,"line_end":58,"column_start":5,"column_end":75}},{"value":"/ `proptest!` macro, as otherwise there is no way to obtain the bytes","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":485554,"byte_end":485625,"line_start":59,"line_end":59,"column_start":5,"column_end":76}},{"value":"/ this captures.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":485630,"byte_end":485648,"line_start":60,"line_end":60,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8671},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":485713,"byte_end":485727,"line_start":64,"line_end":64,"column_start":5,"column_end":19},"name":"_NonExhaustive","qualname":"::test_runner::rng::RngAlgorithm::_NonExhaustive","value":"RngAlgorithm::_NonExhaustive","parent":{"krate":0,"index":8662},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":485667,"byte_end":485689,"line_start":62,"line_end":62,"column_start":5,"column_end":27}}]},{"kind":"Enum","id":{"krate":0,"index":8662},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":483884,"byte_end":483896,"line_start":25,"line_end":25,"column_start":10,"column_end":22},"name":"RngAlgorithm","qualname":"::test_runner::rng::RngAlgorithm","value":"pub enum RngAlgorithm {\n    XorShift,\n    ChaCha,\n    PassThrough,\n    Recorder,\n    _NonExhaustive,\n}","parent":null,"children":[{"krate":0,"index":8663},{"krate":0,"index":8665},{"krate":0,"index":8667},{"krate":0,"index":8669},{"krate":0,"index":8671}],"decl_id":null,"docs":" Identifies a particular RNG algorithm supported by proptest.","sig":null,"attributes":[{"value":"/ Identifies a particular RNG algorithm supported by proptest.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":483558,"byte_end":483622,"line_start":19,"line_end":19,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":483623,"byte_end":483626,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Proptest supports dynamic configuration of algorithms to allow it to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":483627,"byte_end":483699,"line_start":21,"line_end":21,"column_start":1,"column_end":73}},{"value":"/ continue operating with persisted regression files and to allow the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":483700,"byte_end":483771,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"/ configuration to be expressed in the `Config` struct.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":483772,"byte_end":483829,"line_start":23,"line_end":23,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":8684},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":486995,"byte_end":487002,"line_start":111,"line_end":111,"column_start":12,"column_end":19},"name":"TestRng","qualname":"::test_runner::rng::TestRng","value":"TestRng {  }","parent":null,"children":[{"krate":0,"index":8685}],"decl_id":null,"docs":" Proptest's random number generator.\n","sig":null,"attributes":[{"value":"/ Proptest's random number generator.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":486920,"byte_end":486959,"line_start":109,"line_end":109,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2531},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":496095,"byte_end":496104,"line_start":408,"line_end":408,"column_start":12,"column_end":21},"name":"from_seed","qualname":"<TestRng>::from_seed","value":"pub fn from_seed(RngAlgorithm, &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new RNG with the given algorithm and seed.","sig":null,"attributes":[{"value":"/ Create a new RNG with the given algorithm and seed.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":495744,"byte_end":495799,"line_start":399,"line_end":399,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":495804,"byte_end":495807,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ Any RNG created with the same algorithm-seed pair will produce the same","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":495812,"byte_end":495887,"line_start":401,"line_end":401,"column_start":5,"column_end":80}},{"value":"/ sequence of values on all systems and all supporting versions of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":495892,"byte_end":495960,"line_start":402,"line_end":402,"column_start":5,"column_end":73}},{"value":"/ proptest.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":495965,"byte_end":495978,"line_start":403,"line_end":403,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":495983,"byte_end":495986,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":495991,"byte_end":496004,"line_start":405,"line_end":405,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":496009,"byte_end":496012,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ Panics if `seed` is not an appropriate length for `algorithm`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":496017,"byte_end":496083,"line_start":407,"line_end":407,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2532},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":496443,"byte_end":496453,"line_start":418,"line_end":418,"column_start":12,"column_end":22},"name":"bytes_used","qualname":"<TestRng>::bytes_used","value":"pub fn bytes_used(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Dumps the bytes obtained from the RNG so far (only works if the RNG is\n set to `Recorder`).","sig":null,"attributes":[{"value":"/ Dumps the bytes obtained from the RNG so far (only works if the RNG is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":496235,"byte_end":496309,"line_start":412,"line_end":412,"column_start":5,"column_end":79}},{"value":"/ set to `Recorder`).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":496314,"byte_end":496337,"line_start":413,"line_end":413,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":496342,"byte_end":496345,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":496350,"byte_end":496363,"line_start":415,"line_end":415,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":496368,"byte_end":496371,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ Panics if this RNG does not capture generated data.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":496376,"byte_end":496431,"line_start":417,"line_end":417,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2538},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":501315,"byte_end":501332,"line_start":536,"line_end":536,"column_start":12,"column_end":29},"name":"deterministic_rng","qualname":"<TestRng>::deterministic_rng","value":"pub fn deterministic_rng(RngAlgorithm) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a `TestRng` with a particular hard-coded seed.","sig":null,"attributes":[{"value":"/ Returns a `TestRng` with a particular hard-coded seed.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":500456,"byte_end":500514,"line_start":522,"line_end":522,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":500519,"byte_end":500522,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ The seed value will always be the same for a particular version of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":500527,"byte_end":500597,"line_start":524,"line_end":524,"column_start":5,"column_end":75}},{"value":"/ Proptest and algorithm, but may change across releases.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":500602,"byte_end":500661,"line_start":525,"line_end":525,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":500666,"byte_end":500669,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ This is useful for testing things like strategy implementations without","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":500674,"byte_end":500749,"line_start":527,"line_end":527,"column_start":5,"column_end":80}},{"value":"/ risking getting \"unlucky\" RNGs which deviate from average behaviour","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":500754,"byte_end":500825,"line_start":528,"line_end":528,"column_start":5,"column_end":76}},{"value":"/ enough to cause spurious failures. For example, a strategy for `bool`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":500830,"byte_end":500903,"line_start":529,"line_end":529,"column_start":5,"column_end":78}},{"value":"/ which is supposed to produce `true` 50% of the time might have a test","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":500908,"byte_end":500981,"line_start":530,"line_end":530,"column_start":5,"column_end":78}},{"value":"/ which checks that the distribution is \"close enough\" to 50%. If every","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":500986,"byte_end":501059,"line_start":531,"line_end":531,"column_start":5,"column_end":78}},{"value":"/ test run starts with a different RNG, occasionally there will be","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":501064,"byte_end":501132,"line_start":532,"line_end":532,"column_start":5,"column_end":73}},{"value":"/ spurious test failures when the RNG happens to produce a very skewed","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":501137,"byte_end":501209,"line_start":533,"line_end":533,"column_start":5,"column_end":77}},{"value":"/ distribution. Using this or `TestRunner::deterministic()` avoids such","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":501214,"byte_end":501287,"line_start":534,"line_end":534,"column_start":5,"column_end":78}},{"value":"/ issues.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":501292,"byte_end":501303,"line_start":535,"line_end":535,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":8743},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":509474,"byte_end":509484,"line_start":69,"line_end":69,"column_start":12,"column_end":22},"name":"TestRunner","qualname":"::test_runner::runner::TestRunner","value":"TestRunner {  }","parent":null,"children":[{"krate":0,"index":8744},{"krate":0,"index":8745},{"krate":0,"index":8746},{"krate":0,"index":8747},{"krate":0,"index":8748},{"krate":0,"index":8749},{"krate":0,"index":8750},{"krate":0,"index":8751}],"decl_id":null,"docs":" State used when running a proptest test.\n","sig":null,"attributes":[{"value":"/ State used when running a proptest test.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":509401,"byte_end":509445,"line_start":67,"line_end":67,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2643},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516025,"byte_end":516028,"line_start":302,"line_end":302,"column_start":12,"column_end":15},"name":"new","qualname":"<TestRunner>::new","value":"pub fn new(Config) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a fresh `TestRunner` with the given configuration.","sig":null,"attributes":[{"value":"/ Create a fresh `TestRunner` with the given configuration.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":515646,"byte_end":515707,"line_start":294,"line_end":294,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":515712,"byte_end":515715,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ The runner will use an RNG with a generated seed and the default","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":515720,"byte_end":515788,"line_start":296,"line_end":296,"column_start":5,"column_end":73}},{"value":"/ algorithm.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":515793,"byte_end":515807,"line_start":297,"line_end":297,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":515812,"byte_end":515815,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ In `no_std` environments, every `TestRunner` will use the same","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":515820,"byte_end":515886,"line_start":299,"line_end":299,"column_start":5,"column_end":71}},{"value":"/ hard-coded seed. This seed is not contractually guaranteed and may be","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":515891,"byte_end":515964,"line_start":300,"line_end":300,"column_start":5,"column_end":78}},{"value":"/ changed between releases without notice.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":515969,"byte_end":516013,"line_start":301,"line_end":301,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2644},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516708,"byte_end":516721,"line_start":322,"line_end":322,"column_start":12,"column_end":25},"name":"deterministic","qualname":"<TestRunner>::deterministic","value":"pub fn deterministic() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a fresh `TestRunner` with the standard deterministic RNG.","sig":null,"attributes":[{"value":"/ Create a fresh `TestRunner` with the standard deterministic RNG.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516186,"byte_end":516254,"line_start":307,"line_end":307,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516259,"byte_end":516262,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ This is sugar for the following:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516267,"byte_end":516303,"line_start":309,"line_end":309,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516308,"byte_end":516311,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516316,"byte_end":516327,"line_start":311,"line_end":311,"column_start":5,"column_end":16}},{"value":"/ # use proptest::test_runner::*;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516332,"byte_end":516367,"line_start":312,"line_end":312,"column_start":5,"column_end":40}},{"value":"/ let config = Config::default();","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516372,"byte_end":516407,"line_start":313,"line_end":313,"column_start":5,"column_end":40}},{"value":"/ let algorithm = config.rng_algorithm;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516412,"byte_end":516453,"line_start":314,"line_end":314,"column_start":5,"column_end":46}},{"value":"/ TestRunner::new_with_rng(","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516458,"byte_end":516487,"line_start":315,"line_end":315,"column_start":5,"column_end":34}},{"value":"/     config,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516492,"byte_end":516507,"line_start":316,"line_end":316,"column_start":5,"column_end":20}},{"value":"/     TestRng::deterministic_rng(algorithm));","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516512,"byte_end":516559,"line_start":317,"line_end":317,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516564,"byte_end":516571,"line_start":318,"line_end":318,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516576,"byte_end":516579,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ Refer to `TestRng::deterministic_rng()` for more information on the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516584,"byte_end":516655,"line_start":320,"line_end":320,"column_start":5,"column_end":76}},{"value":"/ properties of the RNG used here.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516660,"byte_end":516696,"line_start":321,"line_end":321,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2645},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516992,"byte_end":517004,"line_start":329,"line_end":329,"column_start":12,"column_end":24},"name":"new_with_rng","qualname":"<TestRunner>::new_with_rng","value":"pub fn new_with_rng(Config, TestRng) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a fresh `TestRunner` with the given configuration and RNG.\n","sig":null,"attributes":[{"value":"/ Create a fresh `TestRunner` with the given configuration and RNG.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":516911,"byte_end":516980,"line_start":328,"line_end":328,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2647},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518031,"byte_end":518034,"line_start":359,"line_end":359,"column_start":12,"column_end":15},"name":"rng","qualname":"<TestRunner>::rng","value":"pub fn rng(&mut Self) -> &mut TestRng","parent":null,"children":[],"decl_id":null,"docs":" Returns the RNG for this test run.\n","sig":null,"attributes":[{"value":"/ Returns the RNG for this test run.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":517981,"byte_end":518019,"line_start":358,"line_end":358,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2648},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518197,"byte_end":518204,"line_start":365,"line_end":365,"column_start":12,"column_end":19},"name":"new_rng","qualname":"<TestRunner>::new_rng","value":"pub fn new_rng(&mut Self) -> TestRng","parent":null,"children":[],"decl_id":null,"docs":" Create a new, independent but deterministic RNG from the RNG in this\n runner.\n","sig":null,"attributes":[{"value":"/ Create a new, independent but deterministic RNG from the RNG in this","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518097,"byte_end":518169,"line_start":363,"line_end":363,"column_start":5,"column_end":77}},{"value":"/ runner.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518174,"byte_end":518185,"line_start":364,"line_end":364,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":2649},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518324,"byte_end":518330,"line_start":370,"line_end":370,"column_start":12,"column_end":18},"name":"config","qualname":"<TestRunner>::config","value":"pub fn config(&Self) -> &Config","parent":null,"children":[],"decl_id":null,"docs":" Returns the configuration of this runner.\n","sig":null,"attributes":[{"value":"/ Returns the configuration of this runner.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518267,"byte_end":518312,"line_start":369,"line_end":369,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2650},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518590,"byte_end":518600,"line_start":380,"line_end":380,"column_start":12,"column_end":22},"name":"bytes_used","qualname":"<TestRunner>::bytes_used","value":"pub fn bytes_used(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Dumps the bytes obtained from the RNG so far (only works if the RNG is\n set to `Recorder`).","sig":null,"attributes":[{"value":"/ Dumps the bytes obtained from the RNG so far (only works if the RNG is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518383,"byte_end":518457,"line_start":374,"line_end":374,"column_start":5,"column_end":79}},{"value":"/ set to `Recorder`).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518462,"byte_end":518485,"line_start":375,"line_end":375,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518490,"byte_end":518493,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518498,"byte_end":518511,"line_start":377,"line_end":377,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518516,"byte_end":518519,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ Panics if the RNG does not capture generated data.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518524,"byte_end":518578,"line_start":379,"line_end":379,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2651},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":519207,"byte_end":519210,"line_start":395,"line_end":395,"column_start":12,"column_end":15},"name":"run","qualname":"<TestRunner>::run","value":"pub fn run<S: Strategy, impl Fn(S::Value) -> TestCaseResult: Fn(S::Value) ->\n           TestCaseResult>(&mut Self, &S, impl Fn(S::Value) -> TestCaseResult)\n-> TestRunResult<S>","parent":null,"children":[],"decl_id":null,"docs":" Run test cases against `f`, choosing inputs via `strategy`.","sig":null,"attributes":[{"value":"/ Run test cases against `f`, choosing inputs via `strategy`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518662,"byte_end":518725,"line_start":384,"line_end":384,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518730,"byte_end":518733,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ If any failure cases occur, try to find a minimal failure case and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518738,"byte_end":518808,"line_start":386,"line_end":386,"column_start":5,"column_end":75}},{"value":"/ report that. If invoking `f` panics, the panic is turned into a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518813,"byte_end":518880,"line_start":387,"line_end":387,"column_start":5,"column_end":72}},{"value":"/ `TestCaseError::Fail`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518885,"byte_end":518911,"line_start":388,"line_end":388,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518916,"byte_end":518919,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ If failure persistence is enabled, all persisted failing cases are","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518924,"byte_end":518994,"line_start":390,"line_end":390,"column_start":5,"column_end":75}},{"value":"/ tested first. If a later non-persisted case fails, its seed is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":518999,"byte_end":519065,"line_start":391,"line_end":391,"column_start":5,"column_end":71}},{"value":"/ persisted before returning failure.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":519070,"byte_end":519109,"line_start":392,"line_end":392,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":519114,"byte_end":519117,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ Returns success or failure indicating why the test as a whole failed.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":519122,"byte_end":519195,"line_start":394,"line_end":394,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2677},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":529092,"byte_end":529099,"line_start":670,"line_end":670,"column_start":12,"column_end":19},"name":"run_one","qualname":"<TestRunner>::run_one","value":"pub fn run_one<V: ValueTree, impl Fn(V::Value) -> TestCaseResult: Fn(V::Value)\n               ->\n               TestCaseResult>(&mut Self, V,\n                               impl Fn(V::Value) -> TestCaseResult)\n-> Result<bool, TestError<V::Value>>","parent":null,"children":[],"decl_id":null,"docs":" Run one specific test case against this runner.","sig":null,"attributes":[{"value":"/ Run one specific test case against this runner.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":528617,"byte_end":528668,"line_start":661,"line_end":661,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":528673,"byte_end":528676,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ If the test fails, finds the minimal failing test case. If the test","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":528681,"byte_end":528752,"line_start":663,"line_end":663,"column_start":5,"column_end":76}},{"value":"/ does not fail, returns whether it succeeded or was filtered out.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":528757,"byte_end":528825,"line_start":664,"line_end":664,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":528830,"byte_end":528833,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ This does not honour the `fork` config, and will not be able to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":528838,"byte_end":528905,"line_start":666,"line_end":666,"column_start":5,"column_end":72}},{"value":"/ terminate the run if it runs for longer than `timeout`. However, if the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":528910,"byte_end":528985,"line_start":667,"line_end":667,"column_start":5,"column_end":80}},{"value":"/ test function returns but took longer than `timeout`, the test case","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":528990,"byte_end":529061,"line_start":668,"line_end":668,"column_start":5,"column_end":76}},{"value":"/ will fail.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":529066,"byte_end":529080,"line_start":669,"line_end":669,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":2693},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":535194,"byte_end":535206,"line_start":840,"line_end":840,"column_start":12,"column_end":24},"name":"reject_local","qualname":"<TestRunner>::reject_local","value":"pub fn reject_local<impl Into<Reason>: Into<Reason>>(&mut Self,\n                                                     impl Into<Reason>)\n-> Result<(), Reason>","parent":null,"children":[],"decl_id":null,"docs":" Update the state to account for a local rejection from `whence`, and\n return `Ok` if the caller should keep going or `Err` to abort.\n","sig":null,"attributes":[{"value":"/ Update the state to account for a local rejection from `whence`, and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":535039,"byte_end":535111,"line_start":838,"line_end":838,"column_start":5,"column_end":77}},{"value":"/ return `Ok` if the caller should keep going or `Err` to abort.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":535116,"byte_end":535182,"line_start":839,"line_end":839,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2699},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":536546,"byte_end":536560,"line_start":877,"line_end":877,"column_start":12,"column_end":26},"name":"flat_map_regen","qualname":"<TestRunner>::flat_map_regen","value":"pub fn flat_map_regen(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Increment the counter of flat map regenerations and return whether it\n is still under the configured limit.\n","sig":null,"attributes":[{"value":"/ Increment the counter of flat map regenerations and return whether it","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":536416,"byte_end":536489,"line_start":875,"line_end":875,"column_start":5,"column_end":78}},{"value":"/ is still under the configured limit.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":536494,"byte_end":536534,"line_start":876,"line_end":876,"column_start":5,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":2724},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/tuple.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tuple","qualname":"::tuple","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/tuple.rs","parent":null,"children":[{"krate":0,"index":2725},{"krate":0,"index":2726},{"krate":0,"index":8767},{"krate":0,"index":8772},{"krate":0,"index":8775},{"krate":0,"index":8777},{"krate":0,"index":2727},{"krate":0,"index":8780},{"krate":0,"index":8785},{"krate":0,"index":8791},{"krate":0,"index":8797},{"krate":0,"index":8804},{"krate":0,"index":8811},{"krate":0,"index":8819},{"krate":0,"index":8827},{"krate":0,"index":8836},{"krate":0,"index":8845},{"krate":0,"index":8855},{"krate":0,"index":8865},{"krate":0,"index":8876},{"krate":0,"index":8887},{"krate":0,"index":8899},{"krate":0,"index":8911},{"krate":0,"index":8924},{"krate":0,"index":8937},{"krate":0,"index":8951},{"krate":0,"index":8965},{"krate":0,"index":8980},{"krate":0,"index":8995},{"krate":0,"index":9011},{"krate":0,"index":9027}],"decl_id":null,"docs":" Support for combining strategies into tuples.","sig":null,"attributes":[{"value":"/ Support for combining strategies into tuples.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/tuple.rs","byte_start":554707,"byte_end":554756,"line_start":10,"line_end":10,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/tuple.rs","byte_start":554757,"byte_end":554760,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ There is no explicit \"tuple strategy\"; simply make a tuple containing the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/tuple.rs","byte_start":554761,"byte_end":554838,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ strategy and that tuple is itself a strategy.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/tuple.rs","byte_start":554839,"byte_end":554888,"line_start":13,"line_end":13,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":8767},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/tuple.rs","byte_start":555047,"byte_end":555061,"line_start":20,"line_end":20,"column_start":12,"column_end":26},"name":"TupleValueTree","qualname":"::tuple::TupleValueTree","value":"TupleValueTree {  }","parent":null,"children":[{"krate":0,"index":8769},{"krate":0,"index":8770},{"krate":0,"index":8771}],"decl_id":null,"docs":" Common `ValueTree` implementation for all tuple strategies.\n","sig":null,"attributes":[{"value":"/ Common `ValueTree` implementation for all tuple strategies.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/tuple.rs","byte_start":554942,"byte_end":555005,"line_start":18,"line_end":18,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2729},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/tuple.rs","byte_start":555354,"byte_end":555357,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"new","qualname":"<TupleValueTree<T>>::new","value":"pub fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `TupleValueTree` wrapping `inner`.","sig":null,"attributes":[{"value":"/ Create a new `TupleValueTree` wrapping `inner`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/tuple.rs","byte_start":555166,"byte_end":555217,"line_start":27,"line_end":27,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/tuple.rs","byte_start":555222,"byte_end":555225,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ It only makes sense for `inner` to be a tuple of an arity for which the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/tuple.rs","byte_start":555230,"byte_end":555305,"line_start":29,"line_end":29,"column_start":5,"column_end":80}},{"value":"/ type implements `ValueTree`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/tuple.rs","byte_start":555310,"byte_end":555342,"line_start":30,"line_end":30,"column_start":5,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":2731},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"option","qualname":"::option","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","parent":null,"children":[{"krate":0,"index":2732},{"krate":0,"index":2735},{"krate":0,"index":2736},{"krate":0,"index":2738},{"krate":0,"index":2741},{"krate":0,"index":2742},{"krate":0,"index":2743},{"krate":0,"index":2745},{"krate":0,"index":2747},{"krate":0,"index":2749},{"krate":0,"index":2755},{"krate":0,"index":9044},{"krate":0,"index":9047},{"krate":0,"index":9049},{"krate":0,"index":9050},{"krate":0,"index":9051},{"krate":0,"index":9054},{"krate":0,"index":9060},{"krate":0,"index":9062},{"krate":0,"index":9064},{"krate":0,"index":9065},{"krate":0,"index":9056},{"krate":0,"index":2757},{"krate":0,"index":2761},{"krate":0,"index":2764},{"krate":0,"index":2766},{"krate":0,"index":2769},{"krate":0,"index":2774},{"krate":0,"index":9079},{"krate":0,"index":9083},{"krate":0,"index":9067},{"krate":0,"index":9071},{"krate":0,"index":9076},{"krate":0,"index":2780},{"krate":0,"index":2783},{"krate":0,"index":2786},{"krate":0,"index":2789},{"krate":0,"index":2791}],"decl_id":null,"docs":" Strategies for generating `std::Option` values.\n","sig":null,"attributes":[{"value":"/ Strategies for generating `std::Option` values.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":559484,"byte_end":559535,"line_start":10,"line_end":10,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":2743},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":560172,"byte_end":560176,"line_start":32,"line_end":32,"column_start":8,"column_end":12},"name":"prob","qualname":"::option::prob","value":"pub fn prob<impl Into<Probability>: Into<Probability>>(impl Into<Probability>)\n-> Probability","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Probability` from some value that is convertible into it.","sig":null,"attributes":[{"value":"/ Creates a `Probability` from some value that is convertible into it.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":559914,"byte_end":559986,"line_start":25,"line_end":25,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":559987,"byte_end":559990,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":559991,"byte_end":560003,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":560004,"byte_end":560007,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Panics if the converted to probability would lie","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":560008,"byte_end":560060,"line_start":29,"line_end":29,"column_start":1,"column_end":53}},{"value":"/ outside interval `[0.0, 1.0]`. Consult the `Into` (or `From`)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":560061,"byte_end":560126,"line_start":30,"line_end":30,"column_start":1,"column_end":66}},{"value":"/ implementations for more details.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":560127,"byte_end":560164,"line_start":31,"line_end":31,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2750},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":560813,"byte_end":560816,"line_start":60,"line_end":60,"column_start":12,"column_end":15},"name":"new","qualname":"<Probability>::new","value":"pub fn new(f64) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `Probability` from a `f64`.","sig":null,"attributes":[{"value":"/ Creates a `Probability` from a `f64`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":560659,"byte_end":560700,"line_start":55,"line_end":55,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":560705,"byte_end":560708,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":560713,"byte_end":560725,"line_start":57,"line_end":57,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":560730,"byte_end":560733,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Panics if the probability is outside interval `[0.0, 1.0]`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":560738,"byte_end":560801,"line_start":59,"line_end":59,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2751},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":561219,"byte_end":561223,"line_start":71,"line_end":71,"column_start":12,"column_end":16},"name":"with","qualname":"<Probability>::with","value":"pub fn with<X>(Self, X) -> (Self, X)","parent":null,"children":[],"decl_id":null,"docs":" Merges self together with some other argument producing a product\n type expected by some implementations of `A: Arbitrary` in\n `A::Parameters`. This can be more ergonomic to work with and may\n help type inference.\n","sig":null,"attributes":[{"value":"/ Merges self together with some other argument producing a product","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":560969,"byte_end":561038,"line_start":67,"line_end":67,"column_start":5,"column_end":74}},{"value":"/ type expected by some implementations of `A: Arbitrary` in","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":561043,"byte_end":561105,"line_start":68,"line_end":68,"column_start":5,"column_end":67}},{"value":"/ `A::Parameters`. This can be more ergonomic to work with and may","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":561110,"byte_end":561178,"line_start":69,"line_end":69,"column_start":5,"column_end":73}},{"value":"/ help type inference.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":561183,"byte_end":561207,"line_start":70,"line_end":70,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2753},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":561594,"byte_end":561598,"line_start":79,"line_end":79,"column_start":12,"column_end":16},"name":"lift","qualname":"<Probability>::lift","value":"pub fn lift<X: Default>(Self) -> (Self, X)","parent":null,"children":[],"decl_id":null,"docs":" Merges self together with some other argument generated with a\n default value producing a product type expected by some\n implementations of `A: Arbitrary` in `A::Parameters`.\n This can be more ergonomic to work with and may help type inference.\n","sig":null,"attributes":[{"value":"/ Merges self together with some other argument generated with a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":561313,"byte_end":561379,"line_start":75,"line_end":75,"column_start":5,"column_end":71}},{"value":"/ default value producing a product type expected by some","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":561384,"byte_end":561443,"line_start":76,"line_end":76,"column_start":5,"column_end":64}},{"value":"/ implementations of `A: Arbitrary` in `A::Parameters`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":561448,"byte_end":561505,"line_start":77,"line_end":77,"column_start":5,"column_end":62}},{"value":"/ This can be more ergonomic to work with and may help type inference.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":561510,"byte_end":561582,"line_start":78,"line_end":78,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":9044},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":562361,"byte_end":562372,"line_start":114,"line_end":114,"column_start":12,"column_end":23},"name":"Probability","qualname":"::option::Probability","value":"","parent":null,"children":[],"decl_id":null,"docs":" A probability in the range `[0.0, 1.0]` with a default of `0.5`.\n","sig":null,"attributes":[{"value":"/ A probability in the range `[0.0, 1.0]` with a default of `0.5`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":562240,"byte_end":562308,"line_start":112,"line_end":112,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":9079},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":563706,"byte_end":563720,"line_start":167,"line_end":167,"column_start":16,"column_end":30},"name":"OptionStrategy","qualname":"::option::OptionStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy which generates `Option` values whose inner `Some` values are\n generated by another strategy.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":9067},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":563955,"byte_end":563970,"line_start":172,"line_end":172,"column_start":16,"column_end":31},"name":"OptionValueTree","qualname":"::option::OptionValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` type corresponding to `OptionStrategy`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2789},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":565103,"byte_end":565105,"line_start":213,"line_end":213,"column_start":8,"column_end":10},"name":"of","qualname":"::option::of","value":"pub fn of<T: Strategy>(T) -> OptionStrategy<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a strategy producing `Optional` values wrapping values from the\n given delegate strategy.","sig":null,"attributes":[{"value":"/ Return a strategy producing `Optional` values wrapping values from the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":564888,"byte_end":564962,"line_start":207,"line_end":207,"column_start":1,"column_end":75}},{"value":"/ given delegate strategy.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":564963,"byte_end":564991,"line_start":208,"line_end":208,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":564992,"byte_end":564995,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ `Some` values shrink to `None`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":564996,"byte_end":565031,"line_start":210,"line_end":210,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":565032,"byte_end":565035,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ `Some` and `None` are each chosen with 50% probability.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":565036,"byte_end":565095,"line_start":212,"line_end":212,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":2791},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":565473,"byte_end":565481,"line_start":224,"line_end":224,"column_start":8,"column_end":16},"name":"weighted","qualname":"::option::weighted","value":"pub fn weighted<T: Strategy,\n                impl Into<Probability>: Into<Probability>>(impl Into<Probability>,\n                                                           T)\n-> OptionStrategy<T>","parent":null,"children":[],"decl_id":null,"docs":" Return a strategy producing `Optional` values wrapping values from the\n given delegate strategy.","sig":null,"attributes":[{"value":"/ Return a strategy producing `Optional` values wrapping values from the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":565191,"byte_end":565265,"line_start":217,"line_end":217,"column_start":1,"column_end":75}},{"value":"/ given delegate strategy.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":565266,"byte_end":565294,"line_start":218,"line_end":218,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":565295,"byte_end":565298,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ `Some` values shrink to `None`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":565299,"byte_end":565334,"line_start":220,"line_end":220,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":565335,"byte_end":565338,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ `Some` is chosen with a probability given by `probability_of_some`, which","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":565339,"byte_end":565416,"line_start":222,"line_end":222,"column_start":1,"column_end":78}},{"value":"/ must be between 0.0 and 1.0, both exclusive.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":565417,"byte_end":565465,"line_start":223,"line_end":223,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":2794},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"result","qualname":"::result","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","parent":null,"children":[{"krate":0,"index":2795},{"krate":0,"index":2798},{"krate":0,"index":2799},{"krate":0,"index":2801},{"krate":0,"index":2804},{"krate":0,"index":2805},{"krate":0,"index":2806},{"krate":0,"index":2807},{"krate":0,"index":2810},{"krate":0,"index":2813},{"krate":0,"index":2819},{"krate":0,"index":2823},{"krate":0,"index":2826},{"krate":0,"index":2830},{"krate":0,"index":2835},{"krate":0,"index":2841},{"krate":0,"index":2845},{"krate":0,"index":2848},{"krate":0,"index":2852},{"krate":0,"index":2857},{"krate":0,"index":2860},{"krate":0,"index":9104},{"krate":0,"index":9109},{"krate":0,"index":9089},{"krate":0,"index":9094},{"krate":0,"index":9100},{"krate":0,"index":9131},{"krate":0,"index":9136},{"krate":0,"index":9116},{"krate":0,"index":9121},{"krate":0,"index":9127},{"krate":0,"index":2863},{"krate":0,"index":2867},{"krate":0,"index":2871},{"krate":0,"index":2875},{"krate":0,"index":2879},{"krate":0,"index":2883},{"krate":0,"index":2887},{"krate":0,"index":2890},{"krate":0,"index":2894},{"krate":0,"index":2897}],"decl_id":null,"docs":" Strategies for combining delegate strategies into `std::Result`s.","sig":null,"attributes":[{"value":"/ Strategies for combining delegate strategies into `std::Result`s.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":567095,"byte_end":567164,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":567165,"byte_end":567168,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ That is, the strategies here are for producing `Ok` _and_ `Err` cases. To","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":567169,"byte_end":567246,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ simply adapt a strategy producing `T` into `Result<T, something>` which is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":567247,"byte_end":567325,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ always `Ok`, you can do something like `base_strategy.prop_map(Ok)` to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":567326,"byte_end":567400,"line_start":14,"line_end":14,"column_start":1,"column_end":75}},{"value":"/ simply wrap the generated values.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":567401,"byte_end":567438,"line_start":15,"line_end":15,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":567439,"byte_end":567442,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ Note that there are two nearly identical APIs for doing this, termed \"maybe","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":567443,"byte_end":567522,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ ok\" and \"maybe err\". The difference between the two is in how they shrink;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":567523,"byte_end":567601,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ \"maybe ok\" treats `Ok` as the special case and shrinks to `Err`;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":567602,"byte_end":567670,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/ conversely, \"maybe err\" treats `Err` as the special case and shrinks to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":567671,"byte_end":567746,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ `Ok`. Which to use largely depends on the code being tested; if the code","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":567747,"byte_end":567823,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/ typically handles errors by immediately bailing out and doing nothing else,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":567824,"byte_end":567903,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/ \"maybe ok\" is likely more suitable, as shrinking will cause the code to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":567904,"byte_end":567979,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ take simpler paths. On the other hand, functions that need to make a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":567980,"byte_end":568052,"line_start":24,"line_end":24,"column_start":1,"column_end":73}},{"value":"/ complicated or fragile \"back out\" process on error are better tested with","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":568053,"byte_end":568130,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/ \"maybe err\" since the success case results in an easier to understand code","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":568131,"byte_end":568209,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ path.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":568210,"byte_end":568219,"line_start":27,"line_end":27,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":9104},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":569880,"byte_end":569887,"line_start":89,"line_end":89,"column_start":16,"column_end":23},"name":"MaybeOk","qualname":"::result::MaybeOk","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy which generates `Result`s using `Ok` and `Err` values from two\n delegate strategies.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":9089},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":570091,"byte_end":570107,"line_start":93,"line_end":93,"column_start":16,"column_end":32},"name":"MaybeOkValueTree","qualname":"::result::MaybeOkValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` type corresponding to `MaybeOk`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9131},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":570593,"byte_end":570601,"line_start":107,"line_end":107,"column_start":16,"column_end":24},"name":"MaybeErr","qualname":"::result::MaybeErr","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy which generates `Result`s using `Ok` and `Err` values from two\n delegate strategies.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":9116},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":570807,"byte_end":570824,"line_start":111,"line_end":111,"column_start":16,"column_end":33},"name":"MaybeErrValueTree","qualname":"::result::MaybeErrValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` type corresponding to `MaybeErr`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2887},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":572689,"byte_end":572697,"line_start":181,"line_end":181,"column_start":8,"column_end":16},"name":"maybe_ok","qualname":"::result::maybe_ok","value":"pub fn maybe_ok<T: Strategy, E: Strategy>(T, E) -> MaybeOk<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy for `Result`s where `Ok` values are taken from `t` and\n `Err` values are taken from `e`.","sig":null,"attributes":[{"value":"/ Create a strategy for `Result`s where `Ok` values are taken from `t` and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":572468,"byte_end":572544,"line_start":175,"line_end":175,"column_start":1,"column_end":77}},{"value":"/ `Err` values are taken from `e`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":572545,"byte_end":572581,"line_start":176,"line_end":176,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":572582,"byte_end":572585,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ `Ok` and `Err` are chosen with equal probability.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":572586,"byte_end":572639,"line_start":178,"line_end":178,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":572640,"byte_end":572643,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ Generated values shrink to `Err`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":572644,"byte_end":572681,"line_start":180,"line_end":180,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":2890},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":573069,"byte_end":573086,"line_start":192,"line_end":192,"column_start":8,"column_end":25},"name":"maybe_ok_weighted","qualname":"::result::maybe_ok_weighted","value":"pub fn maybe_ok_weighted<T: Strategy, E: Strategy,\n                         impl Into<Probability>: Into<Probability>>(impl Into<Probability>,\n                                                                    T, E)\n-> MaybeOk<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy for `Result`s where `Ok` values are taken from `t` and\n `Err` values are taken from `e`.","sig":null,"attributes":[{"value":"/ Create a strategy for `Result`s where `Ok` values are taken from `t` and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":572791,"byte_end":572867,"line_start":185,"line_end":185,"column_start":1,"column_end":77}},{"value":"/ `Err` values are taken from `e`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":572868,"byte_end":572904,"line_start":186,"line_end":186,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":572905,"byte_end":572908,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ `probability_of_ok` is the probability (between 0.0 and 1.0, exclusive)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":572909,"byte_end":572984,"line_start":188,"line_end":188,"column_start":1,"column_end":76}},{"value":"/ that `Ok` is initially chosen.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":572985,"byte_end":573019,"line_start":189,"line_end":189,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":573020,"byte_end":573023,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ Generated values shrink to `Err`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":573024,"byte_end":573061,"line_start":191,"line_end":191,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":2894},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":573815,"byte_end":573824,"line_start":218,"line_end":218,"column_start":8,"column_end":17},"name":"maybe_err","qualname":"::result::maybe_err","value":"pub fn maybe_err<T: Strategy, E: Strategy>(T, E) -> MaybeErr<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy for `Result`s where `Ok` values are taken from `t` and\n `Err` values are taken from `e`.","sig":null,"attributes":[{"value":"/ Create a strategy for `Result`s where `Ok` values are taken from `t` and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":573595,"byte_end":573671,"line_start":212,"line_end":212,"column_start":1,"column_end":77}},{"value":"/ `Err` values are taken from `e`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":573672,"byte_end":573708,"line_start":213,"line_end":213,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":573709,"byte_end":573712,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ `Ok` and `Err` are chosen with equal probability.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":573713,"byte_end":573766,"line_start":215,"line_end":215,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":573767,"byte_end":573770,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ Generated values shrink to `Ok`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":573771,"byte_end":573807,"line_start":217,"line_end":217,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":2897},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":574198,"byte_end":574216,"line_start":229,"line_end":229,"column_start":8,"column_end":26},"name":"maybe_err_weighted","qualname":"::result::maybe_err_weighted","value":"pub fn maybe_err_weighted<T: Strategy, E: Strategy,\n                          impl Into<Probability>: Into<Probability>>(impl Into<Probability>,\n                                                                     T, E)\n-> MaybeErr<T, E>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy for `Result`s where `Ok` values are taken from `t` and\n `Err` values are taken from `e`.","sig":null,"attributes":[{"value":"/ Create a strategy for `Result`s where `Ok` values are taken from `t` and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":573920,"byte_end":573996,"line_start":222,"line_end":222,"column_start":1,"column_end":77}},{"value":"/ `Err` values are taken from `e`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":573997,"byte_end":574033,"line_start":223,"line_end":223,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":574034,"byte_end":574037,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ `probability_of_ok` is the probability (between 0.0 and 1.0, exclusive)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":574038,"byte_end":574113,"line_start":225,"line_end":225,"column_start":1,"column_end":76}},{"value":"/ that `Err` is initially chosen.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":574114,"byte_end":574149,"line_start":226,"line_end":226,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":574150,"byte_end":574153,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ Generated values shrink to `Ok`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":574154,"byte_end":574190,"line_start":228,"line_end":228,"column_start":1,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":2901},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sample","qualname":"::sample","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","parent":null,"children":[{"krate":0,"index":2902},{"krate":0,"index":2903},{"krate":0,"index":2906},{"krate":0,"index":2909},{"krate":0,"index":2912},{"krate":0,"index":2915},{"krate":0,"index":2918},{"krate":0,"index":2921},{"krate":0,"index":2924},{"krate":0,"index":2927},{"krate":0,"index":2928},{"krate":0,"index":2931},{"krate":0,"index":2934},{"krate":0,"index":2937},{"krate":0,"index":2940},{"krate":0,"index":2943},{"krate":0,"index":2944},{"krate":0,"index":2945},{"krate":0,"index":2946},{"krate":0,"index":2949},{"krate":0,"index":2952},{"krate":0,"index":9143},{"krate":0,"index":9147},{"krate":0,"index":9150},{"krate":0,"index":2956},{"krate":0,"index":9153},{"krate":0,"index":9157},{"krate":0,"index":9160},{"krate":0,"index":2961},{"krate":0,"index":9163},{"krate":0,"index":9167},{"krate":0,"index":9170},{"krate":0,"index":2968},{"krate":0,"index":9181},{"krate":0,"index":9185},{"krate":0,"index":9188},{"krate":0,"index":9191},{"krate":0,"index":9195},{"krate":0,"index":9198},{"krate":0,"index":9173},{"krate":0,"index":9178},{"krate":0,"index":2972},{"krate":0,"index":9204},{"krate":0,"index":9207},{"krate":0,"index":9209},{"krate":0,"index":9210},{"krate":0,"index":2975},{"krate":0,"index":9215},{"krate":0,"index":9217},{"krate":0,"index":9219},{"krate":0,"index":9220},{"krate":0,"index":9212},{"krate":0,"index":9228},{"krate":0,"index":9231},{"krate":0,"index":9233},{"krate":0,"index":9235},{"krate":0,"index":9238},{"krate":0,"index":9240},{"krate":0,"index":9222},{"krate":0,"index":9226},{"krate":0,"index":2983},{"krate":0,"index":9245},{"krate":0,"index":9248},{"krate":0,"index":9250},{"krate":0,"index":9252},{"krate":0,"index":9254},{"krate":0,"index":9256},{"krate":0,"index":9259},{"krate":0,"index":2985},{"krate":0,"index":2987},{"krate":0,"index":2991},{"krate":0,"index":2996}],"decl_id":null,"docs":" Strategies for generating values by taking samples of collections.","sig":null,"attributes":[{"value":"/ Strategies for generating values by taking samples of collections.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":577548,"byte_end":577618,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":577619,"byte_end":577622,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Note that the strategies in this module are not native combinators; that","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":577623,"byte_end":577699,"line_start":12,"line_end":12,"column_start":1,"column_end":77}},{"value":"/ is, the input collection is not itself a strategy, but is rather fixed when","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":577700,"byte_end":577779,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ the strategy is created.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":577780,"byte_end":577808,"line_start":14,"line_end":14,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":2952},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578761,"byte_end":578772,"line_start":49,"line_end":49,"column_start":8,"column_end":19},"name":"subsequence","qualname":"::sample::subsequence","value":"pub fn subsequence<T: Clone + 'static,\n                   impl Into<Cow<'static, [T]>>: Into<Cow>,\n                   impl Into<SizeRange>: Into<SizeRange>>(impl Into<Cow<'static, [T]>>,\n                                                          impl Into<SizeRange>)\n-> Subsequence<T>","parent":null,"children":[],"decl_id":null,"docs":" Sample subsequences whose size are within `size` from the given collection\n `values`.","sig":null,"attributes":[{"value":"/ Sample subsequences whose size are within `size` from the given collection","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578177,"byte_end":578255,"line_start":32,"line_end":32,"column_start":1,"column_end":79}},{"value":"/ `values`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578256,"byte_end":578269,"line_start":33,"line_end":33,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578270,"byte_end":578273,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ A subsequence is a subset of the elements in a collection in the order they","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578274,"byte_end":578353,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/ occur in that collection. The elements are not chosen to be contiguous.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578354,"byte_end":578429,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578430,"byte_end":578433,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This is roughly analogous to `rand::sample`, except that it guarantees that","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578434,"byte_end":578513,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ the order is preserved.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578514,"byte_end":578541,"line_start":39,"line_end":39,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578542,"byte_end":578545,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ `values` may be a static slice or a `Vec`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578546,"byte_end":578592,"line_start":41,"line_end":41,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578593,"byte_end":578596,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578597,"byte_end":578610,"line_start":43,"line_end":43,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578611,"byte_end":578614,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Panics if the maximum size implied by `size` is larger than the size of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578615,"byte_end":578690,"line_start":45,"line_end":45,"column_start":1,"column_end":76}},{"value":"/ `values`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578691,"byte_end":578704,"line_start":46,"line_end":46,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578705,"byte_end":578708,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Panics if `size` is a zero-length range.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":578709,"byte_end":578753,"line_start":48,"line_end":48,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":9143},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":579532,"byte_end":579543,"line_start":76,"line_end":76,"column_start":12,"column_end":23},"name":"Subsequence","qualname":"::sample::Subsequence","value":"Subsequence {  }","parent":null,"children":[{"krate":0,"index":9145},{"krate":0,"index":9146}],"decl_id":null,"docs":" Strategy to generate `Vec`s by sampling a subsequence from another\n collection.","sig":null,"attributes":[{"value":"/ Strategy to generate `Vec`s by sampling a subsequence from another","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":579286,"byte_end":579356,"line_start":70,"line_end":70,"column_start":1,"column_end":71}},{"value":"/ collection.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":579357,"byte_end":579372,"line_start":71,"line_end":71,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":579373,"byte_end":579376,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ This is created by the `subsequence` function in the same module.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":579377,"byte_end":579446,"line_start":73,"line_end":73,"column_start":1,"column_end":70}},{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":579471,"byte_end":579520,"line_start":75,"line_end":75,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":9153},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":580090,"byte_end":580110,"line_start":95,"line_end":95,"column_start":12,"column_end":32},"name":"SubsequenceValueTree","qualname":"::sample::SubsequenceValueTree","value":"SubsequenceValueTree {  }","parent":null,"children":[{"krate":0,"index":9155},{"krate":0,"index":9156}],"decl_id":null,"docs":" `ValueTree` type for `Subsequence`.\n","sig":null,"attributes":[{"value":"/ `ValueTree` type for `Subsequence`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":580015,"byte_end":580054,"line_start":93,"line_end":93,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":9181},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":581117,"byte_end":581123,"line_start":134,"line_end":134,"column_start":16,"column_end":22},"name":"Select","qualname":"::sample::Select","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to produce one value from a fixed collection of options.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":9191},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":581343,"byte_end":581358,"line_start":139,"line_end":139,"column_start":16,"column_end":31},"name":"SelectValueTree","qualname":"::sample::SelectValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `Select`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2972},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":582032,"byte_end":582038,"line_start":156,"line_end":156,"column_start":8,"column_end":14},"name":"select","qualname":"::sample::select","value":"pub fn select<T: Clone + fmt::Debug + 'static,\n              impl Into<Cow<'static, [T]>>: Into<Cow>>(impl Into<Cow<'static, [T]>>)\n-> Select<T>","parent":null,"children":[],"decl_id":null,"docs":" Create a strategy which uniformly selects one value from `values`.","sig":null,"attributes":[{"value":"/ Create a strategy which uniformly selects one value from `values`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":581486,"byte_end":581556,"line_start":144,"line_end":144,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":581557,"byte_end":581560,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ `values` should be a `&'static [T]` or a `Vec<T>`, or potentially another","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":581561,"byte_end":581638,"line_start":146,"line_end":146,"column_start":1,"column_end":78}},{"value":"/ type that can be coerced to `Cow<'static,[T]>`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":581639,"byte_end":581690,"line_start":147,"line_end":147,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":581691,"byte_end":581694,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ This is largely equivalent to making a `Union` of a bunch of `Just`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":581695,"byte_end":581766,"line_start":149,"line_end":149,"column_start":1,"column_end":72}},{"value":"/ strategies, but is substantially more efficient and shrinks by binary","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":581767,"byte_end":581840,"line_start":150,"line_end":150,"column_start":1,"column_end":74}},{"value":"/ search.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":581841,"byte_end":581852,"line_start":151,"line_end":151,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":581853,"byte_end":581856,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ If `values` is also to be generated by a strategy, see","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":581857,"byte_end":581915,"line_start":153,"line_end":153,"column_start":1,"column_end":59}},{"value":"/ [`Index`](struct.Index.html) for a more efficient way to select values than","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":581916,"byte_end":581995,"line_start":154,"line_end":154,"column_start":1,"column_end":80}},{"value":"/ using `prop_flat_map()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":581996,"byte_end":582024,"line_start":155,"line_end":155,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":9204},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584149,"byte_end":584154,"line_start":213,"line_end":213,"column_start":12,"column_end":17},"name":"Index","qualname":"::sample::Index","value":"","parent":null,"children":[],"decl_id":null,"docs":" A stand-in for an index into a slice or similar collection or conceptually\n similar things.","sig":null,"attributes":[{"value":"/ A stand-in for an index into a slice or similar collection or conceptually","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":582237,"byte_end":582315,"line_start":164,"line_end":164,"column_start":1,"column_end":79}},{"value":"/ similar things.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":582316,"byte_end":582335,"line_start":165,"line_end":165,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":582336,"byte_end":582339,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ At the lowest level, `Index` is a mechanism for generating `usize` values","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":582340,"byte_end":582417,"line_start":167,"line_end":167,"column_start":1,"column_end":78}},{"value":"/ in the range [0..N), for some N whose value is not known until it is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":582418,"byte_end":582490,"line_start":168,"line_end":168,"column_start":1,"column_end":73}},{"value":"/ needed. (Contrast with using `0..N` itself as a strategy, where you need to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":582491,"byte_end":582570,"line_start":169,"line_end":169,"column_start":1,"column_end":80}},{"value":"/ know N when you define the strategy.)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":582571,"byte_end":582612,"line_start":170,"line_end":170,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":582613,"byte_end":582616,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ For any upper bound, the actual index produced by an `Index` is the same no","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":582617,"byte_end":582696,"line_start":172,"line_end":172,"column_start":1,"column_end":80}},{"value":"/ matter how many times it is used. Different upper bounds will produce","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":582697,"byte_end":582770,"line_start":173,"line_end":173,"column_start":1,"column_end":74}},{"value":"/ different but not independent values.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":582771,"byte_end":582812,"line_start":174,"line_end":174,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":582813,"byte_end":582816,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ Shrinking will cause the index to binary search through the underlying","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":582817,"byte_end":582891,"line_start":176,"line_end":176,"column_start":1,"column_end":75}},{"value":"/ collection(s) it is used to sample.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":582892,"byte_end":582931,"line_start":177,"line_end":177,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":582932,"byte_end":582935,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ Note that `Index` _cannot_ currently be used as a slice index (e.g.,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":582936,"byte_end":583008,"line_start":179,"line_end":179,"column_start":1,"column_end":73}},{"value":"/ `slice[index]`) due to the trait coherence rules.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583009,"byte_end":583062,"line_start":180,"line_end":180,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583063,"byte_end":583066,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583067,"byte_end":583081,"line_start":182,"line_end":182,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583082,"byte_end":583085,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ If the collection itself being indexed is itself generated by a strategy,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583086,"byte_end":583163,"line_start":184,"line_end":184,"column_start":1,"column_end":78}},{"value":"/ you can make separately define that strategy and a strategy generating one","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583164,"byte_end":583242,"line_start":185,"line_end":185,"column_start":1,"column_end":79}},{"value":"/ or more `Index`es and then join the two after input generation, avoiding a","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583243,"byte_end":583321,"line_start":186,"line_end":186,"column_start":1,"column_end":79}},{"value":"/ call to `prop_flat_map()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583322,"byte_end":583352,"line_start":187,"line_end":187,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583353,"byte_end":583356,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583357,"byte_end":583364,"line_start":189,"line_end":189,"column_start":1,"column_end":8}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583365,"byte_end":583394,"line_start":190,"line_end":190,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583395,"byte_end":583398,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ proptest! {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583399,"byte_end":583414,"line_start":192,"line_end":192,"column_start":1,"column_end":16}},{"value":"/     # /*","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583415,"byte_end":583427,"line_start":193,"line_end":193,"column_start":1,"column_end":13}},{"value":"/     #[test]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583428,"byte_end":583443,"line_start":194,"line_end":194,"column_start":1,"column_end":16}},{"value":"/     # */","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583444,"byte_end":583456,"line_start":195,"line_end":195,"column_start":1,"column_end":13}},{"value":"/     fn my_test(","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583457,"byte_end":583476,"line_start":196,"line_end":196,"column_start":1,"column_end":20}},{"value":"/         names in prop::collection::vec(\"[a-z]+\", 10..20),","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583477,"byte_end":583538,"line_start":197,"line_end":197,"column_start":1,"column_end":62}},{"value":"/         indices in prop::collection::vec(any::<prop::sample::Index>(), 5..10)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583539,"byte_end":583620,"line_start":198,"line_end":198,"column_start":1,"column_end":82}},{"value":"/     ) {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583621,"byte_end":583632,"line_start":199,"line_end":199,"column_start":1,"column_end":12}},{"value":"/         // We now have Vec<String> of ten to twenty names, and a Vec<Index>","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583633,"byte_end":583712,"line_start":200,"line_end":200,"column_start":1,"column_end":80}},{"value":"/         // of five to ten indices and can combine them however we like.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583713,"byte_end":583788,"line_start":201,"line_end":201,"column_start":1,"column_end":76}},{"value":"/         for index in &indices {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583789,"byte_end":583824,"line_start":202,"line_end":202,"column_start":1,"column_end":36}},{"value":"/             println!(\"Accessing item by index: {}\", names[index.index(names.len())]);","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583825,"byte_end":583914,"line_start":203,"line_end":203,"column_start":1,"column_end":90}},{"value":"/             println!(\"Accessing item by convenience method: {}\", index.get(&names));","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":583915,"byte_end":584003,"line_start":204,"line_end":204,"column_start":1,"column_end":89}},{"value":"/         }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584004,"byte_end":584017,"line_start":205,"line_end":205,"column_start":1,"column_end":14}},{"value":"/         // Test stuff...","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584018,"byte_end":584046,"line_start":206,"line_end":206,"column_start":1,"column_end":29}},{"value":"/     }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584047,"byte_end":584056,"line_start":207,"line_end":207,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584057,"byte_end":584062,"line_start":208,"line_end":208,"column_start":1,"column_end":6}},{"value":"/ #","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584063,"byte_end":584068,"line_start":209,"line_end":209,"column_start":1,"column_end":6}},{"value":"/ # fn main() { my_test(); }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584069,"byte_end":584099,"line_start":210,"line_end":210,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584100,"byte_end":584107,"line_start":211,"line_end":211,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":2976},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584340,"byte_end":584345,"line_start":221,"line_end":221,"column_start":12,"column_end":17},"name":"index","qualname":"<Index>::index","value":"pub fn index(&Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the real index that would be used to index a collection of size `size`.","sig":null,"attributes":[{"value":"/ Return the real index that would be used to index a collection of size `size`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584181,"byte_end":584263,"line_start":216,"line_end":216,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584268,"byte_end":584271,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584276,"byte_end":584289,"line_start":218,"line_end":218,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584294,"byte_end":584297,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Panics if `size == 0`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584302,"byte_end":584328,"line_start":220,"line_end":220,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2977},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584916,"byte_end":584919,"line_start":234,"line_end":234,"column_start":12,"column_end":15},"name":"get","qualname":"<Index>::get","value":"pub fn get<'a, T>(&Self, &'a [T]) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the element in `slice` that this `Index` refers to.","sig":null,"attributes":[{"value":"/ Return a reference to the element in `slice` that this `Index` refers to.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584760,"byte_end":584837,"line_start":231,"line_end":231,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584842,"byte_end":584845,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ A shortcut for `&slice[index.index(slice.len())]`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584850,"byte_end":584904,"line_start":233,"line_end":233,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2980},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":585188,"byte_end":585195,"line_start":242,"line_end":242,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Index>::get_mut","value":"pub fn get_mut<'a, T>(&Self, &'a mut [T]) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the element in `slice` that this `Index`\n refers to.","sig":null,"attributes":[{"value":"/ Return a mutable reference to the element in `slice` that this `Index`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":585012,"byte_end":585086,"line_start":238,"line_end":238,"column_start":5,"column_end":79}},{"value":"/ refers to.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":585091,"byte_end":585105,"line_start":239,"line_end":239,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":585110,"byte_end":585113,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ A shortcut for `&mut slice[index.index(slice.len())]`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":585118,"byte_end":585176,"line_start":241,"line_end":241,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":9228},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":585558,"byte_end":585571,"line_start":259,"line_end":259,"column_start":16,"column_end":29},"name":"IndexStrategy","qualname":"::sample::IndexStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy to create `Index`es.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":9235},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":585754,"byte_end":585768,"line_start":264,"line_end":264,"column_start":16,"column_end":30},"name":"IndexValueTree","qualname":"::sample::IndexValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `IndexStrategy`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":9245},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":587099,"byte_end":587107,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"Selector","qualname":"::sample::Selector","value":"Selector {  }","parent":null,"children":[{"krate":0,"index":9246},{"krate":0,"index":9247}],"decl_id":null,"docs":" A value for picking random values out of iterators.","sig":null,"attributes":[{"value":"/ A value for picking random values out of iterators.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":585992,"byte_end":586047,"line_start":275,"line_end":275,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586048,"byte_end":586051,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ This is, in a sense, a more flexible variant of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586052,"byte_end":586103,"line_start":277,"line_end":277,"column_start":1,"column_end":52}},{"value":"/ [`Index`](struct.Index.html) in that it can operate on arbitrary","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586104,"byte_end":586172,"line_start":278,"line_end":278,"column_start":1,"column_end":69}},{"value":"/ `IntoIterator` values.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586173,"byte_end":586199,"line_start":279,"line_end":279,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586200,"byte_end":586203,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ Initially, the selection is roughly uniform, with a very slight bias","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586204,"byte_end":586276,"line_start":281,"line_end":281,"column_start":1,"column_end":73}},{"value":"/ towards items earlier in the iterator.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586277,"byte_end":586319,"line_start":282,"line_end":282,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586320,"byte_end":586323,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ Shrinking causes the selection to move toward items earlier in the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586324,"byte_end":586394,"line_start":284,"line_end":284,"column_start":1,"column_end":71}},{"value":"/ iterator, ultimately settling on the very first, but this currently happens","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586395,"byte_end":586474,"line_start":285,"line_end":285,"column_start":1,"column_end":80}},{"value":"/ in a very haphazard way that may fail to find the earliest failing input.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586475,"byte_end":586552,"line_start":286,"line_end":286,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586553,"byte_end":586556,"line_start":287,"line_end":287,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586557,"byte_end":586571,"line_start":288,"line_end":288,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586572,"byte_end":586575,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"/ Generate a non-indexable collection and a value to pick out of it.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586576,"byte_end":586646,"line_start":290,"line_end":290,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586647,"byte_end":586650,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586651,"byte_end":586658,"line_start":292,"line_end":292,"column_start":1,"column_end":8}},{"value":"/ use proptest::prelude::*;","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586659,"byte_end":586688,"line_start":293,"line_end":293,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586689,"byte_end":586692,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"/ proptest! {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586693,"byte_end":586708,"line_start":295,"line_end":295,"column_start":1,"column_end":16}},{"value":"/     # /*","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586709,"byte_end":586721,"line_start":296,"line_end":296,"column_start":1,"column_end":13}},{"value":"/     #[test]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586722,"byte_end":586737,"line_start":297,"line_end":297,"column_start":1,"column_end":16}},{"value":"/     # */","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586738,"byte_end":586750,"line_start":298,"line_end":298,"column_start":1,"column_end":13}},{"value":"/     fn my_test(","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586751,"byte_end":586770,"line_start":299,"line_end":299,"column_start":1,"column_end":20}},{"value":"/         names in prop::collection::hash_set(\"[a-z]+\", 10..20),","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586771,"byte_end":586837,"line_start":300,"line_end":300,"column_start":1,"column_end":67}},{"value":"/         selector in any::<prop::sample::Selector>()","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586838,"byte_end":586893,"line_start":301,"line_end":301,"column_start":1,"column_end":56}},{"value":"/     ) {","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586894,"byte_end":586905,"line_start":302,"line_end":302,"column_start":1,"column_end":12}},{"value":"/         println!(\"Selected name: {}\", selector.select(&names));","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586906,"byte_end":586973,"line_start":303,"line_end":303,"column_start":1,"column_end":68}},{"value":"/         // Test stuff...","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":586974,"byte_end":587002,"line_start":304,"line_end":304,"column_start":1,"column_end":29}},{"value":"/     }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":587003,"byte_end":587012,"line_start":305,"line_end":305,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":587013,"byte_end":587018,"line_start":306,"line_end":306,"column_start":1,"column_end":6}},{"value":"/ #","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":587019,"byte_end":587024,"line_start":307,"line_end":307,"column_start":1,"column_end":6}},{"value":"/ # fn main() { my_test(); }","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":587025,"byte_end":587055,"line_start":308,"line_end":308,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":587056,"byte_end":587063,"line_start":309,"line_end":309,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":9252},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":587261,"byte_end":587277,"line_start":320,"line_end":320,"column_start":12,"column_end":28},"name":"SelectorStrategy","qualname":"::sample::SelectorStrategy","value":"SelectorStrategy {  }","parent":null,"children":[{"krate":0,"index":9253}],"decl_id":null,"docs":" Strategy to create `Selector`s.","sig":null,"attributes":[{"value":"/ Strategy to create `Selector`s.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":587156,"byte_end":587191,"line_start":316,"line_end":316,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":587192,"byte_end":587195,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ Created via `any::<Selector>()`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":587196,"byte_end":587232,"line_start":318,"line_end":318,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":9256},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":587388,"byte_end":587405,"line_start":326,"line_end":326,"column_start":12,"column_end":29},"name":"SelectorValueTree","qualname":"::sample::SelectorValueTree","value":"SelectorValueTree {  }","parent":null,"children":[{"krate":0,"index":9257},{"krate":0,"index":9258}],"decl_id":null,"docs":" `ValueTree` corresponding to `SelectorStrategy`.\n","sig":null,"attributes":[{"value":"/ `ValueTree` corresponding to `SelectorStrategy`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":587307,"byte_end":587359,"line_start":324,"line_end":324,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2997},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":588699,"byte_end":588705,"line_start":379,"line_end":379,"column_start":12,"column_end":18},"name":"select","qualname":"<Selector>::select","value":"pub fn select<T: IntoIterator>(&Self, T) -> T::Item","parent":null,"children":[],"decl_id":null,"docs":" Pick a random element from iterable `it`.","sig":null,"attributes":[{"value":"/ Pick a random element from iterable `it`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":588384,"byte_end":588429,"line_start":369,"line_end":369,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":588434,"byte_end":588437,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ The selection is unaffected by the elements themselves, and is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":588442,"byte_end":588508,"line_start":371,"line_end":371,"column_start":5,"column_end":71}},{"value":"/ dependent only on the actual length of `it`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":588513,"byte_end":588561,"line_start":372,"line_end":372,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":588566,"byte_end":588569,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ `it` is always iterated completely.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":588574,"byte_end":588613,"line_start":374,"line_end":374,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":588618,"byte_end":588621,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ ## Panics","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":588626,"byte_end":588639,"line_start":376,"line_end":376,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":588644,"byte_end":588647,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ Panics if `it` has no elements.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":588652,"byte_end":588687,"line_start":378,"line_end":378,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2999},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":589116,"byte_end":589126,"line_start":391,"line_end":391,"column_start":12,"column_end":22},"name":"try_select","qualname":"<Selector>::try_select","value":"pub fn try_select<T: IntoIterator>(&Self, T) -> Option<T::Item>","parent":null,"children":[],"decl_id":null,"docs":" Pick a random element from iterable `it`.","sig":null,"attributes":[{"value":"/ Pick a random element from iterable `it`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":588826,"byte_end":588871,"line_start":383,"line_end":383,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":588876,"byte_end":588879,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if `it` is empty.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":588884,"byte_end":588920,"line_start":385,"line_end":385,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":588925,"byte_end":588928,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ The selection is unaffected by the elements themselves, and is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":588933,"byte_end":588999,"line_start":387,"line_end":387,"column_start":5,"column_end":71}},{"value":"/ dependent only on the actual length of `it`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":589004,"byte_end":589052,"line_start":388,"line_end":388,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":589057,"byte_end":589060,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ `it` is always iterated completely.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":589065,"byte_end":589104,"line_start":390,"line_end":390,"column_start":5,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":3001},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"string","qualname":"::string","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","parent":null,"children":[{"krate":0,"index":3002},{"krate":0,"index":3003},{"krate":0,"index":3006},{"krate":0,"index":3009},{"krate":0,"index":3012},{"krate":0,"index":3015},{"krate":0,"index":3018},{"krate":0,"index":3021},{"krate":0,"index":3024},{"krate":0,"index":3027},{"krate":0,"index":3030},{"krate":0,"index":3031},{"krate":0,"index":3034},{"krate":0,"index":3037},{"krate":0,"index":3038},{"krate":0,"index":3039},{"krate":0,"index":3040},{"krate":0,"index":3043},{"krate":0,"index":3044},{"krate":0,"index":3045},{"krate":0,"index":3046},{"krate":0,"index":3049},{"krate":0,"index":3052},{"krate":0,"index":3055},{"krate":0,"index":3058},{"krate":0,"index":3059},{"krate":0,"index":3062},{"krate":0,"index":3065},{"krate":0,"index":3068},{"krate":0,"index":3069},{"krate":0,"index":9261},{"krate":0,"index":9264},{"krate":0,"index":9265},{"krate":0,"index":9267},{"krate":0,"index":9268},{"krate":0,"index":9271},{"krate":0,"index":9272},{"krate":0,"index":9274},{"krate":0,"index":9276},{"krate":0,"index":9278},{"krate":0,"index":3070},{"krate":0,"index":3072},{"krate":0,"index":3074},{"krate":0,"index":3076},{"krate":0,"index":3078},{"krate":0,"index":9310},{"krate":0,"index":9314},{"krate":0,"index":9298},{"krate":0,"index":9302},{"krate":0,"index":9307},{"krate":0,"index":3081},{"krate":0,"index":3085},{"krate":0,"index":3087},{"krate":0,"index":3090},{"krate":0,"index":3093},{"krate":0,"index":3096},{"krate":0,"index":3097},{"krate":0,"index":3100},{"krate":0,"index":3101},{"krate":0,"index":3110},{"krate":0,"index":3114},{"krate":0,"index":3120},{"krate":0,"index":3122},{"krate":0,"index":3127},{"krate":0,"index":3128},{"krate":0,"index":3130},{"krate":0,"index":3131}],"decl_id":null,"docs":" Strategies for generating strings and byte strings from regular\n expressions.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":2276,"byte_end":2299,"line_start":105,"line_end":105,"column_start":1,"column_end":24}},{"value":"/ Strategies for generating strings and byte strings from regular","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":594246,"byte_end":594313,"line_start":10,"line_end":10,"column_start":1,"column_end":68}},{"value":"/ expressions.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":594314,"byte_end":594330,"line_start":11,"line_end":11,"column_start":1,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":9261},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":595014,"byte_end":595025,"line_start":37,"line_end":37,"column_start":12,"column_end":23},"name":"StringParam","qualname":"::string::StringParam","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wraps the regex that forms the `Strategy` for `String` so that a sensible\n `Default` can be given. The default is a string of non-control characters.\n","sig":null,"attributes":[{"value":"/ Wraps the regex that forms the `Strategy` for `String` so that a sensible","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":594785,"byte_end":594862,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ `Default` can be given. The default is a string of non-control characters.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":594863,"byte_end":594941,"line_start":35,"line_end":35,"column_start":1,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":9282},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":595825,"byte_end":595836,"line_start":69,"line_end":69,"column_start":13,"column_end":24},"name":"RegexSyntax","qualname":"::string::error_container::Error::RegexSyntax","value":"Error::RegexSyntax(ParseError)","parent":{"krate":0,"index":9281},"children":[],"decl_id":null,"docs":" The string passed as the regex was not syntactically valid.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":9285},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":596092,"byte_end":596108,"line_start":76,"line_end":76,"column_start":13,"column_end":29},"name":"UnsupportedRegex","qualname":"::string::error_container::Error::UnsupportedRegex","value":"Error::UnsupportedRegex(&'static str)","parent":{"krate":0,"index":9281},"children":[],"decl_id":null,"docs":" The regex was syntactically valid, but contains elements not\n supported by proptest.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":9281},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":595729,"byte_end":595734,"line_start":67,"line_end":67,"column_start":18,"column_end":23},"name":"Error","qualname":"::string::error_container::Error","value":"pub enum Error { RegexSyntax(ParseError), UnsupportedRegex(&'static str), }","parent":null,"children":[{"krate":0,"index":9282},{"krate":0,"index":9285}],"decl_id":null,"docs":" Errors which may occur when preparing a regular expression for use with\n string generation.\n","sig":null,"attributes":[{"value":"allow(unknown_lints)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-error-2.0.1/src/lib.rs","byte_start":11775668,"byte_end":11775691,"line_start":552,"line_end":552,"column_start":9,"column_end":32}},{"value":"allow(renamed_and_removed_lints)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-error-2.0.1/src/lib.rs","byte_start":11775741,"byte_end":11775776,"line_start":553,"line_end":553,"column_start":9,"column_end":44}},{"value":"allow(unused_doc_comment)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-error-2.0.1/src/lib.rs","byte_start":11775785,"byte_end":11775813,"line_start":554,"line_end":554,"column_start":9,"column_end":37}},{"value":"allow(unused_doc_comments)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/quick-error-2.0.1/src/lib.rs","byte_start":11775822,"byte_end":11775851,"line_start":555,"line_end":555,"column_start":9,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":9310},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":596478,"byte_end":596500,"line_start":91,"line_end":91,"column_start":16,"column_end":38},"name":"RegexGeneratorStrategy","qualname":"::string::RegexGeneratorStrategy","value":"","parent":null,"children":[],"decl_id":null,"docs":" Strategy which generates values (i.e., `String` or `Vec<u8>`) matching\n a regular expression.","sig":null,"attributes":[{"value":"must_use = \"strategies do nothing unless used\"","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/macros.rs","byte_start":7750,"byte_end":7799,"line_start":60,"line_end":60,"column_start":9,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":9298},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":596665,"byte_end":596688,"line_start":94,"line_end":94,"column_start":16,"column_end":39},"name":"RegexGeneratorValueTree","qualname":"::string::RegexGeneratorValueTree","value":"","parent":null,"children":[],"decl_id":null,"docs":" `ValueTree` corresponding to `RegexGeneratorStrategy`.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3087},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":597444,"byte_end":597461,"line_start":117,"line_end":117,"column_start":11,"column_end":28},"name":"StrategyFromRegex","qualname":"::string::StrategyFromRegex","value":"StrategyFromRegex: Sized + fmt::Debug","parent":null,"children":[{"krate":0,"index":3088},{"krate":0,"index":3089}],"decl_id":null,"docs":" A type which knows how to produce a `Strategy` from a regular expression\n generating the type.","sig":null,"attributes":[{"value":"/ A type which knows how to produce a `Strategy` from a regular expression","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":597073,"byte_end":597149,"line_start":110,"line_end":110,"column_start":1,"column_end":77}},{"value":"/ generating the type.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":597150,"byte_end":597174,"line_start":111,"line_end":111,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":597175,"byte_end":597178,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ This trait exists for the benefit of `#[proptest(regex = \"...\")]`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":597179,"byte_end":597249,"line_start":113,"line_end":113,"column_start":1,"column_end":71}},{"value":"/ It is semver exempt, so use at your own risk.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":597250,"byte_end":597299,"line_start":114,"line_end":114,"column_start":1,"column_end":50}},{"value":"/ If you found a use for the trait beyond `Vec<u8>` and `String`,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":597300,"byte_end":597367,"line_start":115,"line_end":115,"column_start":1,"column_end":68}},{"value":"/ please file an issue at https://github.com/AltSysrq/proptest.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":597368,"byte_end":597433,"line_start":116,"line_end":116,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":3088},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":597493,"byte_end":597501,"line_start":118,"line_end":118,"column_start":10,"column_end":18},"name":"Strategy","qualname":"::string::StrategyFromRegex::Strategy","value":"type Strategy: Strategy<Value = Self>;","parent":{"krate":0,"index":3087},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3089},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":597591,"byte_end":597601,"line_start":121,"line_end":121,"column_start":8,"column_end":18},"name":"from_regex","qualname":"::string::StrategyFromRegex::from_regex","value":"pub fn from_regex(&str) -> Self::Strategy","parent":{"krate":0,"index":3087},"children":[],"decl_id":null,"docs":" Produce a strategy for `Self` from the `regex`.\n","sig":null,"attributes":[{"value":"/ Produce a strategy for `Self` from the `regex`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":597532,"byte_end":597583,"line_start":120,"line_end":120,"column_start":5,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":3096},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":598262,"byte_end":598274,"line_start":145,"line_end":145,"column_start":8,"column_end":20},"name":"string_regex","qualname":"::string::string_regex","value":"pub fn string_regex(&str) -> ParseResult<String>","parent":null,"children":[],"decl_id":null,"docs":" Creates a strategy which generates strings matching the given regular\n expression.","sig":null,"attributes":[{"value":"/ Creates a strategy which generates strings matching the given regular","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":598005,"byte_end":598078,"line_start":140,"line_end":140,"column_start":1,"column_end":74}},{"value":"/ expression.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":598079,"byte_end":598094,"line_start":141,"line_end":141,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":598095,"byte_end":598098,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ If you don't need error handling and aren't limited by setup time, it is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":598099,"byte_end":598175,"line_start":143,"line_end":143,"column_start":1,"column_end":77}},{"value":"/ also possible to directly use a `&str` as a strategy with the same effect.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":598176,"byte_end":598254,"line_start":144,"line_end":144,"column_start":1,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":3097},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":598443,"byte_end":598462,"line_start":150,"line_end":150,"column_start":8,"column_end":27},"name":"string_regex_parsed","qualname":"::string::string_regex_parsed","value":"pub fn string_regex_parsed(&Hir) -> ParseResult<String>","parent":null,"children":[],"decl_id":null,"docs":" Like `string_regex()`, but allows providing a pre-parsed expression.\n","sig":null,"attributes":[{"value":"/ Like `string_regex()`, but allows providing a pre-parsed expression.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":598363,"byte_end":598435,"line_start":149,"line_end":149,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":3100},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":598838,"byte_end":598849,"line_start":163,"line_end":163,"column_start":8,"column_end":19},"name":"bytes_regex","qualname":"::string::bytes_regex","value":"pub fn bytes_regex(&str) -> ParseResult<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a strategy which generates byte strings matching the given regular\n expression.\n","sig":null,"attributes":[{"value":"/ Creates a strategy which generates byte strings matching the given regular","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":598736,"byte_end":598814,"line_start":161,"line_end":161,"column_start":1,"column_end":79}},{"value":"/ expression.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":598815,"byte_end":598830,"line_start":162,"line_end":162,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":3101},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":599017,"byte_end":599035,"line_start":168,"line_end":168,"column_start":8,"column_end":26},"name":"bytes_regex_parsed","qualname":"::string::bytes_regex_parsed","value":"pub fn bytes_regex_parsed(&Hir) -> ParseResult<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Like `bytes_regex()`, but allows providing a pre-parsed expression.\n","sig":null,"attributes":[{"value":"/ Like `bytes_regex()`, but allows providing a pre-parsed expression.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":598938,"byte_end":599009,"line_start":167,"line_end":167,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":3133},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","parent":null,"children":[{"krate":0,"index":3134},{"krate":0,"index":3135},{"krate":0,"index":3138},{"krate":0,"index":3141},{"krate":0,"index":3144},{"krate":0,"index":3145},{"krate":0,"index":3148},{"krate":0,"index":3149},{"krate":0,"index":3151},{"krate":0,"index":3154},{"krate":0,"index":3157},{"krate":0,"index":3160},{"krate":0,"index":3163},{"krate":0,"index":3164},{"krate":0,"index":3167},{"krate":0,"index":3170},{"krate":0,"index":3173},{"krate":0,"index":3176},{"krate":0,"index":3179},{"krate":0,"index":3182},{"krate":0,"index":3185},{"krate":0,"index":3186},{"krate":0,"index":3189},{"krate":0,"index":3192}],"decl_id":null,"docs":" Re-exports the most commonly-needed APIs of proptest.","sig":null,"attributes":[{"value":"/ Re-exports the most commonly-needed APIs of proptest.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":610458,"byte_end":610515,"line_start":10,"line_end":10,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":610516,"byte_end":610519,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This module is intended to be wildcard-imported, i.e.,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":610520,"byte_end":610578,"line_start":12,"line_end":12,"column_start":1,"column_end":59}},{"value":"/ `use proptest::prelude::*;`. Note that it re-exports the whole crate itself","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":610579,"byte_end":610658,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ under the name `prop`, so you don't need a separate `use proptest;` line.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":610659,"byte_end":610736,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":610737,"byte_end":610740,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ In addition to Proptest's own APIs, this also reexports a small portion of","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":610741,"byte_end":610819,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ the `rand` crate sufficient to easily use `prop_perturb` and other","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":610820,"byte_end":610890,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"/ functionality that exposes random number generators. Please note that this","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":610891,"byte_end":610969,"line_start":18,"line_end":18,"column_start":1,"column_end":79}},{"value":"/ is will always be a direct reexport; using these in preference to using the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":610970,"byte_end":611049,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ `rand` crate directly will not provide insulation from the upcoming","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611050,"byte_end":611121,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ revision to the `rand` crate.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611122,"byte_end":611155,"line_start":21,"line_end":21,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":3192},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611761,"byte_end":611765,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"name":"prop","qualname":"::prelude::prop","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","parent":null,"children":[{"krate":0,"index":3193},{"krate":0,"index":3196},{"krate":0,"index":3199},{"krate":0,"index":3202},{"krate":0,"index":3205},{"krate":0,"index":3208},{"krate":0,"index":3211},{"krate":0,"index":3214},{"krate":0,"index":3217},{"krate":0,"index":3220},{"krate":0,"index":3223},{"krate":0,"index":3226},{"krate":0,"index":3229},{"krate":0,"index":3232}],"decl_id":null,"docs":" Re-exports the entire public API of proptest so that an import of `prelude`\n allows simply writing, for example, `prop::num::i32::ANY` rather than\n `proptest::num::i32::ANY` plus a separate `use proptest;`.\n","sig":null,"attributes":[{"value":"/ Re-exports the entire public API of proptest so that an import of `prelude`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611536,"byte_end":611615,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ allows simply writing, for example, `prop::num::i32::ANY` rather than","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611616,"byte_end":611689,"line_start":35,"line_end":35,"column_start":1,"column_end":74}},{"value":"/ `proptest::num::i32::ANY` plus a separate `use proptest;`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/prelude.rs","byte_start":611690,"byte_end":611752,"line_start":36,"line_end":36,"column_start":1,"column_end":63}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sugar.rs","byte_start":46731,"byte_end":46745,"line_start":1058,"line_end":1058,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/sample.rs","byte_start":92884,"byte_end":92889,"line_start":13,"line_end":13,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/sample.rs","byte_start":93060,"byte_end":93068,"line_start":23,"line_end":23,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_core/iter.rs","byte_start":100491,"byte_end":100497,"line_start":38,"line_end":38,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":284},{"krate":0,"index":285}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_core/iter.rs","byte_start":101286,"byte_end":101289,"line_start":68,"line_end":68,"column_start":36,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_core/iter.rs","byte_start":102266,"byte_end":102271,"line_start":107,"line_end":107,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_core/result.rs","byte_start":111372,"byte_end":111378,"line_start":58,"line_end":58,"column_start":63,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_core/result.rs","byte_start":111842,"byte_end":111848,"line_start":74,"line_end":74,"column_start":67,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_alloc/collections.rs","byte_start":122686,"byte_end":122693,"line_start":149,"line_end":149,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":515},{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_alloc/collections.rs","byte_start":123146,"byte_end":123154,"line_start":168,"line_end":168,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_alloc/collections.rs","byte_start":124238,"byte_end":124246,"line_start":206,"line_end":206,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":529},{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_alloc/collections.rs","byte_start":124906,"byte_end":124914,"line_start":228,"line_end":228,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_std/string.rs","byte_start":153655,"byte_end":153661,"line_start":29,"line_end":29,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173987,"byte_end":174007,"line_start":58,"line_end":58,"column_start":12,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":185171,"byte_end":185177,"line_start":98,"line_end":98,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873},{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":185616,"byte_end":185619,"line_start":124,"line_end":124,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":186649,"byte_end":186663,"line_start":172,"line_end":172,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":885},{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":187391,"byte_end":187405,"line_start":197,"line_end":197,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188515,"byte_end":188536,"line_start":235,"line_end":235,"column_start":21,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":895}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":189677,"byte_end":189698,"line_start":269,"line_end":269,"column_start":34,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":190687,"byte_end":190702,"line_start":306,"line_end":306,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":194814,"byte_end":194823,"line_start":448,"line_end":448,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":918},{"krate":0,"index":919}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":195321,"byte_end":195330,"line_start":464,"line_end":464,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":928}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":195938,"byte_end":195947,"line_start":490,"line_end":490,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":930}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":201756,"byte_end":201759,"line_start":26,"line_end":26,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":948}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":202341,"byte_end":202349,"line_start":48,"line_end":48,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":202807,"byte_end":202820,"line_start":71,"line_end":71,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":955}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":202985,"byte_end":202998,"line_start":80,"line_end":80,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":211425,"byte_end":211437,"line_start":179,"line_end":179,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":988},{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":213525,"byte_end":213537,"line_start":248,"line_end":248,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":214523,"byte_end":214536,"line_start":282,"line_end":282,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":214790,"byte_end":214803,"line_start":292,"line_end":292,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":219686,"byte_end":219695,"line_start":49,"line_end":49,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1079}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":219835,"byte_end":219844,"line_start":56,"line_end":56,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1084},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1092},{"krate":0,"index":1093}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":221884,"byte_end":221893,"line_start":122,"line_end":122,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1095}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":222079,"byte_end":222088,"line_start":129,"line_end":129,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1097}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":222265,"byte_end":222274,"line_start":136,"line_end":136,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1099}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":222462,"byte_end":222471,"line_start":143,"line_end":143,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1101}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":222653,"byte_end":222662,"line_start":150,"line_end":150,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1103}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":222885,"byte_end":222894,"line_start":157,"line_end":157,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1105}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":223451,"byte_end":223460,"line_start":181,"line_end":181,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1107},{"krate":0,"index":1108}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":228024,"byte_end":228031,"line_start":323,"line_end":323,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1123}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":229742,"byte_end":229749,"line_start":374,"line_end":374,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1129}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":231463,"byte_end":231470,"line_start":426,"line_end":426,"column_start":60,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1136}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":233369,"byte_end":233376,"line_start":484,"line_end":484,"column_start":55,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1144}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":235374,"byte_end":235385,"line_start":548,"line_end":548,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":236086,"byte_end":236089,"line_start":570,"line_end":570,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1158}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":236668,"byte_end":236680,"line_start":591,"line_end":591,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1166},{"krate":0,"index":1167}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":254100,"byte_end":254110,"line_start":366,"line_end":366,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1198}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter.rs","byte_start":292357,"byte_end":292363,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1239}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter.rs","byte_start":292583,"byte_end":292589,"line_start":35,"line_end":35,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1243}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter.rs","byte_start":292876,"byte_end":292882,"line_start":45,"line_end":45,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1247}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter.rs","byte_start":293132,"byte_end":293138,"line_start":55,"line_end":55,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter.rs","byte_start":293734,"byte_end":293740,"line_start":75,"line_end":75,"column_start":46,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1257}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter.rs","byte_start":294128,"byte_end":294134,"line_start":88,"line_end":88,"column_start":60,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1261},{"krate":0,"index":1262},{"krate":0,"index":1263},{"krate":0,"index":1264}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":296285,"byte_end":296294,"line_start":25,"line_end":25,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1287}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":296514,"byte_end":296523,"line_start":35,"line_end":35,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1291}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":296813,"byte_end":296822,"line_start":45,"line_end":45,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1295}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":297097,"byte_end":297106,"line_start":56,"line_end":56,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1300},{"krate":0,"index":1301},{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":297801,"byte_end":297819,"line_start":81,"line_end":81,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1314}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":297983,"byte_end":298001,"line_start":88,"line_end":88,"column_start":42,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1319}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":298332,"byte_end":298350,"line_start":99,"line_end":99,"column_start":5,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":299268,"byte_end":299286,"line_start":131,"line_end":131,"column_start":9,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":302044,"byte_end":302051,"line_start":26,"line_end":26,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1353}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":302197,"byte_end":302204,"line_start":33,"line_end":33,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1358}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":303607,"byte_end":303623,"line_start":70,"line_end":70,"column_start":30,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1368}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":304091,"byte_end":304107,"line_start":87,"line_end":87,"column_start":35,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1371}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":304641,"byte_end":304657,"line_start":106,"line_end":106,"column_start":20,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1374}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":305104,"byte_end":305120,"line_start":122,"line_end":122,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1377},{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":307942,"byte_end":307952,"line_start":205,"line_end":205,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1385}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":308556,"byte_end":308569,"line_start":227,"line_end":227,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1394}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":308820,"byte_end":308833,"line_start":236,"line_end":236,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1398}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":309066,"byte_end":309079,"line_start":246,"line_end":246,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":314321,"byte_end":314325,"line_start":48,"line_end":48,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1411}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":314555,"byte_end":314559,"line_start":59,"line_end":59,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":314770,"byte_end":314774,"line_start":68,"line_end":68,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1423}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":316224,"byte_end":316228,"line_start":111,"line_end":111,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1426},{"krate":0,"index":1427},{"krate":0,"index":1428},{"krate":0,"index":1429}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":320197,"byte_end":320201,"line_start":39,"line_end":39,"column_start":42,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1452}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":320388,"byte_end":320392,"line_start":48,"line_end":48,"column_start":43,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1455},{"krate":0,"index":7763},{"krate":0,"index":7764},{"krate":0,"index":1456}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321452,"byte_end":321460,"line_start":79,"line_end":79,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1466}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321766,"byte_end":321774,"line_start":89,"line_end":89,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1470},{"krate":0,"index":1471},{"krate":0,"index":1472}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321970,"byte_end":321978,"line_start":98,"line_end":98,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1476},{"krate":0,"index":7765},{"krate":0,"index":7766},{"krate":0,"index":1477}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":322136,"byte_end":322144,"line_start":106,"line_end":106,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":322195,"byte_end":322203,"line_start":108,"line_end":108,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1484}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":322358,"byte_end":322366,"line_start":116,"line_end":116,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1488}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/lazy.rs","byte_start":324099,"byte_end":324112,"line_start":34,"line_end":34,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1526},{"krate":0,"index":1527},{"krate":0,"index":1528},{"krate":0,"index":1529},{"krate":0,"index":1530},{"krate":0,"index":1531},{"krate":0,"index":1532}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/lazy.rs","byte_start":327064,"byte_end":327077,"line_start":119,"line_end":119,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1535}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/lazy.rs","byte_start":327245,"byte_end":327258,"line_start":130,"line_end":130,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1538}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/lazy.rs","byte_start":327494,"byte_end":327512,"line_start":141,"line_end":141,"column_start":29,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1541}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/lazy.rs","byte_start":327936,"byte_end":327954,"line_start":159,"line_end":159,"column_start":34,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1545}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":329379,"byte_end":329382,"line_start":30,"line_end":30,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1566}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":329623,"byte_end":329626,"line_start":39,"line_end":39,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1570}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":329847,"byte_end":329850,"line_start":48,"line_end":48,"column_start":69,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":1575},{"krate":0,"index":1576},{"krate":0,"index":1577}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":330188,"byte_end":330191,"line_start":61,"line_end":61,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1583},{"krate":0,"index":1584},{"krate":0,"index":1585},{"krate":0,"index":1586}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":330965,"byte_end":330972,"line_start":94,"line_end":94,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1595}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":331247,"byte_end":331254,"line_start":105,"line_end":105,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1599}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":331458,"byte_end":331465,"line_start":113,"line_end":113,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1603}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":331598,"byte_end":331605,"line_start":119,"line_end":119,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1607},{"krate":0,"index":1608},{"krate":0,"index":1609}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":331880,"byte_end":331887,"line_start":131,"line_end":131,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1613},{"krate":0,"index":1614},{"krate":0,"index":1615},{"krate":0,"index":1616}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":332598,"byte_end":332605,"line_start":163,"line_end":163,"column_start":39,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1625}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":332850,"byte_end":332857,"line_start":172,"line_end":172,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1629}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":333095,"byte_end":333102,"line_start":182,"line_end":182,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1634},{"krate":0,"index":1635},{"krate":0,"index":1636}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":333653,"byte_end":333669,"line_start":207,"line_end":207,"column_start":39,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1647}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":333960,"byte_end":333976,"line_start":217,"line_end":217,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1651}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":334260,"byte_end":334276,"line_start":228,"line_end":228,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1656},{"krate":0,"index":1657},{"krate":0,"index":1658},{"krate":0,"index":1659}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/recursive.rs","byte_start":336815,"byte_end":336824,"line_start":26,"line_end":26,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1690}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/recursive.rs","byte_start":337231,"byte_end":337240,"line_start":38,"line_end":38,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1694}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/recursive.rs","byte_start":337665,"byte_end":337674,"line_start":54,"line_end":54,"column_start":7,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1699}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/recursive.rs","byte_start":338197,"byte_end":338206,"line_start":77,"line_end":77,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1705},{"krate":0,"index":1706},{"krate":0,"index":1707}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":345647,"byte_end":345654,"line_start":90,"line_end":90,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1733},{"krate":0,"index":1734},{"krate":0,"index":1735}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":346781,"byte_end":346797,"line_start":128,"line_end":128,"column_start":20,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1739},{"krate":0,"index":1740}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":347235,"byte_end":347251,"line_start":147,"line_end":147,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1743},{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1746}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":377194,"byte_end":377202,"line_start":635,"line_end":635,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1813}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":377426,"byte_end":377434,"line_start":644,"line_end":644,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":1818},{"krate":0,"index":1819}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":378358,"byte_end":378361,"line_start":681,"line_end":681,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1823},{"krate":0,"index":1824},{"krate":0,"index":1825},{"krate":0,"index":1826}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":379440,"byte_end":379453,"line_start":716,"line_end":716,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1831}],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":379559,"byte_end":379573,"line_start":722,"line_end":722,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1834}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":379695,"byte_end":379708,"line_start":728,"line_end":728,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1837},{"krate":0,"index":1838},{"krate":0,"index":1839},{"krate":0,"index":1840}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":380068,"byte_end":380082,"line_start":746,"line_end":746,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1843},{"krate":0,"index":1844},{"krate":0,"index":1845},{"krate":0,"index":1846},{"krate":0,"index":1847}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":380641,"byte_end":380661,"line_start":773,"line_end":773,"column_start":32,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1850},{"krate":0,"index":1851},{"krate":0,"index":1852}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":381875,"byte_end":381901,"line_start":809,"line_end":809,"column_start":18,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1854}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":391756,"byte_end":391761,"line_start":40,"line_end":40,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1894},{"krate":0,"index":1897},{"krate":0,"index":1902},{"krate":0,"index":1904}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":394292,"byte_end":394297,"line_start":120,"line_end":120,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1911},{"krate":0,"index":1912},{"krate":0,"index":1913}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":398623,"byte_end":398637,"line_start":258,"line_end":258,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":8048},{"krate":0,"index":8049},{"krate":0,"index":8050},{"krate":0,"index":8051}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":398729,"byte_end":398743,"line_start":262,"line_end":262,"column_start":29,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1928}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":399020,"byte_end":399034,"line_start":276,"line_end":276,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1931}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401382,"byte_end":401392,"line_start":342,"line_end":342,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1935}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":415255,"byte_end":415261,"line_start":51,"line_end":51,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1964}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":415733,"byte_end":415739,"line_start":65,"line_end":65,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1968}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":416060,"byte_end":416066,"line_start":75,"line_end":75,"column_start":63,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1972},{"krate":0,"index":1973},{"krate":0,"index":1974}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":416654,"byte_end":416660,"line_start":95,"line_end":95,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1978}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":417049,"byte_end":417055,"line_start":108,"line_end":108,"column_start":57,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1985}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":418060,"byte_end":418063,"line_start":155,"line_end":155,"column_start":12,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1993}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":418264,"byte_end":418267,"line_start":162,"line_end":162,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1997}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":418539,"byte_end":418542,"line_start":171,"line_end":171,"column_start":60,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2001},{"krate":0,"index":2002},{"krate":0,"index":2003}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":418862,"byte_end":418865,"line_start":183,"line_end":183,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2010},{"krate":0,"index":2011}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434651,"byte_end":434657,"line_start":356,"line_end":356,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2073},{"krate":0,"index":2074},{"krate":0,"index":2075},{"krate":0,"index":2076},{"krate":0,"index":2077},{"krate":0,"index":2078},{"krate":0,"index":2079},{"krate":0,"index":2080}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":438294,"byte_end":438300,"line_start":479,"line_end":479,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2082}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439779,"byte_end":439792,"line_start":39,"line_end":39,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2095},{"krate":0,"index":2097}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":440547,"byte_end":440560,"line_start":59,"line_end":59,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2100}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":440930,"byte_end":440943,"line_start":71,"line_end":71,"column_start":42,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":2103}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":441528,"byte_end":441537,"line_start":89,"line_end":89,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2106}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":442008,"byte_end":442017,"line_start":104,"line_end":104,"column_start":45,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":2109}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":450385,"byte_end":450407,"line_start":78,"line_end":78,"column_start":18,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2195}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":450521,"byte_end":450543,"line_start":84,"line_end":84,"column_start":29,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2197},{"krate":0,"index":2203},{"krate":0,"index":2204},{"krate":0,"index":2205},{"krate":0,"index":2207}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":458393,"byte_end":458415,"line_start":328,"line_end":328,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2218}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/map.rs","byte_start":466813,"byte_end":466834,"line_start":26,"line_end":26,"column_start":29,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2246},{"krate":0,"index":2249},{"krate":0,"index":2250},{"krate":0,"index":2251},{"krate":0,"index":2253}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/noop.rs","byte_start":469565,"byte_end":469587,"line_start":21,"line_end":21,"column_start":29,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2276},{"krate":0,"index":2277},{"krate":0,"index":2278},{"krate":0,"index":2279},{"krate":0,"index":2281}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":443164,"byte_end":443177,"line_start":35,"line_end":35,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2289}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":443314,"byte_end":443327,"line_start":41,"line_end":41,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2291},{"krate":0,"index":2292}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":446691,"byte_end":446694,"line_start":139,"line_end":139,"column_start":16,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2309}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":471814,"byte_end":471820,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2325}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":472086,"byte_end":472092,"line_start":32,"line_end":32,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2327}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":472190,"byte_end":472196,"line_start":38,"line_end":38,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2329}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":472290,"byte_end":472296,"line_start":44,"line_end":44,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2331}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":472404,"byte_end":472410,"line_start":50,"line_end":50,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2333}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/replay.rs","byte_start":474700,"byte_end":474706,"line_start":51,"line_end":51,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2375}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/replay.rs","byte_start":476264,"byte_end":476270,"line_start":108,"line_end":108,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2386},{"krate":0,"index":2388},{"krate":0,"index":2390}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":480075,"byte_end":480089,"line_start":28,"line_end":28,"column_start":10,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2407},{"krate":0,"index":2408}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":481363,"byte_end":481379,"line_start":64,"line_end":64,"column_start":22,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2414},{"krate":0,"index":2434},{"krate":0,"index":2435}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":481623,"byte_end":481633,"line_start":71,"line_end":71,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2432},{"krate":0,"index":2433}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":482534,"byte_end":482549,"line_start":105,"line_end":105,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2440},{"krate":0,"index":2441},{"krate":0,"index":2442}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":485749,"byte_end":485761,"line_start":67,"line_end":67,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2498}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":485834,"byte_end":485846,"line_start":73,"line_end":73,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2500},{"krate":0,"index":2501}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":486622,"byte_end":486634,"line_start":97,"line_end":97,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2503},{"krate":0,"index":2504}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":486789,"byte_end":486801,"line_start":103,"line_end":103,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2506}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":487304,"byte_end":487311,"line_start":130,"line_end":130,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2508},{"krate":0,"index":2510},{"krate":0,"index":2512},{"krate":0,"index":2513}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":490583,"byte_end":490587,"line_start":241,"line_end":241,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":2515},{"krate":0,"index":2519},{"krate":0,"index":2526}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":495730,"byte_end":495737,"line_start":398,"line_end":398,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":2531},{"krate":0,"index":2532},{"krate":0,"index":2533},{"krate":0,"index":2534},{"krate":0,"index":2536},{"krate":0,"index":2538},{"krate":0,"index":2539},{"krate":0,"index":2540},{"krate":0,"index":2541},{"krate":0,"index":2542},{"krate":0,"index":2544}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":509742,"byte_end":509752,"line_start":81,"line_end":81,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2622}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":510353,"byte_end":510363,"line_start":96,"line_end":96,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2624}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":511015,"byte_end":511025,"line_start":117,"line_end":117,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2626}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":511224,"byte_end":511234,"line_start":130,"line_end":130,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2628},{"krate":0,"index":2629},{"krate":0,"index":2630},{"krate":0,"index":2631},{"krate":0,"index":2632}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":515629,"byte_end":515639,"line_start":293,"line_end":293,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2643},{"krate":0,"index":2644},{"krate":0,"index":2645},{"krate":0,"index":2646},{"krate":0,"index":2647},{"krate":0,"index":2648},{"krate":0,"index":2649},{"krate":0,"index":2650},{"krate":0,"index":2651},{"krate":0,"index":2654},{"krate":0,"index":2665},{"krate":0,"index":2668},{"krate":0,"index":2673},{"krate":0,"index":2677},{"krate":0,"index":2680},{"krate":0,"index":2684},{"krate":0,"index":2693},{"krate":0,"index":2695},{"krate":0,"index":2697},{"krate":0,"index":2699},{"krate":0,"index":2700}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/tuple.rs","byte_start":555142,"byte_end":555156,"line_start":26,"line_end":26,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2729}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":560260,"byte_end":560271,"line_start":36,"line_end":36,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2746}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":560402,"byte_end":560413,"line_start":43,"line_end":43,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2748}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":560641,"byte_end":560652,"line_start":54,"line_end":54,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2750},{"krate":0,"index":2751},{"krate":0,"index":2753}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":562768,"byte_end":562780,"line_start":128,"line_end":128,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2763}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":562855,"byte_end":562867,"line_start":133,"line_end":133,"column_start":18,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":562897,"byte_end":562909,"line_start":134,"line_end":134,"column_start":24,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2768}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":563049,"byte_end":563061,"line_start":139,"line_end":139,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2771},{"krate":0,"index":2772},{"krate":0,"index":2773}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":563240,"byte_end":563252,"line_start":147,"line_end":147,"column_start":35,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2776},{"krate":0,"index":2777},{"krate":0,"index":2778},{"krate":0,"index":2779}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":564392,"byte_end":564406,"line_start":183,"line_end":183,"column_start":47,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":2782}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":564558,"byte_end":564573,"line_start":189,"line_end":189,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2785}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":564717,"byte_end":564732,"line_start":198,"line_end":198,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2788}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":568579,"byte_end":568585,"line_start":42,"line_end":42,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2822}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":568666,"byte_end":568672,"line_start":47,"line_end":47,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":568708,"byte_end":568714,"line_start":48,"line_end":48,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2829}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":568875,"byte_end":568881,"line_start":53,"line_end":53,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":2833},{"krate":0,"index":2834}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":569063,"byte_end":569070,"line_start":60,"line_end":60,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2844}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":569151,"byte_end":569158,"line_start":65,"line_end":65,"column_start":21,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":569194,"byte_end":569201,"line_start":66,"line_end":66,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2851}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":569363,"byte_end":569370,"line_start":71,"line_end":71,"column_start":58,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":2855},{"krate":0,"index":2856}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":571255,"byte_end":571262,"line_start":121,"line_end":121,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2866}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":571457,"byte_end":571465,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2870}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":571627,"byte_end":571643,"line_start":135,"line_end":135,"column_start":42,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2874}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":571824,"byte_end":571840,"line_start":145,"line_end":145,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2878}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":572066,"byte_end":572083,"line_start":155,"line_end":155,"column_start":42,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2882}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":572265,"byte_end":572282,"line_start":165,"line_end":165,"column_start":47,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":2886}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":579708,"byte_end":579719,"line_start":81,"line_end":81,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":2958},{"krate":0,"index":2959},{"krate":0,"index":2960}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":580263,"byte_end":580283,"line_start":100,"line_end":100,"column_start":53,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":2963},{"krate":0,"index":2964},{"krate":0,"index":2966},{"krate":0,"index":2967}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":580798,"byte_end":580809,"line_start":121,"line_end":121,"column_start":65,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":2970},{"krate":0,"index":2971}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584169,"byte_end":584174,"line_start":215,"line_end":215,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2976},{"krate":0,"index":2977},{"krate":0,"index":2980}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":585861,"byte_end":585874,"line_start":269,"line_end":269,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2984}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":587486,"byte_end":587502,"line_start":331,"line_end":331,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2986}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":587614,"byte_end":587630,"line_start":337,"line_end":337,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2988},{"krate":0,"index":2989},{"krate":0,"index":2990}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":587943,"byte_end":587960,"line_start":349,"line_end":349,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2992},{"krate":0,"index":2993},{"krate":0,"index":2994},{"krate":0,"index":2995}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":588369,"byte_end":588377,"line_start":368,"line_end":368,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2997},{"krate":0,"index":2999}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":595171,"byte_end":595182,"line_start":45,"line_end":45,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3073}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":595273,"byte_end":595284,"line_start":51,"line_end":51,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3075}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":597664,"byte_end":597670,"line_start":124,"line_end":124,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":3091},{"krate":0,"index":3092}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":597848,"byte_end":597851,"line_start":132,"line_end":132,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3094},{"krate":0,"index":3095}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":602468,"byte_end":602478,"line_start":281,"line_end":281,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3125},{"krate":0,"index":3126}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":1320,"byte_end":1330,"line_start":44,"line_end":44,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":2056,"byte_end":2061,"line_start":89,"line_end":89,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":28}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":2072,"byte_end":2081,"line_start":91,"line_end":91,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":45}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/mod.rs","byte_start":64952,"byte_end":64959,"line_start":27,"line_end":27,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":83}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":2091,"byte_end":2096,"line_start":92,"line_end":92,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":814}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":2106,"byte_end":2110,"line_start":93,"line_end":93,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":825}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":2120,"byte_end":2124,"line_start":94,"line_end":94,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":938}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":2134,"byte_end":2138,"line_start":95,"line_end":95,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":961}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":2148,"byte_end":2158,"line_start":96,"line_end":96,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1006}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":2168,"byte_end":2171,"line_start":97,"line_end":97,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1168}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":2181,"byte_end":2189,"line_start":98,"line_end":98,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1219}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/mod.rs","byte_start":291651,"byte_end":291658,"line_start":37,"line_end":37,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1952}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":2199,"byte_end":2210,"line_start":99,"line_end":99,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":2020}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":2220,"byte_end":2225,"line_start":100,"line_end":100,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2724}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":2236,"byte_end":2242,"line_start":102,"line_end":102,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2731}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":2252,"byte_end":2258,"line_start":103,"line_end":103,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2794}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":2268,"byte_end":2274,"line_start":104,"line_end":104,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2901}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":2308,"byte_end":2314,"line_start":106,"line_end":106,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3001}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/lib.rs","byte_start":2325,"byte_end":2332,"line_start":108,"line_end":108,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":3133}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sugar.rs","byte_start":46731,"byte_end":46745,"line_start":1058,"line_end":1058,"column_start":36,"column_end":50},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":3304},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68055,"byte_end":68060,"line_start":45,"line_end":45,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":2854},"to":{"krate":0,"index":63}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/traits.rs","byte_start":68068,"byte_end":68073,"line_start":45,"line_end":45,"column_start":35,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":8891},"to":{"krate":0,"index":63}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":78622,"byte_end":78627,"line_start":41,"line_end":41,"column_start":44,"column_end":49},"kind":"SuperTrait","from":{"krate":1,"index":8891},"to":{"krate":0,"index":94}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":78630,"byte_end":78635,"line_start":41,"line_end":41,"column_start":52,"column_end":57},"kind":"SuperTrait","from":{"krate":1,"index":2854},"to":{"krate":0,"index":94}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82497,"byte_end":82502,"line_start":131,"line_end":131,"column_start":10,"column_end":15},"kind":"SuperTrait","from":{"krate":1,"index":8891},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/functor.rs","byte_start":82505,"byte_end":82510,"line_start":131,"line_end":131,"column_start":18,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":2854},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/sample.rs","byte_start":92884,"byte_end":92889,"line_start":13,"line_end":13,"column_start":20,"column_end":25},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":9204},"to":{"krate":0,"index":63}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/sample.rs","byte_start":93060,"byte_end":93068,"line_start":23,"line_end":23,"column_start":20,"column_end":28},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":9245},"to":{"krate":0,"index":63}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_core/iter.rs","byte_start":100491,"byte_end":100497,"line_start":38,"line_end":38,"column_start":35,"column_end":41},"kind":{"Impl":{"id":12}},"from":{"krate":1,"index":39229},"to":{"krate":0,"index":94}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_core/iter.rs","byte_start":101286,"byte_end":101289,"line_start":68,"line_end":68,"column_start":36,"column_end":39},"kind":{"Impl":{"id":16}},"from":{"krate":1,"index":39428},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_core/iter.rs","byte_start":102266,"byte_end":102271,"line_start":107,"line_end":107,"column_start":38,"column_end":43},"kind":{"Impl":{"id":19}},"from":{"krate":1,"index":39216},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_core/result.rs","byte_start":111372,"byte_end":111378,"line_start":58,"line_end":58,"column_start":63,"column_end":69},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":40235},"to":{"krate":0,"index":94}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_core/result.rs","byte_start":111842,"byte_end":111848,"line_start":74,"line_end":74,"column_start":67,"column_end":73},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":40235},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_alloc/collections.rs","byte_start":122686,"byte_end":122693,"line_start":149,"line_end":149,"column_start":9,"column_end":16},"kind":{"Impl":{"id":53}},"from":{"krate":4,"index":1092},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_alloc/collections.rs","byte_start":123146,"byte_end":123154,"line_start":168,"line_end":168,"column_start":46,"column_end":54},"kind":{"Impl":{"id":54}},"from":{"krate":4,"index":1211},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_alloc/collections.rs","byte_start":124238,"byte_end":124246,"line_start":206,"line_end":206,"column_start":9,"column_end":17},"kind":{"Impl":{"id":57}},"from":{"krate":5,"index":1220},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_alloc/collections.rs","byte_start":124906,"byte_end":124914,"line_start":228,"line_end":228,"column_start":47,"column_end":55},"kind":{"Impl":{"id":59}},"from":{"krate":5,"index":1254},"to":{"krate":0,"index":101}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/arbitrary/_std/string.rs","byte_start":153655,"byte_end":153661,"line_start":29,"line_end":29,"column_start":20,"column_end":26},"kind":{"Impl":{"id":107}},"from":{"krate":5,"index":7293},"to":{"krate":0,"index":63}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/array.rs","byte_start":173987,"byte_end":174007,"line_start":58,"line_end":58,"column_start":12,"column_end":32},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":5085},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183377,"byte_end":183382,"line_start":34,"line_end":34,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2470},"to":{"krate":0,"index":860}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":183390,"byte_end":183395,"line_start":34,"line_end":34,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":8891},"to":{"krate":0,"index":860}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":185171,"byte_end":185177,"line_start":98,"line_end":98,"column_start":21,"column_end":27},"kind":{"Impl":{"id":135}},"from":{"krate":20,"index":58},"to":{"krate":0,"index":860}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":185616,"byte_end":185619,"line_start":124,"line_end":124,"column_start":21,"column_end":24},"kind":{"Impl":{"id":136}},"from":{"krate":5,"index":6780},"to":{"krate":0,"index":860}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":186649,"byte_end":186663,"line_start":172,"line_end":172,"column_start":21,"column_end":35},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":6080},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":187391,"byte_end":187405,"line_start":197,"line_end":197,"column_start":34,"column_end":48},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":6080},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":188515,"byte_end":188536,"line_start":235,"line_end":235,"column_start":21,"column_end":42},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":6093},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":189677,"byte_end":189698,"line_start":269,"line_end":269,"column_start":34,"column_end":55},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":6093},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":190687,"byte_end":190702,"line_start":306,"line_end":306,"column_start":35,"column_end":50},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":6104},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":194814,"byte_end":194823,"line_start":448,"line_end":448,"column_start":10,"column_end":19},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":6210},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":195321,"byte_end":195330,"line_start":464,"line_end":464,"column_start":25,"column_end":34},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":6210},"to":{"krate":0,"index":860}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bits.rs","byte_start":195938,"byte_end":195947,"line_start":490,"line_end":490,"column_start":34,"column_end":43},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":6210},"to":{"krate":1,"index":7147}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":201756,"byte_end":201759,"line_start":26,"line_end":26,"column_start":19,"column_end":22},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":6217},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":202341,"byte_end":202349,"line_start":48,"line_end":48,"column_start":19,"column_end":27},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":6225},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":202807,"byte_end":202820,"line_start":71,"line_end":71,"column_start":6,"column_end":19},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":6233},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/bool.rs","byte_start":202985,"byte_end":202998,"line_start":80,"line_end":80,"column_start":20,"column_end":33},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":6233},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":211425,"byte_end":211437,"line_start":179,"line_end":179,"column_start":10,"column_end":22},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":6256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":213525,"byte_end":213537,"line_start":248,"line_end":248,"column_start":23,"column_end":35},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":6256},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":214523,"byte_end":214536,"line_start":282,"line_end":282,"column_start":6,"column_end":19},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":6267},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/char.rs","byte_start":214790,"byte_end":214803,"line_start":292,"line_end":292,"column_start":20,"column_end":33},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":6267},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":219686,"byte_end":219695,"line_start":49,"line_end":49,"column_start":18,"column_end":27},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":6274},"to":{"krate":1,"index":2827}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":219835,"byte_end":219844,"line_start":56,"line_end":56,"column_start":6,"column_end":15},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":6274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":221884,"byte_end":221893,"line_start":122,"line_end":122,"column_start":31,"column_end":40},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":6274},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":222079,"byte_end":222088,"line_start":129,"line_end":129,"column_start":22,"column_end":31},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":6274},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":222265,"byte_end":222274,"line_start":136,"line_end":136,"column_start":31,"column_end":40},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":6274},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":222462,"byte_end":222471,"line_start":143,"line_end":143,"column_start":29,"column_end":38},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":6274},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":222653,"byte_end":222662,"line_start":150,"line_end":150,"column_start":38,"column_end":47},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":6274},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":222885,"byte_end":222894,"line_start":157,"line_end":157,"column_start":40,"column_end":49},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":6274},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":223451,"byte_end":223460,"line_start":181,"line_end":181,"column_start":21,"column_end":30},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":6274},"to":{"krate":1,"index":2916}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":228024,"byte_end":228031,"line_start":323,"line_end":323,"column_start":54,"column_end":61},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":6438},"to":{"krate":0,"index":1958}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":229742,"byte_end":229749,"line_start":374,"line_end":374,"column_start":49,"column_end":56},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":6438},"to":{"krate":0,"index":1958}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":231463,"byte_end":231470,"line_start":426,"line_end":426,"column_start":60,"column_end":67},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":6438},"to":{"krate":0,"index":1958}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":233369,"byte_end":233376,"line_start":484,"line_end":484,"column_start":55,"column_end":62},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":6438},"to":{"krate":0,"index":1958}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":235374,"byte_end":235385,"line_start":548,"line_end":548,"column_start":32,"column_end":43},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":6291},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":236086,"byte_end":236089,"line_start":570,"line_end":570,"column_start":32,"column_end":35},"kind":{"Impl":{"id":167}},"from":{"krate":5,"index":6780},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/collection.rs","byte_start":236668,"byte_end":236680,"line_start":591,"line_end":591,"column_start":34,"column_end":46},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":6633},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/num.rs","byte_start":254100,"byte_end":254110,"line_start":366,"line_end":366,"column_start":6,"column_end":16},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":7408},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter.rs","byte_start":292357,"byte_end":292363,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1230},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter.rs","byte_start":292583,"byte_end":292589,"line_start":35,"line_end":35,"column_start":39,"column_end":45},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1230},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter.rs","byte_start":292876,"byte_end":292882,"line_start":45,"line_end":45,"column_start":29,"column_end":35},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1230},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter.rs","byte_start":293132,"byte_end":293138,"line_start":55,"line_end":55,"column_start":58,"column_end":64},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1230},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter.rs","byte_start":293734,"byte_end":293740,"line_start":75,"line_end":75,"column_start":46,"column_end":52},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1230},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter.rs","byte_start":294128,"byte_end":294134,"line_start":88,"line_end":88,"column_start":60,"column_end":66},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1230},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":296285,"byte_end":296294,"line_start":25,"line_end":25,"column_start":12,"column_end":21},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1278},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":296514,"byte_end":296523,"line_start":35,"line_end":35,"column_start":39,"column_end":48},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1278},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":296813,"byte_end":296822,"line_start":45,"line_end":45,"column_start":29,"column_end":38},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1278},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":297097,"byte_end":297106,"line_start":56,"line_end":56,"column_start":9,"column_end":18},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1278},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":297801,"byte_end":297819,"line_start":81,"line_end":81,"column_start":9,"column_end":27},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1303},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":297983,"byte_end":298001,"line_start":88,"line_end":88,"column_start":42,"column_end":60},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1303},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":298332,"byte_end":298350,"line_start":99,"line_end":99,"column_start":5,"column_end":23},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1303},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/filter_map.rs","byte_start":299268,"byte_end":299286,"line_start":131,"line_end":131,"column_start":9,"column_end":27},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1303},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":302044,"byte_end":302051,"line_start":26,"line_end":26,"column_start":19,"column_end":26},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":7715},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":302197,"byte_end":302204,"line_start":33,"line_end":33,"column_start":32,"column_end":39},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":7715},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":303607,"byte_end":303623,"line_start":70,"line_end":70,"column_start":30,"column_end":46},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1359},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":304091,"byte_end":304107,"line_start":87,"line_end":87,"column_start":35,"column_end":51},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1359},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":304641,"byte_end":304657,"line_start":106,"line_end":106,"column_start":20,"column_end":36},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":1359},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":305104,"byte_end":305120,"line_start":122,"line_end":122,"column_start":34,"column_end":50},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":1359},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":307942,"byte_end":307952,"line_start":205,"line_end":205,"column_start":32,"column_end":42},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":7726},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":308556,"byte_end":308569,"line_start":227,"line_end":227,"column_start":39,"column_end":52},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":1386},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":308820,"byte_end":308833,"line_start":236,"line_end":236,"column_start":29,"column_end":42},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":1386},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/flatten.rs","byte_start":309066,"byte_end":309079,"line_start":246,"line_end":246,"column_start":9,"column_end":22},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":1386},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":314321,"byte_end":314325,"line_start":48,"line_end":48,"column_start":9,"column_end":13},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":7738},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":314555,"byte_end":314559,"line_start":59,"line_end":59,"column_start":32,"column_end":36},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":7738},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":314770,"byte_end":314774,"line_start":68,"line_end":68,"column_start":20,"column_end":24},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":7738},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/fuse.rs","byte_start":316224,"byte_end":316228,"line_start":111,"line_end":111,"column_start":34,"column_end":38},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":7738},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":320197,"byte_end":320201,"line_start":39,"line_end":39,"column_start":42,"column_end":46},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":7751},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":320388,"byte_end":320392,"line_start":48,"line_end":48,"column_start":43,"column_end":47},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":7751},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321452,"byte_end":321460,"line_start":79,"line_end":79,"column_start":23,"column_end":31},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":1457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321766,"byte_end":321774,"line_start":89,"line_end":89,"column_start":56,"column_end":64},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":1457},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":321970,"byte_end":321978,"line_start":98,"line_end":98,"column_start":49,"column_end":57},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":1457},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":322136,"byte_end":322144,"line_start":106,"line_end":106,"column_start":39,"column_end":47},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":1457},"to":{"krate":1,"index":2859}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":322195,"byte_end":322203,"line_start":108,"line_end":108,"column_start":41,"column_end":49},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":1457},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/just.rs","byte_start":322358,"byte_end":322366,"line_start":116,"line_end":116,"column_start":38,"column_end":46},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1457},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/lazy.rs","byte_start":324099,"byte_end":324112,"line_start":34,"line_end":34,"column_start":19,"column_end":32},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":1511},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/lazy.rs","byte_start":327064,"byte_end":327077,"line_start":119,"line_end":119,"column_start":29,"column_end":42},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":1511},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/lazy.rs","byte_start":327245,"byte_end":327258,"line_start":130,"line_end":130,"column_start":34,"column_end":47},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":1511},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/lazy.rs","byte_start":327494,"byte_end":327512,"line_start":141,"line_end":141,"column_start":29,"column_end":47},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":1514},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/lazy.rs","byte_start":327936,"byte_end":327954,"line_start":159,"line_end":159,"column_start":34,"column_end":52},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":1514},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":329379,"byte_end":329382,"line_start":30,"line_end":30,"column_start":39,"column_end":42},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":1558},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":329623,"byte_end":329626,"line_start":39,"line_end":39,"column_start":29,"column_end":32},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":1558},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":329847,"byte_end":329850,"line_start":48,"line_end":48,"column_start":69,"column_end":72},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":1558},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":330188,"byte_end":330191,"line_start":61,"line_end":61,"column_start":9,"column_end":12},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":1558},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":330965,"byte_end":330972,"line_start":94,"line_end":94,"column_start":12,"column_end":19},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":1587},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":331247,"byte_end":331254,"line_start":105,"line_end":105,"column_start":39,"column_end":46},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":1587},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":331458,"byte_end":331465,"line_start":113,"line_end":113,"column_start":29,"column_end":36},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":1587},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":331598,"byte_end":331605,"line_start":119,"line_end":119,"column_start":47,"column_end":54},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":1587},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":331880,"byte_end":331887,"line_start":131,"line_end":131,"column_start":49,"column_end":56},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":1587},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":332598,"byte_end":332605,"line_start":163,"line_end":163,"column_start":39,"column_end":46},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":1617},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":332850,"byte_end":332857,"line_start":172,"line_end":172,"column_start":29,"column_end":36},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":1617},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":333095,"byte_end":333102,"line_start":182,"line_end":182,"column_start":9,"column_end":16},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":1617},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":333653,"byte_end":333669,"line_start":207,"line_end":207,"column_start":39,"column_end":55},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":1638},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":333960,"byte_end":333976,"line_start":217,"line_end":217,"column_start":29,"column_end":45},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":1638},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/map.rs","byte_start":334260,"byte_end":334276,"line_start":228,"line_end":228,"column_start":9,"column_end":25},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":1638},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/recursive.rs","byte_start":336815,"byte_end":336824,"line_start":26,"line_end":26,"column_start":39,"column_end":48},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":1679},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/recursive.rs","byte_start":337231,"byte_end":337240,"line_start":38,"line_end":38,"column_start":22,"column_end":31},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":1679},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/recursive.rs","byte_start":337665,"byte_end":337674,"line_start":54,"line_end":54,"column_start":7,"column_end":16},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":1679},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/recursive.rs","byte_start":338197,"byte_end":338206,"line_start":77,"line_end":77,"column_start":20,"column_end":29},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":1679},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":345647,"byte_end":345654,"line_start":90,"line_end":90,"column_start":32,"column_end":39},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":7769},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":346781,"byte_end":346797,"line_start":128,"line_end":128,"column_start":20,"column_end":36},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":7956},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/shuffle.rs","byte_start":347235,"byte_end":347251,"line_start":147,"line_end":147,"column_start":34,"column_end":50},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":7956},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":352950,"byte_end":352955,"line_start":37,"line_end":37,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":8891},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":377194,"byte_end":377202,"line_start":635,"line_end":635,"column_start":32,"column_end":40},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":7968},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":377426,"byte_end":377434,"line_start":644,"line_end":644,"column_start":34,"column_end":42},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":7968},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":378358,"byte_end":378361,"line_start":681,"line_end":681,"column_start":43,"column_end":46},"kind":{"Impl":{"id":242}},"from":{"krate":5,"index":196},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":379440,"byte_end":379453,"line_start":716,"line_end":716,"column_start":19,"column_end":32},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":8007},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":379559,"byte_end":379573,"line_start":722,"line_end":722,"column_start":19,"column_end":33},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":8014},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":379695,"byte_end":379708,"line_start":728,"line_end":728,"column_start":34,"column_end":47},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":8007},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":380068,"byte_end":380082,"line_start":746,"line_end":746,"column_start":34,"column_end":48},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":8014},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":380641,"byte_end":380661,"line_start":773,"line_end":773,"column_start":32,"column_end":52},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":8021},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/traits.rs","byte_start":381875,"byte_end":381901,"line_start":809,"line_end":809,"column_start":18,"column_end":44},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":8028},"to":{"krate":1,"index":2827}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":391756,"byte_end":391761,"line_start":40,"line_end":40,"column_start":19,"column_end":24},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":8037},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":394292,"byte_end":394297,"line_start":120,"line_end":120,"column_start":32,"column_end":37},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":8037},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":398623,"byte_end":398637,"line_start":258,"line_end":258,"column_start":33,"column_end":47},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":1917},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":398729,"byte_end":398743,"line_start":262,"line_end":262,"column_start":29,"column_end":43},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":1917},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":399020,"byte_end":399034,"line_start":276,"line_end":276,"column_start":34,"column_end":48},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":1917},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/unions.rs","byte_start":401382,"byte_end":401392,"line_start":342,"line_end":342,"column_start":9,"column_end":19},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":8064},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":415255,"byte_end":415261,"line_start":51,"line_end":51,"column_start":12,"column_end":18},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":8441},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":415733,"byte_end":415739,"line_start":65,"line_end":65,"column_start":39,"column_end":45},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":8441},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":416060,"byte_end":416066,"line_start":75,"line_end":75,"column_start":63,"column_end":69},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":8441},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":416654,"byte_end":416660,"line_start":95,"line_end":95,"column_start":43,"column_end":49},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":8441},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":417049,"byte_end":417055,"line_start":108,"line_end":108,"column_start":57,"column_end":63},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":8441},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":418060,"byte_end":418063,"line_start":155,"line_end":155,"column_start":12,"column_end":15},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":8451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":418264,"byte_end":418267,"line_start":162,"line_end":162,"column_start":39,"column_end":42},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":8451},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":418539,"byte_end":418542,"line_start":171,"line_end":171,"column_start":60,"column_end":63},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":8451},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/strategy/statics.rs","byte_start":418862,"byte_end":418865,"line_start":183,"line_end":183,"column_start":54,"column_end":57},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":8451},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":434651,"byte_end":434657,"line_start":356,"line_end":356,"column_start":6,"column_end":12},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":8471},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/config.rs","byte_start":438294,"byte_end":438300,"line_start":479,"line_end":479,"column_start":18,"column_end":24},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":8471},"to":{"krate":1,"index":2827}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":439779,"byte_end":439792,"line_start":39,"line_end":39,"column_start":6,"column_end":19},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":8495},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":440547,"byte_end":440560,"line_start":59,"line_end":59,"column_start":23,"column_end":36},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":8495},"to":{"krate":1,"index":8898}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":440930,"byte_end":440943,"line_start":71,"line_end":71,"column_start":42,"column_end":55},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":8495},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":441528,"byte_end":441537,"line_start":89,"line_end":89,"column_start":38,"column_end":47},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":8506},"to":{"krate":1,"index":8898}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/errors.rs","byte_start":442008,"byte_end":442017,"line_start":104,"line_end":104,"column_start":45,"column_end":54},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":8506},"to":{"krate":4,"index":2326}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":450385,"byte_end":450407,"line_start":78,"line_end":78,"column_start":18,"column_end":40},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":8532},"to":{"krate":1,"index":2827}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":450521,"byte_end":450543,"line_start":84,"line_end":84,"column_start":29,"column_end":51},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":8532},"to":{"krate":0,"index":2293}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/file.rs","byte_start":458393,"byte_end":458415,"line_start":328,"line_end":328,"column_start":6,"column_end":28},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":8532},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/map.rs","byte_start":466813,"byte_end":466834,"line_start":26,"line_end":26,"column_start":29,"column_end":50},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":8568},"to":{"krate":0,"index":2293}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/noop.rs","byte_start":469565,"byte_end":469587,"line_start":21,"line_end":21,"column_start":29,"column_end":51},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":8580},"to":{"krate":0,"index":2293}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":443164,"byte_end":443177,"line_start":35,"line_end":35,"column_start":18,"column_end":31},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":8589},"to":{"krate":1,"index":8898}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":443314,"byte_end":443327,"line_start":41,"line_end":41,"column_start":18,"column_end":31},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":8589},"to":{"krate":1,"index":11376}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":443829,"byte_end":443833,"line_start":55,"line_end":55,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2849},"to":{"krate":0,"index":2293}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":443836,"byte_end":443840,"line_start":55,"line_end":55,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":2861},"to":{"krate":0,"index":2293}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":443848,"byte_end":443853,"line_start":55,"line_end":55,"column_start":50,"column_end":55},"kind":"SuperTrait","from":{"krate":1,"index":8891},"to":{"krate":0,"index":2293}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/failure_persistence/mod.rs","byte_start":446691,"byte_end":446694,"line_start":139,"line_end":139,"column_start":16,"column_end":19},"kind":{"Impl":{"id":278}},"from":{"krate":5,"index":196},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":471814,"byte_end":471820,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":8607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":472086,"byte_end":472092,"line_start":32,"line_end":32,"column_start":29,"column_end":35},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":8607},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":472190,"byte_end":472196,"line_start":38,"line_end":38,"column_start":23,"column_end":29},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":8607},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":472290,"byte_end":472296,"line_start":44,"line_end":44,"column_start":25,"column_end":31},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":8607},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/reason.rs","byte_start":472404,"byte_end":472410,"line_start":50,"line_end":50,"column_start":23,"column_end":29},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":8607},"to":{"krate":1,"index":8898}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/replay.rs","byte_start":474700,"byte_end":474706,"line_start":51,"line_end":51,"column_start":6,"column_end":12},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":8628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/replay.rs","byte_start":476264,"byte_end":476270,"line_start":108,"line_end":108,"column_start":6,"column_end":12},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":8628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":480075,"byte_end":480089,"line_start":28,"line_end":28,"column_start":10,"column_end":24},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":8648},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":481363,"byte_end":481379,"line_start":64,"line_end":64,"column_start":22,"column_end":38},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":8654},"to":{"krate":0,"index":2409}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":481623,"byte_end":481633,"line_start":71,"line_end":71,"column_start":28,"column_end":38},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":2428},"to":{"krate":4,"index":4336}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/result_cache.rs","byte_start":482534,"byte_end":482549,"line_start":105,"line_end":105,"column_start":22,"column_end":37},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":2437},"to":{"krate":0,"index":2409}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":485749,"byte_end":485761,"line_start":67,"line_end":67,"column_start":18,"column_end":30},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":8662},"to":{"krate":1,"index":2827}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":485834,"byte_end":485846,"line_start":73,"line_end":73,"column_start":6,"column_end":18},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":8662},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":486622,"byte_end":486634,"line_start":97,"line_end":97,"column_start":23,"column_end":35},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":8662},"to":{"krate":1,"index":11376}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":486789,"byte_end":486801,"line_start":103,"line_end":103,"column_start":23,"column_end":35},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":8662},"to":{"krate":1,"index":8898}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":487304,"byte_end":487311,"line_start":130,"line_end":130,"column_start":18,"column_end":25},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":8684},"to":{"krate":31,"index":188}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":490583,"byte_end":490587,"line_start":241,"line_end":241,"column_start":6,"column_end":10},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":8708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/rng.rs","byte_start":495730,"byte_end":495737,"line_start":398,"line_end":398,"column_start":6,"column_end":13},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":8684},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":509742,"byte_end":509752,"line_start":81,"line_end":81,"column_start":21,"column_end":31},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":8743},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":510353,"byte_end":510363,"line_start":96,"line_end":96,"column_start":23,"column_end":33},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":8743},"to":{"krate":1,"index":8898}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":511015,"byte_end":511025,"line_start":117,"line_end":117,"column_start":18,"column_end":28},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":8743},"to":{"krate":1,"index":2827}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":511224,"byte_end":511234,"line_start":130,"line_end":130,"column_start":6,"column_end":16},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":8754},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/test_runner/runner.rs","byte_start":515629,"byte_end":515639,"line_start":293,"line_end":293,"column_start":6,"column_end":16},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":8743},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/tuple.rs","byte_start":555142,"byte_end":555156,"line_start":26,"line_end":26,"column_start":9,"column_end":23},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":8767},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":560260,"byte_end":560271,"line_start":36,"line_end":36,"column_start":18,"column_end":29},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":9044},"to":{"krate":1,"index":2827}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":560402,"byte_end":560413,"line_start":43,"line_end":43,"column_start":20,"column_end":31},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":9044},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":560641,"byte_end":560652,"line_start":54,"line_end":54,"column_start":6,"column_end":17},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":9044},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":562768,"byte_end":562780,"line_start":128,"line_end":128,"column_start":19,"column_end":31},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":2757},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":562855,"byte_end":562867,"line_start":133,"line_end":133,"column_start":18,"column_end":30},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":2757},"to":{"krate":1,"index":2859}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":562897,"byte_end":562909,"line_start":134,"line_end":134,"column_start":24,"column_end":36},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":2757},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":563049,"byte_end":563061,"line_start":139,"line_end":139,"column_start":34,"column_end":46},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":2757},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":563240,"byte_end":563252,"line_start":147,"line_end":147,"column_start":35,"column_end":47},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":2757},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":564392,"byte_end":564406,"line_start":183,"line_end":183,"column_start":47,"column_end":61},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":9079},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":564558,"byte_end":564573,"line_start":189,"line_end":189,"column_start":29,"column_end":44},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":9067},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/option.rs","byte_start":564717,"byte_end":564732,"line_start":198,"line_end":198,"column_start":34,"column_end":49},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":9067},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":568579,"byte_end":568585,"line_start":42,"line_end":42,"column_start":22,"column_end":28},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":2813},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":568666,"byte_end":568672,"line_start":47,"line_end":47,"column_start":21,"column_end":27},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":2813},"to":{"krate":1,"index":2859}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":568708,"byte_end":568714,"line_start":48,"line_end":48,"column_start":27,"column_end":33},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":2813},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":568875,"byte_end":568881,"line_start":53,"line_end":53,"column_start":58,"column_end":64},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":2813},"to":{"krate":0,"index":1986}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":569063,"byte_end":569070,"line_start":60,"line_end":60,"column_start":22,"column_end":29},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":2835},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":569151,"byte_end":569158,"line_start":65,"line_end":65,"column_start":21,"column_end":28},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":2835},"to":{"krate":1,"index":2859}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":569194,"byte_end":569201,"line_start":66,"line_end":66,"column_start":27,"column_end":34},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":2835},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":569363,"byte_end":569370,"line_start":71,"line_end":71,"column_start":58,"column_end":65},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":2835},"to":{"krate":0,"index":1986}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":571255,"byte_end":571262,"line_start":121,"line_end":121,"column_start":9,"column_end":16},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":9104},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":571457,"byte_end":571465,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":9131},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":571627,"byte_end":571643,"line_start":135,"line_end":135,"column_start":42,"column_end":58},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":9089},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":571824,"byte_end":571840,"line_start":145,"line_end":145,"column_start":47,"column_end":63},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":9089},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":572066,"byte_end":572083,"line_start":155,"line_end":155,"column_start":42,"column_end":59},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":9116},"to":{"krate":1,"index":2470}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/result.rs","byte_start":572265,"byte_end":572282,"line_start":165,"line_end":165,"column_start":47,"column_end":64},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":9116},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":579708,"byte_end":579719,"line_start":81,"line_end":81,"column_start":52,"column_end":63},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":9143},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":580263,"byte_end":580283,"line_start":100,"line_end":100,"column_start":53,"column_end":73},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":9153},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":580798,"byte_end":580809,"line_start":121,"line_end":121,"column_start":65,"column_end":76},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":9163},"to":{"krate":0,"index":1986}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":584169,"byte_end":584174,"line_start":215,"line_end":215,"column_start":6,"column_end":11},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":9204},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":585861,"byte_end":585874,"line_start":269,"line_end":269,"column_start":6,"column_end":19},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":9228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":587486,"byte_end":587502,"line_start":331,"line_end":331,"column_start":6,"column_end":22},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":9252},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":587614,"byte_end":587630,"line_start":337,"line_end":337,"column_start":19,"column_end":35},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":9252},"to":{"krate":0,"index":1768}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":587943,"byte_end":587960,"line_start":349,"line_end":349,"column_start":20,"column_end":37},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":9256},"to":{"krate":0,"index":1804}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/sample.rs","byte_start":588369,"byte_end":588377,"line_start":368,"line_end":368,"column_start":6,"column_end":14},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":9245},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":595171,"byte_end":595182,"line_start":45,"line_end":45,"column_start":29,"column_end":40},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":9261},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":595273,"byte_end":595284,"line_start":51,"line_end":51,"column_start":18,"column_end":29},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":9261},"to":{"krate":1,"index":2827}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":597463,"byte_end":597468,"line_start":117,"line_end":117,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2854},"to":{"krate":0,"index":3087}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":597476,"byte_end":597481,"line_start":117,"line_end":117,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":8891},"to":{"krate":0,"index":3087}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":597664,"byte_end":597670,"line_start":124,"line_end":124,"column_start":28,"column_end":34},"kind":{"Impl":{"id":341}},"from":{"krate":5,"index":7293},"to":{"krate":0,"index":3087}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":597848,"byte_end":597851,"line_start":132,"line_end":132,"column_start":28,"column_end":31},"kind":{"Impl":{"id":342}},"from":{"krate":5,"index":6780},"to":{"krate":0,"index":3087}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/proptest-1.0.0/src/string.rs","byte_start":602468,"byte_end":602478,"line_start":281,"line_end":281,"column_start":52,"column_end":62},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":3114},"to":{"krate":1,"index":7314}}]}