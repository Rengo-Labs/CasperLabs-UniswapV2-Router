{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5","program":"/home/hussain/.rustup/toolchains/nightly-2021-06-17-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","elliptic_curve","--edition=2018","/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"arithmetic\"","--cfg","feature=\"bitvec\"","--cfg","feature=\"digest\"","--cfg","feature=\"ff\"","--cfg","feature=\"group\"","--cfg","feature=\"std\"","--cfg","feature=\"zeroize\"","-C","metadata=93356118cbccb8d7","-C","extra-filename=-93356118cbccb8d7","--out-dir","/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_library/uniswap_v2_library/target/rls/debug/deps","-L","dependency=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_library/uniswap_v2_library/target/rls/debug/deps","--extern","bitvec=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_library/uniswap_v2_library/target/rls/debug/deps/libbitvec-12bab257f2ddc99f.rmeta","--extern","digest=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_library/uniswap_v2_library/target/rls/debug/deps/libdigest-54f6c60dd1903370.rmeta","--extern","ff=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_library/uniswap_v2_library/target/rls/debug/deps/libff-e7c0d231978036bc.rmeta","--extern","funty=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_library/uniswap_v2_library/target/rls/debug/deps/libfunty-fc92b189a9fd60fd.rmeta","--extern","generic_array=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_library/uniswap_v2_library/target/rls/debug/deps/libgeneric_array-70dec43846c2abe8.rmeta","--extern","group=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_library/uniswap_v2_library/target/rls/debug/deps/libgroup-86fc00de7b5973a9.rmeta","--extern","rand_core=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_library/uniswap_v2_library/target/rls/debug/deps/librand_core-a0fb4a7a383b4d79.rmeta","--extern","subtle=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_library/uniswap_v2_library/target/rls/debug/deps/libsubtle-859a7e6320daf2ec.rmeta","--extern","zeroize=/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_library/uniswap_v2_library/target/rls/debug/deps/libzeroize-b9cc3788406a899a.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/hussain/.rustup/toolchains/nightly-2021-06-17-x86_64-unknown-linux-gnu"],"output":"/home/hussain/Desktop/Scytalelabs/Tasks/UniswapV2Router01_1.3_Update/uniswap_v2_library/uniswap_v2_library/target/rls/debug/deps/libelliptic_curve-93356118cbccb8d7.rmeta"},"prelude":{"crate_id":{"name":"elliptic_curve","disambiguator":[3062925545686180671,14933186891856742021]},"crate_root":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src","external_crates":[{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[17044353007700780372,2918200604221815240]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[16381423150204372411,13484601183843768894]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[14897589902885170584,12420159477491062790]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[4001252548733048619,17242313319436819942]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":5,"id":{"name":"std","disambiguator":[10283585399922801530,3113815793436671734]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5352780060018682353,5212160423076132458]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17147711338457548981,6939542792032145917]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[2842547253401849104,13491194742958542480]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[743652736616489669,1287960927584068912]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16292678807852148020,5791869870655771082]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[9404817637945341771,5464406936793117880]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[17888196348013287212,15275907588461469564]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[1276787031323089283,14926302036319710225]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[3988411805964943353,12607049771423756955]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[2565427104194196404,14362732384292144629]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":16,"id":{"name":"miniz_oxide","disambiguator":[11025534897254923617,14932093111515565771]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":17,"id":{"name":"adler","disambiguator":[6421578182970509025,18151391361782090522]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":18,"id":{"name":"panic_unwind","disambiguator":[6900026989174100552,1126691905217298232]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/ops.rs","num":19,"id":{"name":"subtle","disambiguator":[7663587240783203126,4149916854252024762]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","num":20,"id":{"name":"generic_array","disambiguator":[2843115902605017426,8992412963017954804]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","num":21,"id":{"name":"typenum","disambiguator":[15595204929548488895,11009855742131221505]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","num":22,"id":{"name":"zeroize","disambiguator":[15871927379366335317,10654401844513689377]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","num":23,"id":{"name":"zeroize_derive","disambiguator":[5949840450945936983,15138461938731074556]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","num":24,"id":{"name":"ff","disambiguator":[14313752395180975019,7213354655266172689]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","num":25,"id":{"name":"bitvec","disambiguator":[12843394802284785757,18049944760944282035]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","num":26,"id":{"name":"radium","disambiguator":[6170578490148099913,11385662121544404573]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","num":27,"id":{"name":"wyz","disambiguator":[14075336805396516078,8175419829704857618]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","num":28,"id":{"name":"funty","disambiguator":[18100334673436176153,12213058834818999383]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":29,"id":{"name":"rand_core","disambiguator":[7345165502795455262,2173064062052697177]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","num":30,"id":{"name":"getrandom","disambiguator":[6116775162830991621,11287539870091720006]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","num":31,"id":{"name":"cfg_if","disambiguator":[18066125678311518643,11358915899814267326]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","num":32,"id":{"name":"libc","disambiguator":[11669307930940506752,4205052304647662666]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","num":33,"id":{"name":"group","disambiguator":[2705780920423030264,3920183405416489368]}},{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","num":34,"id":{"name":"digest","disambiguator":[11815551155626523553,13150518862568951459]}}],"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":0,"byte_end":4768,"line_start":1,"line_end":150,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":2916},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/ops.rs","byte_start":5305,"byte_end":5308,"line_start":3,"line_end":3,"column_start":21,"column_end":24},"alias_span":null,"name":"Add","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":1,"index":2947},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/ops.rs","byte_start":5310,"byte_end":5319,"line_start":3,"line_end":3,"column_start":26,"column_end":35},"alias_span":null,"name":"AddAssign","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":1,"index":2926},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/ops.rs","byte_start":5321,"byte_end":5324,"line_start":3,"line_end":3,"column_start":37,"column_end":40},"alias_span":null,"name":"Mul","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":1,"index":2943},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/ops.rs","byte_start":5326,"byte_end":5329,"line_start":3,"line_end":3,"column_start":42,"column_end":45},"alias_span":null,"name":"Neg","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":1,"index":2921},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/ops.rs","byte_start":5331,"byte_end":5334,"line_start":3,"line_end":3,"column_start":47,"column_end":50},"alias_span":null,"name":"Sub","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":1,"index":2951},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/ops.rs","byte_start":5336,"byte_end":5345,"line_start":3,"line_end":3,"column_start":52,"column_end":61},"alias_span":null,"name":"SubAssign","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":0,"index":676},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1563,"byte_end":1568,"line_start":56,"line_end":56,"column_start":22,"column_end":27},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":677},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1563,"byte_end":1568,"line_start":56,"line_end":56,"column_start":22,"column_end":27},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":0},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1579,"byte_end":1592,"line_start":58,"line_end":58,"column_start":9,"column_end":22},"alias_span":null,"name":"generic_array","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":21,"index":2758},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1610,"byte_end":1616,"line_start":58,"line_end":58,"column_start":40,"column_end":46},"alias_span":null,"name":"consts","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":29,"index":0},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1627,"byte_end":1636,"line_start":59,"line_end":59,"column_start":9,"column_end":18},"alias_span":null,"name":"rand_core","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":19,"index":0},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1646,"byte_end":1652,"line_start":60,"line_end":60,"column_start":9,"column_end":15},"alias_span":null,"name":"subtle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":232},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1714,"byte_end":1725,"line_start":64,"line_end":64,"column_start":13,"column_end":24},"alias_span":null,"name":"AffinePoint","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":229},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1727,"byte_end":1747,"line_start":64,"line_end":64,"column_start":26,"column_end":46},"alias_span":null,"name":"ProjectiveArithmetic","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":234},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1749,"byte_end":1764,"line_start":64,"line_end":64,"column_start":48,"column_end":63},"alias_span":null,"name":"ProjectivePoint","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":767},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1783,"byte_end":1792,"line_start":65,"line_end":65,"column_start":17,"column_end":26},"alias_span":null,"name":"PublicKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":430},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1806,"byte_end":1812,"line_start":66,"line_end":66,"column_start":13,"column_end":19},"alias_span":null,"name":"Scalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":25,"index":2173},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1870,"byte_end":1877,"line_start":69,"line_end":69,"column_start":23,"column_end":30},"alias_span":null,"name":"BitView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":24,"index":0},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1966,"byte_end":1968,"line_start":71,"line_end":71,"column_start":9,"column_end":11},"alias_span":null,"name":"ff","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":24,"index":61},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1977,"byte_end":1982,"line_start":71,"line_end":71,"column_start":20,"column_end":25},"alias_span":null,"name":"Field","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":33,"index":0},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":2024,"byte_end":2029,"line_start":73,"line_end":73,"column_start":9,"column_end":14},"alias_span":null,"name":"group","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":33,"index":173},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":2038,"byte_end":2043,"line_start":73,"line_end":73,"column_start":23,"column_end":28},"alias_span":null,"name":"Group","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":34,"index":0},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":2082,"byte_end":2088,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"alias_span":null,"name":"digest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":34,"index":27},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":2097,"byte_end":2103,"line_start":76,"line_end":76,"column_start":24,"column_end":30},"alias_span":null,"name":"Digest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":787},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":2197,"byte_end":2206,"line_start":82,"line_end":82,"column_start":21,"column_end":30},"alias_span":null,"name":"SecretKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":22,"index":0},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":2244,"byte_end":2251,"line_start":84,"line_end":84,"column_start":9,"column_end":16},"alias_span":null,"name":"zeroize","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":0,"byte_end":4768,"line_start":1,"line_end":150,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":17},{"krate":0,"index":47},{"krate":0,"index":190},{"krate":0,"index":197},{"krate":0,"index":218},{"krate":0,"index":236},{"krate":0,"index":362},{"krate":0,"index":475},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":595},{"krate":0,"index":598},{"krate":0,"index":601},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":609},{"krate":0,"index":612},{"krate":0,"index":615},{"krate":0,"index":618},{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":628},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":635},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":642},{"krate":0,"index":645},{"krate":0,"index":648},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":655},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":662},{"krate":0,"index":665},{"krate":0,"index":668},{"krate":0,"index":670},{"krate":0,"index":672}],"decl_id":null,"docs":" General purpose Elliptic Curve Cryptography (ECC) support, including types\n and traits for representing various elliptic curve forms, scalars, points,\n and public/secret keys composed thereof.","sig":null,"attributes":[{"value":"/ General purpose Elliptic Curve Cryptography (ECC) support, including types","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":0,"byte_end":78,"line_start":1,"line_end":1,"column_start":1,"column_end":79}},{"value":"/ and traits for representing various elliptic curve forms, scalars, points,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":79,"byte_end":157,"line_start":2,"line_end":2,"column_start":1,"column_end":79}},{"value":"/ and public/secret keys composed thereof.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":158,"byte_end":202,"line_start":3,"line_end":3,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":203,"byte_end":206,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ## Minimum Supported Rust Version","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":207,"byte_end":244,"line_start":5,"line_end":5,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":245,"byte_end":248,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Rust **1.46** or higher.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":249,"byte_end":277,"line_start":7,"line_end":7,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":278,"byte_end":281,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Minimum supported Rust version can be changed in the future, but it will be","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":282,"byte_end":361,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ done with a minor version bump.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":362,"byte_end":397,"line_start":10,"line_end":10,"column_start":1,"column_end":36}},{"value":"no_std","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":399,"byte_end":409,"line_start":12,"line_end":12,"column_start":1,"column_end":11}},{"value":"forbid(unsafe_code)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":449,"byte_end":472,"line_start":14,"line_end":14,"column_start":1,"column_end":24}},{"value":"warn(missing_docs, rust_2018_idioms, unused_qualifications)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":473,"byte_end":536,"line_start":15,"line_end":15,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":6},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/error.rs","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":676},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":681},{"krate":0,"index":14},{"krate":0,"index":16}],"decl_id":null,"docs":" Error type.\n","sig":null,"attributes":[{"value":"/ Error type.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/error.rs","byte_start":4770,"byte_end":4785,"line_start":1,"line_end":1,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":676},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/error.rs","byte_start":4887,"byte_end":4892,"line_start":7,"line_end":7,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" Elliptic curve errors\n","sig":null,"attributes":[{"value":"/ Elliptic curve errors","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/error.rs","byte_start":4820,"byte_end":4845,"line_start":5,"line_end":5,"column_start":1,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":17},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/ops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/ops.rs","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43}],"decl_id":null,"docs":" Traits for arithmetic operations on elliptic curve field elements\n","sig":null,"attributes":[{"value":"/ Traits for arithmetic operations on elliptic curve field elements","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/ops.rs","byte_start":5214,"byte_end":5283,"line_start":1,"line_end":1,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":40},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/ops.rs","byte_start":5462,"byte_end":5468,"line_start":8,"line_end":8,"column_start":11,"column_end":17},"name":"Invert","qualname":"::ops::Invert","value":"Invert","parent":null,"children":[{"krate":0,"index":41},{"krate":0,"index":42}],"decl_id":null,"docs":" Perform an inversion on a field element (i.e. base field element or scalar)\n","sig":null,"attributes":[{"value":"/ Perform an inversion on a field element (i.e. base field element or scalar)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/ops.rs","byte_start":5372,"byte_end":5451,"line_start":7,"line_end":7,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":41},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/ops.rs","byte_start":5507,"byte_end":5513,"line_start":10,"line_end":10,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::Invert::Output","value":"type Output;","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":" Field element type\n","sig":null,"attributes":[{"value":"/ Field element type","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/ops.rs","byte_start":5475,"byte_end":5497,"line_start":9,"line_end":9,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/ops.rs","byte_start":5555,"byte_end":5561,"line_start":13,"line_end":13,"column_start":8,"column_end":14},"name":"invert","qualname":"::ops::Invert::invert","value":"pub fn invert(&Self) -> CtOption<Self::Output>","parent":{"krate":0,"index":40},"children":[],"decl_id":null,"docs":" Invert a field element.\n","sig":null,"attributes":[{"value":"/ Invert a field element.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/ops.rs","byte_start":5520,"byte_end":5547,"line_start":12,"line_end":12,"column_start":5,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":47},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sec1","qualname":"::sec1","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":125},{"krate":0,"index":127},{"krate":0,"index":683},{"krate":0,"index":686},{"krate":0,"index":689},{"krate":0,"index":691},{"krate":0,"index":694},{"krate":0,"index":696},{"krate":0,"index":700},{"krate":0,"index":703},{"krate":0,"index":129},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":169},{"krate":0,"index":706},{"krate":0,"index":717},{"krate":0,"index":720},{"krate":0,"index":724},{"krate":0,"index":728},{"krate":0,"index":731},{"krate":0,"index":735},{"krate":0,"index":738},{"krate":0,"index":172},{"krate":0,"index":743},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":759},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":176},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":187}],"decl_id":null,"docs":" SEC1 encoding support.","sig":null,"attributes":[{"value":"/ SEC1 encoding support.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":5765,"byte_end":5791,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":5792,"byte_end":5795,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Support for the `Elliptic-Curve-Point-to-Octet-String` encoding described","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":5796,"byte_end":5873,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ in SEC1: Elliptic Curve Cryptography (Version 2.0) section 2.3.3 (p.10):","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":5874,"byte_end":5950,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":5951,"byte_end":5954,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ <https://www.secg.org/sec1-v2.pdf>","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":5955,"byte_end":5993,"line_start":6,"line_end":6,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":123},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":6810,"byte_end":6829,"line_start":39,"line_end":39,"column_start":10,"column_end":29},"name":"CompressedPointSize","qualname":"::sec1::CompressedPointSize","value":"<<C as crate::Curve>::FieldSize as Add<U1>>::Output","parent":null,"children":[],"decl_id":null,"docs":" Size of a compressed point for the given elliptic curve when encoded\n using the SEC1 `Elliptic-Curve-Point-to-Octet-String` algorithm\n (including leading `0x02` or `0x03` tag byte).\n","sig":null,"attributes":[{"value":"/ Size of a compressed point for the given elliptic curve when encoded","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":6609,"byte_end":6681,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/ using the SEC1 `Elliptic-Curve-Point-to-Octet-String` algorithm","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":6682,"byte_end":6749,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"/ (including leading `0x02` or `0x03` tag byte).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":6750,"byte_end":6800,"line_start":38,"line_end":38,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":125},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":7083,"byte_end":7104,"line_start":44,"line_end":44,"column_start":10,"column_end":31},"name":"UncompressedPointSize","qualname":"::sec1::UncompressedPointSize","value":"<UntaggedPointSize<C> as Add<U1>>::Output","parent":null,"children":[],"decl_id":null,"docs":" Size of an uncompressed point for the given elliptic curve when encoded\n using the SEC1 `Elliptic-Curve-Point-to-Octet-String` algorithm\n (including leading `0x04` tag byte).\n","sig":null,"attributes":[{"value":"/ Size of an uncompressed point for the given elliptic curve when encoded","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":6889,"byte_end":6964,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ using the SEC1 `Elliptic-Curve-Point-to-Octet-String` algorithm","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":6965,"byte_end":7032,"line_start":42,"line_end":42,"column_start":1,"column_end":68}},{"value":"/ (including leading `0x04` tag byte).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":7033,"byte_end":7073,"line_start":43,"line_end":43,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":127},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":7219,"byte_end":7236,"line_start":47,"line_end":47,"column_start":10,"column_end":27},"name":"UntaggedPointSize","qualname":"::sec1::UntaggedPointSize","value":"<<C as crate::Curve>::FieldSize as Add>::Output","parent":null,"children":[],"decl_id":null,"docs":" Size of an untagged point for given elliptic curve.\n","sig":null,"attributes":[{"value":"/ Size of an untagged point for given elliptic curve.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":7154,"byte_end":7209,"line_start":46,"line_end":46,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":683},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":7562,"byte_end":7574,"line_start":55,"line_end":55,"column_start":12,"column_end":24},"name":"EncodedPoint","qualname":"::sec1::EncodedPoint","value":"EncodedPoint {  }","parent":null,"children":[{"krate":0,"index":685}],"decl_id":null,"docs":" SEC1 encoded curve point.","sig":null,"attributes":[{"value":"/ SEC1 encoded curve point.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":7292,"byte_end":7321,"line_start":49,"line_end":49,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":7322,"byte_end":7325,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ This type is an enum over the compressed and uncompressed encodings,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":7326,"byte_end":7398,"line_start":51,"line_end":51,"column_start":1,"column_end":73}},{"value":"/ useful for cases where either encoding can be supported, or conversions","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":7399,"byte_end":7474,"line_start":52,"line_end":52,"column_start":1,"column_end":76}},{"value":"/ between the two forms.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":7475,"byte_end":7501,"line_start":53,"line_end":53,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":8237,"byte_end":8247,"line_start":77,"line_end":77,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<EncodedPoint<C>>::from_bytes","value":"pub fn from_bytes<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>)\n-> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Decode elliptic curve point (compressed or uncompressed) from the\n `Elliptic-Curve-Point-to-Octet-String` encoding described in\n SEC 1: Elliptic Curve Cryptography (Version 2.0) section\n 2.3.3 (page 10).","sig":null,"attributes":[{"value":"/ Decode elliptic curve point (compressed or uncompressed) from the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":7947,"byte_end":8016,"line_start":71,"line_end":71,"column_start":5,"column_end":74}},{"value":"/ `Elliptic-Curve-Point-to-Octet-String` encoding described in","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":8021,"byte_end":8085,"line_start":72,"line_end":72,"column_start":5,"column_end":69}},{"value":"/ SEC 1: Elliptic Curve Cryptography (Version 2.0) section","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":8090,"byte_end":8150,"line_start":73,"line_end":73,"column_start":5,"column_end":65}},{"value":"/ 2.3.3 (page 10).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":8155,"byte_end":8175,"line_start":74,"line_end":74,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":8180,"byte_end":8183,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ <http://www.secg.org/sec1-v2.pdf>","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":8188,"byte_end":8225,"line_start":76,"line_end":76,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":9000,"byte_end":9019,"line_start":98,"line_end":98,"column_start":12,"column_end":31},"name":"from_untagged_bytes","qualname":"<EncodedPoint<C>>::from_untagged_bytes","value":"pub fn from_untagged_bytes(&GenericArray<u8, UntaggedPointSize<C>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Decode elliptic curve point from raw uncompressed coordinates, i.e.\n encoded as the concatenated `x || y` coordinates with no leading SEC1\n tag byte (which would otherwise be `0x04` for an uncompressed point).\n","sig":null,"attributes":[{"value":"/ Decode elliptic curve point from raw uncompressed coordinates, i.e.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":8761,"byte_end":8832,"line_start":95,"line_end":95,"column_start":5,"column_end":76}},{"value":"/ encoded as the concatenated `x || y` coordinates with no leading SEC1","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":8837,"byte_end":8910,"line_start":96,"line_end":96,"column_start":5,"column_end":78}},{"value":"/ tag byte (which would otherwise be `0x04` for an uncompressed point).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":8915,"byte_end":8988,"line_start":97,"line_end":97,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":9344,"byte_end":9367,"line_start":105,"line_end":105,"column_start":12,"column_end":35},"name":"from_affine_coordinates","qualname":"<EncodedPoint<C>>::from_affine_coordinates","value":"pub fn from_affine_coordinates(&FieldBytes<C>, &FieldBytes<C>, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encode an elliptic curve point from big endian serialized coordinates\n (with optional point compression)\n","sig":null,"attributes":[{"value":"/ Encode an elliptic curve point from big endian serialized coordinates","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":9217,"byte_end":9290,"line_start":103,"line_end":103,"column_start":5,"column_end":78}},{"value":"/ (with optional point compression)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":9295,"byte_end":9332,"line_start":104,"line_end":104,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":10231,"byte_end":10246,"line_start":132,"line_end":132,"column_start":12,"column_end":27},"name":"from_secret_key","qualname":"<EncodedPoint<C>>::from_secret_key","value":"pub fn from_secret_key(&SecretKey<C>, bool) -> Self where C: Curve +\nProjectiveArithmetic, FieldBytes<C>: From<Scalar<C>> +\nfor<'r> From<&'r Scalar<C>>, AffinePoint<C>: ToEncodedPoint<C>,\nScalar<C>: PrimeField<Repr = FieldBytes<C>> + Zeroize","parent":null,"children":[],"decl_id":null,"docs":" Compute [`EncodedPoint`] representing the public key for the provided\n [`SecretKey`].","sig":null,"attributes":[{"value":"/ Compute [`EncodedPoint`] representing the public key for the provided","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":9885,"byte_end":9958,"line_start":125,"line_end":125,"column_start":5,"column_end":78}},{"value":"/ [`SecretKey`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":9963,"byte_end":9981,"line_start":126,"line_end":126,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":9986,"byte_end":9989,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ The `compress` flag requests point compression.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":9994,"byte_end":10045,"line_start":128,"line_end":128,"column_start":5,"column_end":56}},{"value":"cfg(all(feature = \"arithmetic\", feature = \"zeroize\"))","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":10050,"byte_end":10106,"line_start":129,"line_end":129,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":10796,"byte_end":10804,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"identity","qualname":"<EncodedPoint<C>>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return [`EncodedPoint`] representing the additive identity\n (a.k.a. point at infinity)\n","sig":null,"attributes":[{"value":"/ Return [`EncodedPoint`] representing the additive identity","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":10687,"byte_end":10749,"line_start":144,"line_end":144,"column_start":5,"column_end":67}},{"value":"/ (a.k.a. point at infinity)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":10754,"byte_end":10784,"line_start":145,"line_end":145,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":10928,"byte_end":10931,"line_start":151,"line_end":151,"column_start":12,"column_end":15},"name":"len","qualname":"<EncodedPoint<C>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the encoded point in bytes\n","sig":null,"attributes":[{"value":"/ Get the length of the encoded point in bytes","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":10868,"byte_end":10916,"line_start":150,"line_end":150,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":11092,"byte_end":11100,"line_start":156,"line_end":156,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<EncodedPoint<C>>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get byte slice containing the serialized [`EncodedPoint`].\n","sig":null,"attributes":[{"value":"/ Get byte slice containing the serialized [`EncodedPoint`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":11018,"byte_end":11080,"line_start":155,"line_end":155,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":11326,"byte_end":11334,"line_start":163,"line_end":163,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<EncodedPoint<C>>::to_bytes","value":"pub fn to_bytes(&Self) -> Box<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Get boxed byte slice containing the serialized [`EncodedPoint`]\n","sig":null,"attributes":[{"value":"/ Get boxed byte slice containing the serialized [`EncodedPoint`]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":11164,"byte_end":11231,"line_start":160,"line_end":160,"column_start":5,"column_end":72}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":11236,"byte_end":11261,"line_start":161,"line_end":161,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":11657,"byte_end":11674,"line_start":171,"line_end":171,"column_start":12,"column_end":29},"name":"to_untagged_bytes","qualname":"<EncodedPoint<C>>::to_untagged_bytes","value":"pub fn to_untagged_bytes(&Self)\n-> Option<GenericArray<u8, UntaggedPointSize<C>>> where C: Curve +\nProjectiveArithmetic, FieldBytes<C>: From<Scalar<C>> +\nfor<'r> From<&'r Scalar<C>>, Scalar<C>: PrimeField<Repr = FieldBytes<C>>,\nAffinePoint<C>: ConditionallySelectable + Default + Decompress<C> +\nToEncodedPoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Serialize point as raw uncompressed coordinates without tag byte, i.e.\n encoded as the concatenated `x || y` coordinates.\n","sig":null,"attributes":[{"value":"/ Serialize point as raw uncompressed coordinates without tag byte, i.e.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":11420,"byte_end":11494,"line_start":167,"line_end":167,"column_start":5,"column_end":79}},{"value":"/ encoded as the concatenated `x || y` coordinates.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":11499,"byte_end":11552,"line_start":168,"line_end":168,"column_start":5,"column_end":58}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":11557,"byte_end":11587,"line_start":169,"line_end":169,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":12317,"byte_end":12328,"line_start":186,"line_end":186,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<EncodedPoint<C>>::is_identity","value":"pub fn is_identity(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this [`EncodedPoint`] the additive identity? (a.k.a. point at infinity)\n","sig":null,"attributes":[{"value":"/ Is this [`EncodedPoint`] the additive identity? (a.k.a. point at infinity)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":12227,"byte_end":12305,"line_start":185,"line_end":185,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":12442,"byte_end":12455,"line_start":191,"line_end":191,"column_start":12,"column_end":25},"name":"is_compressed","qualname":"<EncodedPoint<C>>::is_compressed","value":"pub fn is_compressed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this [`EncodedPoint`] compressed?\n","sig":null,"attributes":[{"value":"/ Is this [`EncodedPoint`] compressed?","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":12390,"byte_end":12430,"line_start":190,"line_end":190,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":12600,"byte_end":12608,"line_start":196,"line_end":196,"column_start":12,"column_end":20},"name":"compress","qualname":"<EncodedPoint<C>>::compress","value":"pub fn compress(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compress this [`EncodedPoint`], returning a new [`EncodedPoint`].\n","sig":null,"attributes":[{"value":"/ Compress this [`EncodedPoint`], returning a new [`EncodedPoint`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":12519,"byte_end":12588,"line_start":195,"line_end":195,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":13035,"byte_end":13045,"line_start":206,"line_end":206,"column_start":12,"column_end":22},"name":"decompress","qualname":"<EncodedPoint<C>>::decompress","value":"pub fn decompress(&Self) -> Option<Self> where C: Curve +\nProjectiveArithmetic, FieldBytes<C>: From<Scalar<C>> +\nfor<'r> From<&'r Scalar<C>>, Scalar<C>: PrimeField<Repr = FieldBytes<C>>,\nAffinePoint<C>: ConditionallySelectable + Default + Decompress<C> +\nToEncodedPoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Decompress this [`EncodedPoint`], returning a new [`EncodedPoint`].\n","sig":null,"attributes":[{"value":"/ Decompress this [`EncodedPoint`], returning a new [`EncodedPoint`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":12859,"byte_end":12930,"line_start":203,"line_end":203,"column_start":5,"column_end":76}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":12935,"byte_end":12965,"line_start":204,"line_end":204,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":13808,"byte_end":13814,"line_start":225,"line_end":225,"column_start":12,"column_end":18},"name":"encode","qualname":"<EncodedPoint<C>>::encode","value":"pub fn encode<T>(T, bool) -> Self where T: ToEncodedPoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Encode an [`EncodedPoint`] from the desired type\n","sig":null,"attributes":[{"value":"/ Encode an [`EncodedPoint`] from the desired type","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":13744,"byte_end":13796,"line_start":224,"line_end":224,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":14024,"byte_end":14030,"line_start":233,"line_end":233,"column_start":12,"column_end":18},"name":"decode","qualname":"<EncodedPoint<C>>::decode","value":"pub fn decode<T>(&Self) -> Result<T, Error> where T: FromEncodedPoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Decode this [`EncodedPoint`] into the desired type\n","sig":null,"attributes":[{"value":"/ Decode this [`EncodedPoint`] into the desired type","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":13958,"byte_end":14012,"line_start":232,"line_end":232,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":14227,"byte_end":14230,"line_start":241,"line_end":241,"column_start":12,"column_end":15},"name":"tag","qualname":"<EncodedPoint<C>>::tag","value":"pub fn tag(&Self) -> Tag","parent":null,"children":[],"decl_id":null,"docs":" Get the SEC1 tag for this [`EncodedPoint`]\n","sig":null,"attributes":[{"value":"/ Get the SEC1 tag for this [`EncodedPoint`]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":14169,"byte_end":14215,"line_start":240,"line_end":240,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":14447,"byte_end":14458,"line_start":248,"line_end":248,"column_start":12,"column_end":23},"name":"coordinates","qualname":"<EncodedPoint<C>>::coordinates","value":"pub fn coordinates(&Self) -> Coordinates<, C>","parent":null,"children":[],"decl_id":null,"docs":" Get the [`Coordinates`] for this [`EncodedPoint`].\n","sig":null,"attributes":[{"value":"/ Get the [`Coordinates`] for this [`EncodedPoint`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":14367,"byte_end":14421,"line_start":246,"line_end":246,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":14426,"byte_end":14435,"line_start":247,"line_end":247,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":15098,"byte_end":15099,"line_start":271,"line_end":271,"column_start":12,"column_end":13},"name":"x","qualname":"<EncodedPoint<C>>::x","value":"pub fn x(&Self) -> Option<&FieldBytes<C>>","parent":null,"children":[],"decl_id":null,"docs":" Get the x-coordinate for this [`EncodedPoint`].","sig":null,"attributes":[{"value":"/ Get the x-coordinate for this [`EncodedPoint`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":14967,"byte_end":15018,"line_start":268,"line_end":268,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":15023,"byte_end":15026,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if this point is the identity point.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":15031,"byte_end":15086,"line_start":270,"line_end":270,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":15497,"byte_end":15498,"line_start":282,"line_end":282,"column_start":12,"column_end":13},"name":"y","qualname":"<EncodedPoint<C>>::y","value":"pub fn y(&Self) -> Option<&FieldBytes<C>>","parent":null,"children":[],"decl_id":null,"docs":" Get the y-coordinate for this [`EncodedPoint`].","sig":null,"attributes":[{"value":"/ Get the y-coordinate for this [`EncodedPoint`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":15352,"byte_end":15403,"line_start":279,"line_end":279,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":15408,"byte_end":15411,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if this point is compressed or the identity point.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":15416,"byte_end":15485,"line_start":281,"line_end":281,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":709},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":17536,"byte_end":17544,"line_start":357,"line_end":357,"column_start":5,"column_end":13},"name":"Identity","qualname":"::sec1::Coordinates::Identity","value":"Coordinates::Identity","parent":{"krate":0,"index":706},"children":[],"decl_id":null,"docs":" Identity point (a.k.a. point at infinity)\n","sig":null,"attributes":[{"value":"/ Identity point (a.k.a. point at infinity)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":17486,"byte_end":17531,"line_start":356,"line_end":356,"column_start":5,"column_end":50}}]},{"kind":"StructVariant","id":{"krate":0,"index":711},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":17582,"byte_end":17592,"line_start":360,"line_end":360,"column_start":5,"column_end":15},"name":"Compressed","qualname":"::sec1::Coordinates::Compressed","value":"Coordinates::Compressed { x, y_is_odd }","parent":{"krate":0,"index":706},"children":[],"decl_id":null,"docs":" Compressed curve point\n","sig":null,"attributes":[{"value":"/ Compressed curve point","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":17551,"byte_end":17577,"line_start":359,"line_end":359,"column_start":5,"column_end":31}}]},{"kind":"StructVariant","id":{"krate":0,"index":714},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":17757,"byte_end":17769,"line_start":369,"line_end":369,"column_start":5,"column_end":17},"name":"Uncompressed","qualname":"::sec1::Coordinates::Uncompressed","value":"Coordinates::Uncompressed { x, y }","parent":{"krate":0,"index":706},"children":[],"decl_id":null,"docs":" Uncompressed curve point\n","sig":null,"attributes":[{"value":"/ Uncompressed curve point","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":17724,"byte_end":17752,"line_start":368,"line_end":368,"column_start":5,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":706},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":17454,"byte_end":17465,"line_start":355,"line_end":355,"column_start":10,"column_end":21},"name":"Coordinates","qualname":"::sec1::Coordinates","value":"pub enum Coordinates<'a, C: Curve> {\n    Identity,\n    Compressed {\n        x: &'a FieldBytes<C>,\n        y_is_odd: bool,\n    },\n    Uncompressed {\n        x: &'a FieldBytes<C>,\n        y: &'a FieldBytes<C>,\n    },\n}","parent":null,"children":[{"krate":0,"index":709},{"krate":0,"index":711},{"krate":0,"index":714}],"decl_id":null,"docs":" Enum representing the coordinates of either compressed or uncompressed\n SEC1-encoded elliptic curve points.\n","sig":null,"attributes":[{"value":"/ Enum representing the coordinates of either compressed or uncompressed","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":17285,"byte_end":17359,"line_start":352,"line_end":352,"column_start":1,"column_end":75}},{"value":"/ SEC1-encoded elliptic curve points.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":17360,"byte_end":17399,"line_start":353,"line_end":353,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":18015,"byte_end":18018,"line_start":380,"line_end":380,"column_start":12,"column_end":15},"name":"tag","qualname":"<Coordinates>::tag","value":"pub fn tag(&Self) -> Tag","parent":null,"children":[],"decl_id":null,"docs":" Get the tag value needed to encode this set of [`Coordinates`]\n","sig":null,"attributes":[{"value":"/ Get the tag value needed to encode this set of [`Coordinates`]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":17937,"byte_end":18003,"line_start":379,"line_end":379,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":744},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":18603,"byte_end":18611,"line_start":400,"line_end":400,"column_start":5,"column_end":13},"name":"Identity","qualname":"::sec1::Tag::Identity","value":"Tag::Identity","parent":{"krate":0,"index":743},"children":[],"decl_id":null,"docs":" Identity point (`0x00`)\n","sig":null,"attributes":[{"value":"/ Identity point (`0x00`)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":18571,"byte_end":18598,"line_start":399,"line_end":399,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":747},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":18679,"byte_end":18694,"line_start":403,"line_end":403,"column_start":5,"column_end":20},"name":"CompressedEvenY","qualname":"::sec1::Tag::CompressedEvenY","value":"Tag::CompressedEvenY","parent":{"krate":0,"index":743},"children":[],"decl_id":null,"docs":" Compressed point with even y-coordinate (`0x02`)\n","sig":null,"attributes":[{"value":"/ Compressed point with even y-coordinate (`0x02`)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":18622,"byte_end":18674,"line_start":402,"line_end":402,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":750},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":18761,"byte_end":18775,"line_start":406,"line_end":406,"column_start":5,"column_end":19},"name":"CompressedOddY","qualname":"::sec1::Tag::CompressedOddY","value":"Tag::CompressedOddY","parent":{"krate":0,"index":743},"children":[],"decl_id":null,"docs":" Compressed point with odd y-coordinate (`0x03`)\n","sig":null,"attributes":[{"value":"/ Compressed point with odd y-coordinate (`0x03`)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":18705,"byte_end":18756,"line_start":405,"line_end":405,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":753},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":18822,"byte_end":18834,"line_start":409,"line_end":409,"column_start":5,"column_end":17},"name":"Uncompressed","qualname":"::sec1::Tag::Uncompressed","value":"Tag::Uncompressed","parent":{"krate":0,"index":743},"children":[],"decl_id":null,"docs":" Uncompressed point (`0x04`)\n","sig":null,"attributes":[{"value":"/ Uncompressed point (`0x04`)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":18786,"byte_end":18817,"line_start":408,"line_end":408,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":743},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":18561,"byte_end":18564,"line_start":398,"line_end":398,"column_start":10,"column_end":13},"name":"Tag","qualname":"::sec1::Tag","value":"pub enum Tag {\n    Identity = ,\n    CompressedEvenY = ,\n    CompressedOddY = ,\n    Uncompressed = ,\n}","parent":null,"children":[{"krate":0,"index":744},{"krate":0,"index":747},{"krate":0,"index":750},{"krate":0,"index":753}],"decl_id":null,"docs":" Tag byte used by the `Elliptic-Curve-Point-to-Octet-String` encoding.\n","sig":null,"attributes":[{"value":"/ Tag byte used by the `Elliptic-Curve-Point-to-Octet-String` encoding.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":18421,"byte_end":18494,"line_start":395,"line_end":395,"column_start":1,"column_end":74}},{"value":"repr(u8)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":18540,"byte_end":18551,"line_start":397,"line_end":397,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":18903,"byte_end":18910,"line_start":414,"line_end":414,"column_start":12,"column_end":19},"name":"from_u8","qualname":"<Tag>::from_u8","value":"pub fn from_u8(u8) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Parse a tag value from a byte\n","sig":null,"attributes":[{"value":"/ Parse a tag value from a byte","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":18858,"byte_end":18891,"line_start":413,"line_end":413,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":19227,"byte_end":19238,"line_start":425,"line_end":425,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Tag>::is_identity","value":"pub fn is_identity(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this point the identity point?\n","sig":null,"attributes":[{"value":"/ Is this point the identity point?","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":19178,"byte_end":19215,"line_start":424,"line_end":424,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":19337,"byte_end":19350,"line_start":430,"line_end":430,"column_start":12,"column_end":25},"name":"is_compressed","qualname":"<Tag>::is_compressed","value":"pub fn is_compressed(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this point compressed?\n","sig":null,"attributes":[{"value":"/ Is this point compressed?","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":19296,"byte_end":19325,"line_start":429,"line_end":429,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":19654,"byte_end":19665,"line_start":437,"line_end":437,"column_start":12,"column_end":23},"name":"message_len","qualname":"<Tag>::message_len","value":"pub fn message_len(Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Compute the expected total message length for a message prefixed\n with this tag (including the tag byte), given the field element size\n (in bytes) for a particular elliptic curve.\n","sig":null,"attributes":[{"value":"/ Compute the expected total message length for a message prefixed","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":19445,"byte_end":19513,"line_start":434,"line_end":434,"column_start":5,"column_end":73}},{"value":"/ with this tag (including the tag byte), given the field element size","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":19518,"byte_end":19590,"line_start":435,"line_end":435,"column_start":5,"column_end":77}},{"value":"/ (in bytes) for a particular elliptic curve.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":19595,"byte_end":19642,"line_start":436,"line_end":436,"column_start":5,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":184},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":20546,"byte_end":20562,"line_start":467,"line_end":467,"column_start":11,"column_end":27},"name":"FromEncodedPoint","qualname":"::sec1::FromEncodedPoint","value":"FromEncodedPoint<C>","parent":null,"children":[{"krate":0,"index":186}],"decl_id":null,"docs":" Trait for deserializing a value from a SEC1 encoded curve point.","sig":null,"attributes":[{"value":"/ Trait for deserializing a value from a SEC1 encoded curve point.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":20378,"byte_end":20446,"line_start":464,"line_end":464,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":20447,"byte_end":20450,"line_start":465,"line_end":465,"column_start":1,"column_end":4}},{"value":"/ This is intended for use with the `AffinePoint` type for a given elliptic curve.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":20451,"byte_end":20535,"line_start":466,"line_end":466,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":20876,"byte_end":20894,"line_start":479,"line_end":479,"column_start":8,"column_end":26},"name":"from_encoded_point","qualname":"::sec1::FromEncodedPoint::from_encoded_point","value":"pub fn from_encoded_point(&EncodedPoint<C>) -> Option<Self>","parent":{"krate":0,"index":184},"children":[],"decl_id":null,"docs":" Deserialize the type this trait is impl'd on from an [`EncodedPoint`].","sig":null,"attributes":[{"value":"/ Deserialize the type this trait is impl'd on from an [`EncodedPoint`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":20709,"byte_end":20783,"line_start":474,"line_end":474,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":20788,"byte_end":20791,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":20796,"byte_end":20809,"line_start":476,"line_end":476,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":20814,"byte_end":20817,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ `None` if the [`EncodedPoint`] is invalid.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":20822,"byte_end":20868,"line_start":478,"line_end":478,"column_start":5,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":187},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":21109,"byte_end":21123,"line_start":485,"line_end":485,"column_start":11,"column_end":25},"name":"ToEncodedPoint","qualname":"::sec1::ToEncodedPoint","value":"ToEncodedPoint<C>","parent":null,"children":[{"krate":0,"index":189}],"decl_id":null,"docs":" Trait for serializing a value to a SEC1 encoded curve point.","sig":null,"attributes":[{"value":"/ Trait for serializing a value to a SEC1 encoded curve point.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":20945,"byte_end":21009,"line_start":482,"line_end":482,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":21010,"byte_end":21013,"line_start":483,"line_end":483,"column_start":1,"column_end":4}},{"value":"/ This is intended for use with the `AffinePoint` type for a given elliptic curve.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":21014,"byte_end":21098,"line_start":484,"line_end":484,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":21360,"byte_end":21376,"line_start":493,"line_end":493,"column_start":8,"column_end":24},"name":"to_encoded_point","qualname":"::sec1::ToEncodedPoint::to_encoded_point","value":"pub fn to_encoded_point(&Self, bool) -> EncodedPoint<C>","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" Serialize this value as a SEC1 [`EncodedPoint`], optionally applying\n point compression.\n","sig":null,"attributes":[{"value":"/ Serialize this value as a SEC1 [`EncodedPoint`], optionally applying","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":21253,"byte_end":21325,"line_start":491,"line_end":491,"column_start":5,"column_end":77}},{"value":"/ point compression.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":21330,"byte_end":21352,"line_start":492,"line_end":492,"column_start":5,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":190},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"util","qualname":"::util","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196}],"decl_id":null,"docs":" Arithmetic helper functions designed for efficient LLVM lowering.","sig":null,"attributes":[{"value":"/ Arithmetic helper functions designed for efficient LLVM lowering.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":29109,"byte_end":29178,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":29179,"byte_end":29182,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ These functions are intended for supporting arithmetic on field elements","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":29183,"byte_end":29259,"line_start":3,"line_end":3,"column_start":1,"column_end":77}},{"value":"/ modeled as multiple \"limbs\" (e.g. carry chains).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":29260,"byte_end":29312,"line_start":4,"line_end":4,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":191},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":29571,"byte_end":29576,"line_start":12,"line_end":12,"column_start":14,"column_end":19},"name":"adc32","qualname":"::util::adc32","value":"pub const fn adc32(u32, u32, u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Computes `a + b + carry`, returning the result along with the new carry.\n 32-bit version.\n","sig":null,"attributes":[{"value":"/ Computes `a + b + carry`, returning the result along with the new carry.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":29443,"byte_end":29519,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ 32-bit version.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":29520,"byte_end":29539,"line_start":10,"line_end":10,"column_start":1,"column_end":20}},{"value":"inline(always)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":29540,"byte_end":29557,"line_start":11,"line_end":11,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":192},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":29845,"byte_end":29850,"line_start":20,"line_end":20,"column_start":14,"column_end":19},"name":"adc64","qualname":"::util::adc64","value":"pub const fn adc64(u64, u64, u64) -> (u64, u64)","parent":null,"children":[],"decl_id":null,"docs":" Computes `a + b + carry`, returning the result along with the new carry.\n 64-bit version.\n","sig":null,"attributes":[{"value":"/ Computes `a + b + carry`, returning the result along with the new carry.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":29717,"byte_end":29793,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/ 64-bit version.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":29794,"byte_end":29813,"line_start":18,"line_end":18,"column_start":1,"column_end":20}},{"value":"inline(always)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":29814,"byte_end":29831,"line_start":19,"line_end":19,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":193},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":30126,"byte_end":30131,"line_start":28,"line_end":28,"column_start":14,"column_end":19},"name":"sbb32","qualname":"::util::sbb32","value":"pub const fn sbb32(u32, u32, u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Computes `a - (b + borrow)`, returning the result along with the new borrow.\n 32-bit version.\n","sig":null,"attributes":[{"value":"/ Computes `a - (b + borrow)`, returning the result along with the new borrow.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":29994,"byte_end":30074,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ 32-bit version.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":30075,"byte_end":30094,"line_start":26,"line_end":26,"column_start":1,"column_end":20}},{"value":"inline(always)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":30095,"byte_end":30112,"line_start":27,"line_end":27,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":194},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":30426,"byte_end":30431,"line_start":36,"line_end":36,"column_start":14,"column_end":19},"name":"sbb64","qualname":"::util::sbb64","value":"pub const fn sbb64(u64, u64, u64) -> (u64, u64)","parent":null,"children":[],"decl_id":null,"docs":" Computes `a - (b + borrow)`, returning the result along with the new borrow.\n 64-bit version.\n","sig":null,"attributes":[{"value":"/ Computes `a - (b + borrow)`, returning the result along with the new borrow.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":30294,"byte_end":30374,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ 64-bit version.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":30375,"byte_end":30394,"line_start":34,"line_end":34,"column_start":1,"column_end":20}},{"value":"inline(always)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":30395,"byte_end":30412,"line_start":35,"line_end":35,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":195},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":30731,"byte_end":30736,"line_start":44,"line_end":44,"column_start":14,"column_end":19},"name":"mac32","qualname":"::util::mac32","value":"pub const fn mac32(u32, u32, u32, u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Computes `a + (b * c) + carry`, returning the result along with the new carry.\n 32-bit version.\n","sig":null,"attributes":[{"value":"/ Computes `a + (b * c) + carry`, returning the result along with the new carry.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":30597,"byte_end":30679,"line_start":41,"line_end":41,"column_start":1,"column_end":83}},{"value":"/ 32-bit version.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":30680,"byte_end":30699,"line_start":42,"line_end":42,"column_start":1,"column_end":20}},{"value":"inline(always)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":30700,"byte_end":30717,"line_start":43,"line_end":43,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":196},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":31034,"byte_end":31039,"line_start":52,"line_end":52,"column_start":14,"column_end":19},"name":"mac64","qualname":"::util::mac64","value":"pub const fn mac64(u64, u64, u64, u64) -> (u64, u64)","parent":null,"children":[],"decl_id":null,"docs":" Computes `a + (b * c) + carry`, returning the result along with the new carry.\n 64-bit version.\n","sig":null,"attributes":[{"value":"/ Computes `a + (b * c) + carry`, returning the result along with the new carry.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":30900,"byte_end":30982,"line_start":49,"line_end":49,"column_start":1,"column_end":83}},{"value":"/ 64-bit version.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":30983,"byte_end":31002,"line_start":50,"line_end":50,"column_start":1,"column_end":20}},{"value":"inline(always)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/util.rs","byte_start":31003,"byte_end":31020,"line_start":51,"line_end":51,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":197},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"weierstrass","qualname":"::weierstrass","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass.rs","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":217}],"decl_id":null,"docs":" Elliptic curves in short Weierstrass form.\n","sig":null,"attributes":[{"value":"/ Elliptic curves in short Weierstrass form.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass.rs","byte_start":31207,"byte_end":31253,"line_start":1,"line_end":1,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":198},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass/point.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"point","qualname":"::weierstrass::point","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass/point.rs","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":214}],"decl_id":null,"docs":" Traits for Weierstrass elliptic curve points\n","sig":null,"attributes":[{"value":"/ Traits for Weierstrass elliptic curve points","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass/point.rs","byte_start":31368,"byte_end":31416,"line_start":1,"line_end":1,"column_start":1,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":212},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass/point.rs","byte_start":31533,"byte_end":31544,"line_start":8,"line_end":8,"column_start":11,"column_end":22},"name":"Compression","qualname":"::weierstrass::point::Compression","value":"Compression","parent":null,"children":[{"krate":0,"index":213}],"decl_id":null,"docs":" Point compression settings\n","sig":null,"attributes":[{"value":"/ Point compression settings","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass/point.rs","byte_start":31492,"byte_end":31522,"line_start":7,"line_end":7,"column_start":1,"column_end":31}}]},{"kind":"Const","id":{"krate":0,"index":213},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass/point.rs","byte_start":31613,"byte_end":31628,"line_start":10,"line_end":10,"column_start":11,"column_end":26},"name":"COMPRESS_POINTS","qualname":"::weierstrass::point::Compression::COMPRESS_POINTS","value":"bool","parent":{"krate":0,"index":212},"children":[],"decl_id":null,"docs":" Should point compression be applied by default?\n","sig":null,"attributes":[{"value":"/ Should point compression be applied by default?","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass/point.rs","byte_start":31551,"byte_end":31602,"line_start":9,"line_end":9,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":214},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass/point.rs","byte_start":31795,"byte_end":31805,"line_start":15,"line_end":15,"column_start":11,"column_end":21},"name":"Decompress","qualname":"::weierstrass::point::Decompress","value":"Decompress<C: Curve>: Sized","parent":null,"children":[{"krate":0,"index":216}],"decl_id":null,"docs":" Attempt to decompress an elliptic curve point from its x-coordinate and\n a boolean flag indicating whether or not the y-coordinate is odd.\n","sig":null,"attributes":[{"value":"/ Attempt to decompress an elliptic curve point from its x-coordinate and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass/point.rs","byte_start":31639,"byte_end":31714,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ a boolean flag indicating whether or not the y-coordinate is odd.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass/point.rs","byte_start":31715,"byte_end":31784,"line_start":14,"line_end":14,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass/point.rs","byte_start":31886,"byte_end":31896,"line_start":17,"line_end":17,"column_start":8,"column_end":18},"name":"decompress","qualname":"::weierstrass::point::Decompress::decompress","value":"pub fn decompress(&FieldBytes<C>, Choice) -> CtOption<Self>","parent":{"krate":0,"index":214},"children":[],"decl_id":null,"docs":" Attempt to decompress an elliptic curve point\n","sig":null,"attributes":[{"value":"/ Attempt to decompress an elliptic curve point","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass/point.rs","byte_start":31829,"byte_end":31878,"line_start":16,"line_end":16,"column_start":5,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":217},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass.rs","byte_start":31344,"byte_end":31349,"line_start":6,"line_end":6,"column_start":11,"column_end":16},"name":"Curve","qualname":"::weierstrass::Curve","value":"Curve: super::Curve","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for elliptic curves in short Weierstrass form\n","sig":null,"attributes":[{"value":"/ Marker trait for elliptic curves in short Weierstrass form","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass.rs","byte_start":31271,"byte_end":31333,"line_start":5,"line_end":5,"column_start":1,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":218},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/point.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"point","qualname":"::point","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/point.rs","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":226},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":234}],"decl_id":null,"docs":" Elliptic curve points.\n","sig":null,"attributes":[{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":957,"byte_end":987,"line_start":34,"line_end":34,"column_start":1,"column_end":31}},{"value":"/ Elliptic curve points.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/point.rs","byte_start":31956,"byte_end":31982,"line_start":1,"line_end":1,"column_start":1,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":229},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/point.rs","byte_start":32097,"byte_end":32117,"line_start":6,"line_end":6,"column_start":11,"column_end":31},"name":"ProjectiveArithmetic","qualname":"::point::ProjectiveArithmetic","value":"ProjectiveArithmetic: Curve","parent":null,"children":[{"krate":0,"index":231}],"decl_id":null,"docs":" Elliptic curve with projective arithmetic implementation.\n","sig":null,"attributes":[{"value":"/ Elliptic curve with projective arithmetic implementation.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/point.rs","byte_start":32025,"byte_end":32086,"line_start":5,"line_end":5,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":231},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/point.rs","byte_start":32332,"byte_end":32347,"line_start":12,"line_end":12,"column_start":10,"column_end":25},"name":"ProjectivePoint","qualname":"::point::ProjectiveArithmetic::ProjectivePoint","value":"type ProjectivePoint: group::Curve;","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" Elliptic curve point in projective coordinates.\n","sig":null,"attributes":[{"value":"/ Elliptic curve point in projective coordinates.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/point.rs","byte_start":32271,"byte_end":32322,"line_start":11,"line_end":11,"column_start":5,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":232},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/point.rs","byte_start":32467,"byte_end":32478,"line_start":17,"line_end":17,"column_start":10,"column_end":21},"name":"AffinePoint","qualname":"::point::AffinePoint","value":"<<C as ProjectiveArithmetic>::ProjectivePoint as group::Curve>::AffineRepr","parent":null,"children":[],"decl_id":null,"docs":" Affine point type for a given curve with a [`ProjectiveArithmetic`]\n implementation.\n","sig":null,"attributes":[{"value":"/ Affine point type for a given curve with a [`ProjectiveArithmetic`]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/point.rs","byte_start":32366,"byte_end":32437,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/ implementation.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/point.rs","byte_start":32438,"byte_end":32457,"line_start":16,"line_end":16,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":234},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/point.rs","byte_start":32670,"byte_end":32685,"line_start":22,"line_end":22,"column_start":10,"column_end":25},"name":"ProjectivePoint","qualname":"::point::ProjectivePoint","value":"<C as ProjectiveArithmetic>::ProjectivePoint","parent":null,"children":[],"decl_id":null,"docs":" Projective point type for a given curve with a [`ProjectiveArithmetic`]\n implementation.\n","sig":null,"attributes":[{"value":"/ Projective point type for a given curve with a [`ProjectiveArithmetic`]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/point.rs","byte_start":32565,"byte_end":32640,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ implementation.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/point.rs","byte_start":32641,"byte_end":32660,"line_start":21,"line_end":21,"column_start":1,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":236},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"public_key","qualname":"::public_key","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","parent":null,"children":[{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":248},{"krate":0,"index":251},{"krate":0,"index":254},{"krate":0,"index":257},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":273},{"krate":0,"index":276},{"krate":0,"index":279},{"krate":0,"index":282},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":299},{"krate":0,"index":302},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":309},{"krate":0,"index":767},{"krate":0,"index":771},{"krate":0,"index":775},{"krate":0,"index":312},{"krate":0,"index":321},{"krate":0,"index":325},{"krate":0,"index":330},{"krate":0,"index":335},{"krate":0,"index":339},{"krate":0,"index":343},{"krate":0,"index":348},{"krate":0,"index":352},{"krate":0,"index":355},{"krate":0,"index":358}],"decl_id":null,"docs":" Elliptic curve public keys.\n","sig":null,"attributes":[{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1057,"byte_end":1087,"line_start":37,"line_end":37,"column_start":1,"column_end":31}},{"value":"/ Elliptic curve public keys.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":32738,"byte_end":32769,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":767},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":34550,"byte_end":34559,"line_start":64,"line_end":64,"column_start":12,"column_end":21},"name":"PublicKey","qualname":"::public_key::PublicKey","value":"PublicKey {  }","parent":null,"children":[{"krate":0,"index":770}],"decl_id":null,"docs":" Elliptic curve public keys.","sig":null,"attributes":[{"value":"/ Elliptic curve public keys.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":33493,"byte_end":33524,"line_start":37,"line_end":37,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":33525,"byte_end":33528,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ This is a wrapper type for [`AffinePoint`] which ensures an inner","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":33529,"byte_end":33598,"line_start":39,"line_end":39,"column_start":1,"column_end":70}},{"value":"/ non-identity point and provides a common place to handle encoding/decoding.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":33599,"byte_end":33678,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":33679,"byte_end":33682,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Parsing \"SPKI\" Keys","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":33683,"byte_end":33708,"line_start":42,"line_end":42,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":33709,"byte_end":33712,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ X.509 `SubjectPublicKeyInfo` (SPKI) is a commonly used format for encoding","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":33713,"byte_end":33791,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/ public keys, notably public keys corresponding to PKCS#8 private keys.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":33792,"byte_end":33866,"line_start":45,"line_end":45,"column_start":1,"column_end":75}},{"value":"/ (especially ones generated by OpenSSL).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":33867,"byte_end":33910,"line_start":46,"line_end":46,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":33911,"byte_end":33914,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Keys in SPKI format are either binary (ASN.1 BER/DER), or PEM encoded","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":33915,"byte_end":33988,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/ (ASCII) and begin with the following:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":33989,"byte_end":34030,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":34031,"byte_end":34034,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":34035,"byte_end":34046,"line_start":51,"line_end":51,"column_start":1,"column_end":12}},{"value":"/ -----BEGIN PUBLIC KEY-----","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":34047,"byte_end":34077,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":34078,"byte_end":34085,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":34086,"byte_end":34089,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ To decode an elliptic curve public key from SPKI, enable the `pkcs8`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":34090,"byte_end":34162,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/ feature of this crate (or the `pkcs8` feature of a specific RustCrypto","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":34163,"byte_end":34237,"line_start":56,"line_end":56,"column_start":1,"column_end":75}},{"value":"/ elliptic curve crate) and use the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":34238,"byte_end":34275,"line_start":57,"line_end":57,"column_start":1,"column_end":38}},{"value":"/ [`elliptic_curve::pkcs8::FromPublicKey`][`pkcs8::FromPublicKey`]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":34276,"byte_end":34344,"line_start":58,"line_end":58,"column_start":1,"column_end":69}},{"value":"/ trait to parse it.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":34345,"byte_end":34367,"line_start":59,"line_end":59,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":34368,"byte_end":34371,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ When the `pem` feature of this crate (or a specific RustCrypto elliptic","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":34372,"byte_end":34447,"line_start":61,"line_end":61,"column_start":1,"column_end":76}},{"value":"/ curve crate) is enabled, a [`FromStr`] impl is also available.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":34448,"byte_end":34514,"line_start":62,"line_end":62,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":35131,"byte_end":35142,"line_start":83,"line_end":83,"column_start":12,"column_end":23},"name":"from_affine","qualname":"<PublicKey<C>>::from_affine","value":"pub fn from_affine(AffinePoint<C>) -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Convert an [`AffinePoint`] into a [`PublicKey`]\n","sig":null,"attributes":[{"value":"/ Convert an [`AffinePoint`] into a [`PublicKey`]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":35068,"byte_end":35119,"line_start":82,"line_end":82,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":35490,"byte_end":35508,"line_start":93,"line_end":93,"column_start":12,"column_end":30},"name":"from_secret_scalar","qualname":"<PublicKey<C>>::from_secret_scalar","value":"pub fn from_secret_scalar(&NonZeroScalar<C>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compute a [`PublicKey`] from a secret [`NonZeroScalar`] value\n (i.e. a secret key represented as a raw scalar value)\n","sig":null,"attributes":[{"value":"/ Compute a [`PublicKey`] from a secret [`NonZeroScalar`] value","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":35351,"byte_end":35416,"line_start":91,"line_end":91,"column_start":5,"column_end":70}},{"value":"/ (i.e. a secret key represented as a raw scalar value)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":35421,"byte_end":35478,"line_start":92,"line_end":92,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":36024,"byte_end":36039,"line_start":106,"line_end":106,"column_start":12,"column_end":27},"name":"from_sec1_bytes","qualname":"<PublicKey<C>>::from_sec1_bytes","value":"pub fn from_sec1_bytes(&[u8]) -> Result<Self, Error> where\nSelf: TryFrom<EncodedPoint<C>, Error = Error>, UntaggedPointSize<C>: Add<U1> +\nArrayLength<u8>, UncompressedPointSize<C>: ArrayLength<u8>","parent":null,"children":[],"decl_id":null,"docs":" Decode [`PublicKey`] (compressed or uncompressed) from the\n `Elliptic-Curve-Point-to-Octet-String` encoding described in\n SEC 1: Elliptic Curve Cryptography (Version 2.0) section\n 2.3.3 (page 10).","sig":null,"attributes":[{"value":"/ Decode [`PublicKey`] (compressed or uncompressed) from the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":35741,"byte_end":35803,"line_start":100,"line_end":100,"column_start":5,"column_end":67}},{"value":"/ `Elliptic-Curve-Point-to-Octet-String` encoding described in","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":35808,"byte_end":35872,"line_start":101,"line_end":101,"column_start":5,"column_end":69}},{"value":"/ SEC 1: Elliptic Curve Cryptography (Version 2.0) section","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":35877,"byte_end":35937,"line_start":102,"line_end":102,"column_start":5,"column_end":65}},{"value":"/ 2.3.3 (page 10).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":35942,"byte_end":35962,"line_start":103,"line_end":103,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":35967,"byte_end":35970,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ <http://www.secg.org/sec1-v2.pdf>","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":35975,"byte_end":36012,"line_start":105,"line_end":105,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":36516,"byte_end":36525,"line_start":120,"line_end":120,"column_start":12,"column_end":21},"name":"as_affine","qualname":"<PublicKey<C>>::as_affine","value":"pub fn as_affine(&Self) -> &AffinePoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the inner [`AffinePoint`] from this [`PublicKey`].","sig":null,"attributes":[{"value":"/ Borrow the inner [`AffinePoint`] from this [`PublicKey`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":36380,"byte_end":36441,"line_start":117,"line_end":117,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":36446,"byte_end":36449,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ In ECC, public keys are elliptic curve points.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":36454,"byte_end":36504,"line_start":119,"line_end":119,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":36672,"byte_end":36685,"line_start":125,"line_end":125,"column_start":12,"column_end":25},"name":"to_projective","qualname":"<PublicKey<C>>::to_projective","value":"pub fn to_projective(&Self) -> ProjectivePoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Convert this [`PublicKey`] to a [`ProjectivePoint`] for the given curve\n","sig":null,"attributes":[{"value":"/ Convert this [`PublicKey`] to a [`ProjectivePoint`] for the given curve","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":36585,"byte_end":36660,"line_start":124,"line_end":124,"column_start":5,"column_end":80}}]},{"kind":"Mod","id":{"krate":0,"index":362},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scalar","qualname":"::scalar","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":371},{"krate":0,"index":374},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":383},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":397},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":404},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":411},{"krate":0,"index":414},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":421},{"krate":0,"index":424},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":430},{"krate":0,"index":432},{"krate":0,"index":779},{"krate":0,"index":783},{"krate":0,"index":434},{"krate":0,"index":441},{"krate":0,"index":445},{"krate":0,"index":449},{"krate":0,"index":452},{"krate":0,"index":457},{"krate":0,"index":461},{"krate":0,"index":466},{"krate":0,"index":471}],"decl_id":null,"docs":" Scalar types\n","sig":null,"attributes":[{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1162,"byte_end":1192,"line_start":40,"line_end":40,"column_start":1,"column_end":31}},{"value":"/ Scalar types","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":46410,"byte_end":46426,"line_start":1,"line_end":1,"column_start":1,"column_end":17}}]},{"kind":"Type","id":{"krate":0,"index":430},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":46913,"byte_end":46919,"line_start":19,"line_end":19,"column_start":10,"column_end":16},"name":"Scalar","qualname":"::scalar::Scalar","value":"<<C as ProjectiveArithmetic>::ProjectivePoint as Group>::Scalar","parent":null,"children":[],"decl_id":null,"docs":" Scalar field element for a particular elliptic curve.\n","sig":null,"attributes":[{"value":"/ Scalar field element for a particular elliptic curve.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":46846,"byte_end":46903,"line_start":18,"line_end":18,"column_start":1,"column_end":58}}]},{"kind":"Type","id":{"krate":0,"index":432},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":47067,"byte_end":47077,"line_start":22,"line_end":22,"column_start":10,"column_end":20},"name":"ScalarBits","qualname":"::scalar::ScalarBits","value":"BitArray<Lsb0, <Scalar<C> as PrimeField>::ReprBits>","parent":null,"children":[],"decl_id":null,"docs":" Bit representation of a scalar field element of a given curve.\n","sig":null,"attributes":[{"value":"/ Bit representation of a scalar field element of a given curve.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":46991,"byte_end":47057,"line_start":21,"line_end":21,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":779},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":47539,"byte_end":47552,"line_start":33,"line_end":33,"column_start":12,"column_end":25},"name":"NonZeroScalar","qualname":"::scalar::NonZeroScalar","value":"NonZeroScalar {  }","parent":null,"children":[{"krate":0,"index":782}],"decl_id":null,"docs":" Non-zero scalar type.","sig":null,"attributes":[{"value":"/ Non-zero scalar type.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":47137,"byte_end":47162,"line_start":24,"line_end":24,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":47163,"byte_end":47166,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ This type ensures that its value is not zero, ala `core::num::NonZero*`.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":47167,"byte_end":47243,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ To do this, the generic `S` type must impl both `Default` and","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":47244,"byte_end":47309,"line_start":27,"line_end":27,"column_start":1,"column_end":66}},{"value":"/ `ConstantTimeEq`, with the requirement that `S::default()` returns 0.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":47310,"byte_end":47383,"line_start":28,"line_end":28,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":47384,"byte_end":47387,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ In the context of ECC, it's useful for ensuring that scalar multiplication","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":47388,"byte_end":47466,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ cannot result in the point at infinity.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":47467,"byte_end":47510,"line_start":31,"line_end":31,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":47980,"byte_end":47986,"line_start":49,"line_end":49,"column_start":12,"column_end":18},"name":"random","qualname":"<NonZeroScalar<C>>::random","value":"pub fn random<impl CryptoRng + RngCore: CryptoRng +\n              RngCore>(impl CryptoRng + RngCore) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Generate a random `NonZeroScalar`\n","sig":null,"attributes":[{"value":"/ Generate a random `NonZeroScalar`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":47931,"byte_end":47968,"line_start":48,"line_end":48,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":48315,"byte_end":48324,"line_start":59,"line_end":59,"column_start":12,"column_end":21},"name":"from_repr","qualname":"<NonZeroScalar<C>>::from_repr","value":"pub fn from_repr(FieldBytes<C>) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decode a [`NonZeroScalar] from a serialized field element\n","sig":null,"attributes":[{"value":"/ Decode a [`NonZeroScalar] from a serialized field element","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":48242,"byte_end":48303,"line_start":58,"line_end":58,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":48537,"byte_end":48540,"line_start":65,"line_end":65,"column_start":12,"column_end":15},"name":"new","qualname":"<NonZeroScalar<C>>::new","value":"pub fn new(Scalar<C>) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a [`NonZeroScalar`] from a scalar.\n","sig":null,"attributes":[{"value":"/ Create a [`NonZeroScalar`] from a scalar.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":48432,"byte_end":48477,"line_start":63,"line_end":63,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":475},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"secret_key","qualname":"::secret_key","value":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":483},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":491},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":518},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":525},{"krate":0,"index":528},{"krate":0,"index":531},{"krate":0,"index":534},{"krate":0,"index":537},{"krate":0,"index":787},{"krate":0,"index":790},{"krate":0,"index":540},{"krate":0,"index":554},{"krate":0,"index":558},{"krate":0,"index":561},{"krate":0,"index":564},{"krate":0,"index":567},{"krate":0,"index":793},{"krate":0,"index":797},{"krate":0,"index":572},{"krate":0,"index":575},{"krate":0,"index":578},{"krate":0,"index":581},{"krate":0,"index":585}],"decl_id":null,"docs":" Secret keys for elliptic curves (i.e. private scalars)","sig":null,"attributes":[{"value":"cfg(feature = \"zeroize\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1442,"byte_end":1469,"line_start":52,"line_end":52,"column_start":1,"column_end":28}},{"value":"/ Secret keys for elliptic curves (i.e. private scalars)","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":51318,"byte_end":51376,"line_start":1,"line_end":1,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":51377,"byte_end":51380,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The [`SecretKey`] type is a wrapper around a secret scalar value which is","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":51381,"byte_end":51458,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ designed to prevent unintentional exposure (e.g. via `Debug` or other","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":51459,"byte_end":51532,"line_start":4,"line_end":4,"column_start":1,"column_end":74}},{"value":"/ logging).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":51533,"byte_end":51546,"line_start":5,"line_end":5,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":51547,"byte_end":51550,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ When the `zeroize` feature of this crate is enabled, it also handles","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":51551,"byte_end":51623,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"/ zeroing it out of memory securely on drop.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":51624,"byte_end":51670,"line_start":8,"line_end":8,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":787},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":53211,"byte_end":53220,"line_start":60,"line_end":60,"column_start":12,"column_end":21},"name":"SecretKey","qualname":"::secret_key::SecretKey","value":"SecretKey {  }","parent":null,"children":[{"krate":0,"index":789}],"decl_id":null,"docs":" Elliptic curve secret keys.","sig":null,"attributes":[{"value":"/ Elliptic curve secret keys.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52201,"byte_end":52232,"line_start":33,"line_end":33,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52233,"byte_end":52236,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ This type wraps a secret scalar value, helping to prevent accidental","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52237,"byte_end":52309,"line_start":35,"line_end":35,"column_start":1,"column_end":73}},{"value":"/ exposure and securely erasing the value from memory when dropped","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52310,"byte_end":52378,"line_start":36,"line_end":36,"column_start":1,"column_end":69}},{"value":"/ (when the `zeroize` feature of this crate is enabled).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52379,"byte_end":52437,"line_start":37,"line_end":37,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52438,"byte_end":52441,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ # Parsing PKCS#8 Keys","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52442,"byte_end":52467,"line_start":39,"line_end":39,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52468,"byte_end":52471,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ PKCS#8 is a commonly used format for encoding secret keys (especially ones","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52472,"byte_end":52550,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ generated by OpenSSL).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52551,"byte_end":52577,"line_start":42,"line_end":42,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52578,"byte_end":52581,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Keys in PKCS#8 format are either binary (ASN.1 BER/DER), or PEM encoded","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52582,"byte_end":52657,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"/ (ASCII) and begin with the following:","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52658,"byte_end":52699,"line_start":45,"line_end":45,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52700,"byte_end":52703,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52704,"byte_end":52715,"line_start":47,"line_end":47,"column_start":1,"column_end":12}},{"value":"/ -----BEGIN PRIVATE KEY-----","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52716,"byte_end":52747,"line_start":48,"line_end":48,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52748,"byte_end":52755,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52756,"byte_end":52759,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ To decode an elliptic curve private key from PKCS#8, enable the `pkcs8`","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52760,"byte_end":52835,"line_start":51,"line_end":51,"column_start":1,"column_end":76}},{"value":"/ feature of this crate (or the `pkcs8` feature of a specific RustCrypto","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52836,"byte_end":52910,"line_start":52,"line_end":52,"column_start":1,"column_end":75}},{"value":"/ elliptic curve crate) and use the","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52911,"byte_end":52948,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/ [`elliptic_curve::pkcs8::FromPrivateKey`][`FromPrivateKey`]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":52949,"byte_end":53012,"line_start":54,"line_end":54,"column_start":1,"column_end":64}},{"value":"/ trait to parse it.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":53013,"byte_end":53035,"line_start":55,"line_end":55,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":53036,"byte_end":53039,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ When the `pem` feature of this crate (or a specific RustCrypto elliptic","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":53040,"byte_end":53115,"line_start":57,"line_end":57,"column_start":1,"column_end":76}},{"value":"/ curve crate) is enabled, a [`FromStr`] impl is also available.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":53116,"byte_end":53182,"line_start":58,"line_end":58,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":53590,"byte_end":53596,"line_start":74,"line_end":74,"column_start":12,"column_end":18},"name":"random","qualname":"<SecretKey<C>>::random","value":"pub fn random<impl CryptoRng + RngCore: CryptoRng +\n              RngCore>(impl CryptoRng + RngCore) -> Self where\nC: ProjectiveArithmetic + SecretValue<Secret = NonZeroScalar<C>>,\nFieldBytes<C>: From<Scalar<C>> + for<'a> From<&'a Scalar<C>>,\nScalar<C>: PrimeField<Repr = FieldBytes<C>> + Zeroize","parent":null,"children":[],"decl_id":null,"docs":" Generate a random [`SecretKey`]\n","sig":null,"attributes":[{"value":"/ Generate a random [`SecretKey`]","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":53450,"byte_end":53485,"line_start":71,"line_end":71,"column_start":5,"column_end":40}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":53490,"byte_end":53520,"line_start":72,"line_end":72,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":54024,"byte_end":54027,"line_start":86,"line_end":86,"column_start":12,"column_end":15},"name":"new","qualname":"<SecretKey<C>>::new","value":"pub fn new(C::Secret) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new secret key from a serialized scalar value\n","sig":null,"attributes":[{"value":"/ Create a new secret key from a serialized scalar value","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":53954,"byte_end":54012,"line_start":85,"line_end":85,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":54174,"byte_end":54184,"line_start":91,"line_end":91,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<SecretKey<C>>::from_bytes","value":"pub fn from_bytes<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>)\n-> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize raw private scalar as a big endian integer\n","sig":null,"attributes":[{"value":"/ Deserialize raw private scalar as a big endian integer","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":54104,"byte_end":54162,"line_start":90,"line_end":90,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":54537,"byte_end":54545,"line_start":102,"line_end":102,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<SecretKey<C>>::to_bytes","value":"pub fn to_bytes(&Self) -> FieldBytes<C>","parent":null,"children":[],"decl_id":null,"docs":" Expose the byte serialization of the value this [`SecretKey`] wraps\n","sig":null,"attributes":[{"value":"/ Expose the byte serialization of the value this [`SecretKey`] wraps","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":54454,"byte_end":54525,"line_start":101,"line_end":101,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":54903,"byte_end":54916,"line_start":115,"line_end":115,"column_start":12,"column_end":25},"name":"secret_scalar","qualname":"<SecretKey<C>>::secret_scalar","value":"pub fn secret_scalar(&Self) -> &NonZeroScalar<C> where\nC: ProjectiveArithmetic + SecretValue<Secret = NonZeroScalar<C>>,\nFieldBytes<C>: From<Scalar<C>> + for<'a> From<&'a Scalar<C>>,\nScalar<C>: PrimeField<Repr = FieldBytes<C>> + Zeroize","parent":null,"children":[],"decl_id":null,"docs":" Borrow the inner secret [`Scalar`] value.","sig":null,"attributes":[{"value":"/ Borrow the inner secret [`Scalar`] value.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":54624,"byte_end":54669,"line_start":106,"line_end":106,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":54674,"byte_end":54677,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ # Warning","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":54682,"byte_end":54695,"line_start":108,"line_end":108,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":54700,"byte_end":54703,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ This value is key material.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":54708,"byte_end":54739,"line_start":110,"line_end":110,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":54744,"byte_end":54747,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ Please treat it with the care it deserves!","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":54752,"byte_end":54798,"line_start":112,"line_end":112,"column_start":5,"column_end":51}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":54803,"byte_end":54833,"line_start":113,"line_end":113,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":55373,"byte_end":55383,"line_start":127,"line_end":127,"column_start":12,"column_end":22},"name":"public_key","qualname":"<SecretKey<C>>::public_key","value":"pub fn public_key(&Self) -> PublicKey<C> where C: weierstrass::Curve +\nProjectiveArithmetic + SecretValue<Secret = NonZeroScalar<C>>,\nFieldBytes<C>: From<Scalar<C>> + for<'a> From<&'a Scalar<C>>,\nScalar<C>: PrimeField<Repr = FieldBytes<C>> + Zeroize, AffinePoint<C>: Copy +\nClone + Debug + Default, ProjectivePoint<C>: From<AffinePoint<C>>","parent":null,"children":[],"decl_id":null,"docs":" Get the [`PublicKey`] which corresponds to this secret key\n","sig":null,"attributes":[{"value":"/ Get the [`PublicKey`] which corresponds to this secret key","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":55206,"byte_end":55268,"line_start":124,"line_end":124,"column_start":5,"column_end":67}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":55273,"byte_end":55303,"line_start":125,"line_end":125,"column_start":5,"column_end":35}}]},{"kind":"Trait","id":{"krate":0,"index":564},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":56566,"byte_end":56577,"line_start":172,"line_end":172,"column_start":11,"column_end":22},"name":"SecretValue","qualname":"::secret_key::SecretValue","value":"SecretValue: Curve","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566}],"decl_id":null,"docs":" Inner value stored by a [`SecretKey`].\n","sig":null,"attributes":[{"value":"/ Inner value stored by a [`SecretKey`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":56513,"byte_end":56555,"line_start":171,"line_end":171,"column_start":1,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":565},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":57339,"byte_end":57345,"line_start":189,"line_end":189,"column_start":10,"column_end":16},"name":"Secret","qualname":"::secret_key::SecretValue::Secret","value":"type Secret: Into<FieldBytes<Self>> + Zeroize;","parent":{"krate":0,"index":564},"children":[],"decl_id":null,"docs":" Inner secret value.","sig":null,"attributes":[{"value":"/ Inner secret value.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":56591,"byte_end":56614,"line_start":173,"line_end":173,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":56619,"byte_end":56622,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ ⚠️ WARNING ⚠️","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":56627,"byte_end":56652,"line_start":175,"line_end":175,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":56657,"byte_end":56660,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ This type is not intended to be part of the public API and in future","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":56665,"byte_end":56737,"line_start":177,"line_end":177,"column_start":5,"column_end":77}},{"value":"/ versions of this crate we will try to explore ways to hide it.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":56742,"byte_end":56808,"line_start":178,"line_end":178,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":56813,"byte_end":56816,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Crates such as `k256` and `p256` conditionally define this type","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":56821,"byte_end":56888,"line_start":180,"line_end":180,"column_start":5,"column_end":72}},{"value":"/ differently depending on what cargo features are enabled.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":56893,"byte_end":56954,"line_start":181,"line_end":181,"column_start":5,"column_end":66}},{"value":"/ This means any consumers of this crate attempting to use this type","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":56959,"byte_end":57029,"line_start":182,"line_end":182,"column_start":5,"column_end":75}},{"value":"/ may experience breakages if the cargo features are not what are","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":57034,"byte_end":57101,"line_start":183,"line_end":183,"column_start":5,"column_end":72}},{"value":"/ expected.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":57106,"byte_end":57119,"line_start":184,"line_end":184,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":57124,"byte_end":57127,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ We regret exposing it as part of the public API for now, however if","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":57132,"byte_end":57203,"line_start":186,"line_end":186,"column_start":5,"column_end":76}},{"value":"/ you do reference this type as a downstream consumer of a curve crate,","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":57208,"byte_end":57281,"line_start":187,"line_end":187,"column_start":5,"column_end":78}},{"value":"/ be aware you will experience breakages!","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":57286,"byte_end":57329,"line_start":188,"line_end":188,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":57479,"byte_end":57496,"line_start":193,"line_end":193,"column_start":8,"column_end":25},"name":"from_secret_bytes","qualname":"::secret_key::SecretValue::from_secret_bytes","value":"pub fn from_secret_bytes(&FieldBytes<Self>) -> Option<Self::Secret>","parent":{"krate":0,"index":564},"children":[],"decl_id":null,"docs":" Parse the secret value from bytes\n","sig":null,"attributes":[{"value":"/ Parse the secret value from bytes","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":57386,"byte_end":57423,"line_start":191,"line_end":191,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":793},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":58124,"byte_end":58135,"line_start":214,"line_end":214,"column_start":12,"column_end":23},"name":"SecretBytes","qualname":"::secret_key::SecretBytes","value":"","parent":null,"children":[],"decl_id":null,"docs":" Newtype wrapper for [`FieldBytes`] which impls [`Zeroize`].","sig":null,"attributes":[{"value":"/ Newtype wrapper for [`FieldBytes`] which impls [`Zeroize`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":57948,"byte_end":58011,"line_start":210,"line_end":210,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":58012,"byte_end":58015,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ This allows it to fulfill the [`Zeroize`] bound on [`SecretValue::Secret`].","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":58016,"byte_end":58095,"line_start":212,"line_end":212,"column_start":1,"column_end":80}}]},{"kind":"Trait","id":{"krate":0,"index":668},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3032,"byte_end":3037,"line_start":106,"line_end":106,"column_start":11,"column_end":16},"name":"Curve","qualname":"::Curve","value":"Curve: Clone + Debug + Default + Eq + Ord + Send + Sync","parent":null,"children":[{"krate":0,"index":669}],"decl_id":null,"docs":" Elliptic curve.","sig":null,"attributes":[{"value":"/ Elliptic curve.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":2706,"byte_end":2725,"line_start":98,"line_end":98,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":2726,"byte_end":2729,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ This trait is intended to be impl'd by a ZST which represents a concrete","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":2730,"byte_end":2806,"line_start":100,"line_end":100,"column_start":1,"column_end":77}},{"value":"/ elliptic curve.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":2807,"byte_end":2826,"line_start":101,"line_end":101,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":2827,"byte_end":2830,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Other traits in this crate which are bounded by [`Curve`] are intended to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":2831,"byte_end":2908,"line_start":103,"line_end":103,"column_start":1,"column_end":78}},{"value":"/ be impl'd by these ZSTs, facilitating types which are generic over elliptic","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":2909,"byte_end":2988,"line_start":104,"line_end":104,"column_start":1,"column_end":80}},{"value":"/ curves (e.g. [`SecretKey`]).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":2989,"byte_end":3021,"line_start":105,"line_end":105,"column_start":1,"column_end":33}}]},{"kind":"Type","id":{"krate":0,"index":669},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3376,"byte_end":3385,"line_start":112,"line_end":112,"column_start":10,"column_end":19},"name":"FieldSize","qualname":"::Curve::FieldSize","value":"type FieldSize: ArrayLength<u8> + Add + Eq + Ord + Unsigned;","parent":{"krate":0,"index":668},"children":[],"decl_id":null,"docs":" Size of this curve's field in *bytes*, i.e. the number of bytes needed\n to serialize a field element.","sig":null,"attributes":[{"value":"/ Size of this curve's field in *bytes*, i.e. the number of bytes needed","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3094,"byte_end":3168,"line_start":107,"line_end":107,"column_start":5,"column_end":79}},{"value":"/ to serialize a field element.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3173,"byte_end":3206,"line_start":108,"line_end":108,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3211,"byte_end":3214,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ This is used for computing the sizes of field element types related to","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3219,"byte_end":3293,"line_start":110,"line_end":110,"column_start":5,"column_end":79}},{"value":"/ this curve and other types composed from them (e.g. signatures).","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3298,"byte_end":3366,"line_start":111,"line_end":111,"column_start":5,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":670},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3517,"byte_end":3527,"line_start":116,"line_end":116,"column_start":10,"column_end":20},"name":"FieldBytes","qualname":"::FieldBytes","value":"GenericArray<u8, <C as Curve>::FieldSize>","parent":null,"children":[],"decl_id":null,"docs":" Byte representation of a base/scalar field element of a given curve.\n","sig":null,"attributes":[{"value":"/ Byte representation of a base/scalar field element of a given curve.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3435,"byte_end":3507,"line_start":115,"line_end":115,"column_start":1,"column_end":73}}]},{"kind":"Trait","id":{"krate":0,"index":672},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3828,"byte_end":3838,"line_start":124,"line_end":124,"column_start":11,"column_end":21},"name":"FromDigest","qualname":"::FromDigest","value":"FromDigest<C: Curve>","parent":null,"children":[{"krate":0,"index":674}],"decl_id":null,"docs":" Instantiate this type from the output of a digest.","sig":null,"attributes":[{"value":"/ Instantiate this type from the output of a digest.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3577,"byte_end":3631,"line_start":118,"line_end":118,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3632,"byte_end":3635,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ This can be used for implementing hash-to-scalar (e.g. as in ECDSA) or","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3636,"byte_end":3710,"line_start":120,"line_end":120,"column_start":1,"column_end":75}},{"value":"/ hash-to-curve algorithms.","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3711,"byte_end":3740,"line_start":121,"line_end":121,"column_start":1,"column_end":30}},{"value":"cfg(feature = \"digest\")","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3741,"byte_end":3767,"line_start":122,"line_end":122,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3915,"byte_end":3926,"line_start":126,"line_end":126,"column_start":8,"column_end":19},"name":"from_digest","qualname":"::FromDigest::from_digest","value":"pub fn from_digest<D>(D) -> Self where D: Digest<OutputSize = C::FieldSize>","parent":{"krate":0,"index":672},"children":[],"decl_id":null,"docs":" Instantiate this type from a [`Digest`] instance\n","sig":null,"attributes":[{"value":"/ Instantiate this type from a [`Digest`] instance","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3855,"byte_end":3907,"line_start":125,"line_end":125,"column_start":5,"column_end":57}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/error.rs","byte_start":4912,"byte_end":4917,"line_start":9,"line_end":9,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":15}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/error.rs","byte_start":5204,"byte_end":5209,"line_start":23,"line_end":23,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/ops.rs","byte_start":5660,"byte_end":5661,"line_start":17,"line_end":17,"column_start":31,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":7805,"byte_end":7817,"line_start":65,"line_end":65,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":15748,"byte_end":15760,"line_start":290,"line_end":290,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":16001,"byte_end":16013,"line_start":302,"line_end":302,"column_start":37,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":16523,"byte_end":16535,"line_start":320,"line_end":320,"column_start":18,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":16750,"byte_end":16762,"line_start":329,"line_end":329,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":17081,"byte_end":17093,"line_start":341,"line_end":341,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":17912,"byte_end":17923,"line_start":378,"line_end":378,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":175}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":18848,"byte_end":18851,"line_start":412,"line_end":412,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":34803,"byte_end":34812,"line_start":74,"line_end":74,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":319},{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":37415,"byte_end":37424,"line_start":146,"line_end":146,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":37789,"byte_end":37798,"line_start":159,"line_end":159,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":38378,"byte_end":38387,"line_start":176,"line_end":176,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":38961,"byte_end":38973,"line_start":193,"line_end":193,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":39543,"byte_end":39555,"line_start":208,"line_end":208,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":40137,"byte_end":40146,"line_start":223,"line_end":223,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":40850,"byte_end":40859,"line_start":240,"line_end":240,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":41514,"byte_end":41523,"line_start":257,"line_end":257,"column_start":18,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":41747,"byte_end":41756,"line_start":266,"line_end":266,"column_start":16,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":42185,"byte_end":42194,"line_start":278,"line_end":278,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":47750,"byte_end":47763,"line_start":42,"line_end":42,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":439},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":48724,"byte_end":48737,"line_start":74,"line_end":74,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":49004,"byte_end":49017,"line_start":85,"line_end":85,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":49387,"byte_end":49400,"line_start":98,"line_end":98,"column_start":18,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":49585,"byte_end":49598,"line_start":106,"line_end":106,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":455},{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":49893,"byte_end":49903,"line_start":119,"line_end":119,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":50181,"byte_end":50194,"line_start":130,"line_end":130,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":50557,"byte_end":50570,"line_start":144,"line_end":144,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":469},{"krate":0,"index":470}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":51063,"byte_end":51076,"line_start":162,"line_end":162,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":53329,"byte_end":53338,"line_start":65,"line_end":65,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":55853,"byte_end":55862,"line_start":139,"line_end":139,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":556},{"krate":0,"index":557}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":56109,"byte_end":56118,"line_start":152,"line_end":152,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":56393,"byte_end":56402,"line_start":162,"line_end":162,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":57606,"byte_end":57607,"line_start":197,"line_end":197,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":58202,"byte_end":58213,"line_start":216,"line_end":216,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":58342,"byte_end":58352,"line_start":222,"line_end":222,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":577}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":58468,"byte_end":58479,"line_start":228,"line_end":228,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":58567,"byte_end":58578,"line_start":234,"line_end":234,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":58710,"byte_end":58721,"line_start":242,"line_end":242,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":887,"byte_end":892,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":6}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":902,"byte_end":905,"line_start":29,"line_end":29,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":17}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":915,"byte_end":919,"line_start":30,"line_end":30,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":47}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":929,"byte_end":933,"line_start":31,"line_end":31,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":190}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":943,"byte_end":954,"line_start":32,"line_end":32,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":197}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass.rs","byte_start":31263,"byte_end":31268,"line_start":3,"line_end":3,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":198}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1050,"byte_end":1055,"line_start":36,"line_end":36,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":218}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1150,"byte_end":1160,"line_start":39,"line_end":39,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":236}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1255,"byte_end":1261,"line_start":42,"line_end":42,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":362}},{"kind":"Mod","span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":1529,"byte_end":1539,"line_start":54,"line_end":54,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":475}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/error.rs","byte_start":4912,"byte_end":4917,"line_start":9,"line_end":9,"column_start":18,"column_end":23},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":676},"to":{"krate":1,"index":8898}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/error.rs","byte_start":5204,"byte_end":5209,"line_start":23,"line_end":23,"column_start":28,"column_end":33},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":676},"to":{"krate":5,"index":2326}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/ops.rs","byte_start":5660,"byte_end":5661,"line_start":17,"line_end":17,"column_start":31,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":44},"to":{"krate":0,"index":40}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":7805,"byte_end":7817,"line_start":65,"line_end":65,"column_start":9,"column_end":21},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":15748,"byte_end":15760,"line_start":290,"line_end":290,"column_start":25,"column_end":37},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":2746}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":16001,"byte_end":16013,"line_start":302,"line_end":302,"column_start":37,"column_end":49},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":683},"to":{"krate":19,"index":66}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":16523,"byte_end":16535,"line_start":320,"line_end":320,"column_start":18,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":2859}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":16750,"byte_end":16762,"line_start":329,"line_end":329,"column_start":19,"column_end":31},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":17081,"byte_end":17093,"line_start":341,"line_end":341,"column_start":21,"column_end":33},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":683},"to":{"krate":22,"index":51}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":17912,"byte_end":17923,"line_start":378,"line_end":378,"column_start":20,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":706},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/sec1.rs","byte_start":18848,"byte_end":18851,"line_start":412,"line_end":412,"column_start":6,"column_end":9},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":743},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass/point.rs","byte_start":31817,"byte_end":31822,"line_start":15,"line_end":15,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":2854},"to":{"krate":0,"index":214}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/weierstrass.rs","byte_start":31358,"byte_end":31363,"line_start":6,"line_end":6,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":668},"to":{"krate":0,"index":217}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/point.rs","byte_start":32119,"byte_end":32124,"line_start":6,"line_end":6,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":668},"to":{"krate":0,"index":229}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":34803,"byte_end":34812,"line_start":74,"line_end":74,"column_start":9,"column_end":18},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":767},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":37415,"byte_end":37424,"line_start":146,"line_end":146,"column_start":35,"column_end":44},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":767},"to":{"krate":1,"index":2746}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":37789,"byte_end":37798,"line_start":159,"line_end":159,"column_start":38,"column_end":47},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":767},"to":{"krate":1,"index":2762}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":38378,"byte_end":38387,"line_start":176,"line_end":176,"column_start":39,"column_end":48},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":767},"to":{"krate":1,"index":2762}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":38961,"byte_end":38973,"line_start":193,"line_end":193,"column_start":32,"column_end":44},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":39543,"byte_end":39555,"line_start":208,"line_end":208,"column_start":33,"column_end":45},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":683},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":40137,"byte_end":40146,"line_start":223,"line_end":223,"column_start":33,"column_end":42},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":767},"to":{"krate":0,"index":184}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":40850,"byte_end":40859,"line_start":240,"line_end":240,"column_start":31,"column_end":40},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":767},"to":{"krate":0,"index":187}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":41514,"byte_end":41523,"line_start":257,"line_end":257,"column_start":18,"column_end":27},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":767},"to":{"krate":1,"index":2859}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":41747,"byte_end":41756,"line_start":266,"line_end":266,"column_start":16,"column_end":25},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":767},"to":{"krate":1,"index":2505}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/public_key.rs","byte_start":42185,"byte_end":42194,"line_start":278,"line_end":278,"column_start":23,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":767},"to":{"krate":1,"index":2500}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":47750,"byte_end":47763,"line_start":42,"line_end":42,"column_start":9,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":779},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":48724,"byte_end":48737,"line_start":74,"line_end":74,"column_start":30,"column_end":43},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":779},"to":{"krate":1,"index":2746}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":49004,"byte_end":49017,"line_start":85,"line_end":85,"column_start":37,"column_end":50},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":779},"to":{"krate":19,"index":66}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":49387,"byte_end":49400,"line_start":98,"line_end":98,"column_start":18,"column_end":31},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":779},"to":{"krate":1,"index":2859}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":49585,"byte_end":49598,"line_start":106,"line_end":106,"column_start":19,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":779},"to":{"krate":1,"index":3060}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":49893,"byte_end":49903,"line_start":119,"line_end":119,"column_start":36,"column_end":46},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":670},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":50181,"byte_end":50194,"line_start":130,"line_end":130,"column_start":20,"column_end":33},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":779},"to":{"krate":0,"index":40}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":50557,"byte_end":50570,"line_start":144,"line_end":144,"column_start":28,"column_end":41},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":779},"to":{"krate":1,"index":2762}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/scalar.rs","byte_start":51063,"byte_end":51076,"line_start":162,"line_end":162,"column_start":21,"column_end":34},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":779},"to":{"krate":22,"index":51}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":53329,"byte_end":53338,"line_start":65,"line_end":65,"column_start":9,"column_end":18},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":787},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":55853,"byte_end":55862,"line_start":139,"line_end":139,"column_start":28,"column_end":37},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":787},"to":{"krate":1,"index":2762}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":56109,"byte_end":56118,"line_start":152,"line_end":152,"column_start":19,"column_end":28},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":787},"to":{"krate":1,"index":8891}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":56393,"byte_end":56402,"line_start":162,"line_end":162,"column_start":18,"column_end":27},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":787},"to":{"krate":1,"index":3084}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":56579,"byte_end":56584,"line_start":172,"line_end":172,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":668},"to":{"krate":0,"index":564}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":57606,"byte_end":57607,"line_start":197,"line_end":197,"column_start":25,"column_end":26},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":568},"to":{"krate":0,"index":564}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":58202,"byte_end":58213,"line_start":216,"line_end":216,"column_start":40,"column_end":51},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":793},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":58342,"byte_end":58352,"line_start":222,"line_end":222,"column_start":41,"column_end":51},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":670},"to":{"krate":1,"index":2755}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":58468,"byte_end":58479,"line_start":228,"line_end":228,"column_start":32,"column_end":43},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":793},"to":{"krate":1,"index":2746}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":58567,"byte_end":58578,"line_start":234,"line_end":234,"column_start":26,"column_end":37},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":793},"to":{"krate":1,"index":3060}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/secret_key.rs","byte_start":58710,"byte_end":58721,"line_start":242,"line_end":242,"column_start":28,"column_end":39},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":793},"to":{"krate":22,"index":51}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3039,"byte_end":3044,"line_start":106,"line_end":106,"column_start":18,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":2470},"to":{"krate":0,"index":668}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3047,"byte_end":3052,"line_start":106,"line_end":106,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":8891},"to":{"krate":0,"index":668}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3055,"byte_end":3062,"line_start":106,"line_end":106,"column_start":34,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":2827},"to":{"krate":0,"index":668}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3065,"byte_end":3067,"line_start":106,"line_end":106,"column_start":44,"column_end":46},"kind":"SuperTrait","from":{"krate":1,"index":2505},"to":{"krate":0,"index":668}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3070,"byte_end":3073,"line_start":106,"line_end":106,"column_start":49,"column_end":52},"kind":"SuperTrait","from":{"krate":1,"index":2536},"to":{"krate":0,"index":668}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3076,"byte_end":3080,"line_start":106,"line_end":106,"column_start":55,"column_end":59},"kind":"SuperTrait","from":{"krate":1,"index":2849},"to":{"krate":0,"index":668}},{"span":{"file_name":"/home/hussain/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.8.5/src/lib.rs","byte_start":3083,"byte_end":3087,"line_start":106,"line_end":106,"column_start":62,"column_end":66},"kind":"SuperTrait","from":{"krate":1,"index":2861},"to":{"krate":0,"index":668}}]}